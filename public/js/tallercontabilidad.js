/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/tallercontabilidad.js":
/*!********************************************!*\
  !*** ./resources/js/tallercontabilidad.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var _data;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//const { update } = require(\"lodash\");\n$(function () {\n  $('[data-toggle=\"tooltip\"]').tooltip();\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////FUNCIONES/////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar funciones = new Vue({\n  data: {\n    options: objeto,\n    cuentas: cuentas\n  },\n  methods: {\n    obtenerNombre: function obtenerNombre(id) {\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      var nombre = cuenta[0].nombre;\n      return nombre;\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    VueSweetAlert2: function VueSweetAlert2(component, propsData) {\n      Swal.fire({\n        html: '<div id=\"VueSweetAlert2\"></div>',\n        showConfirmButton: false,\n        showCloseButton: true,\n        customClass: 'swal-wide',\n        willOpen: function willOpen() {\n          var ComponentClass = Vue.extend(Vue.component(component));\n          var instance = new ComponentClass({\n            propsData: propsData\n          });\n          instance.$mount();\n          document.getElementById('VueSweetAlert2').appendChild(instance.$el);\n        }\n      });\n    },\n    horasExtras: function horasExtras(horas, sueldo) {\n      var total = 0;\n      var horaTrabajo = Number(sueldo) / 30 / 8;\n      horas.forEach(function (hora) {\n        total += Number(hora.dia) * horaTrabajo * 1.50;\n      });\n      return total;\n    },\n    impuestoAgregado: function impuestoAgregado(sueldo, deduciones, fraccion, impuesto_fraccion, interes) {\n      var total = 0;\n      var iies = sueldo * 9.45 / 100;\n      var ingreso_liquido = sueldo - iies;\n      var ingreso_mensual = ingreso_liquido - deduciones;\n      var ingreso_anual = ingreso_mensual * 12;\n      var fraccion_excedente = ingreso_anual - fraccion;\n      var fraccion_excedenteiva = fraccion_excedente * interes / 100;\n      var total_impuesto = impuesto_fraccion + fraccion_excedenteiva;\n      total = total_impuesto / 12;\n      return Number(total).toFixed(2);\n    },\n    prestamoHipotecario: function prestamoHipotecario(valor, tiempo, interes) {\n      var total = 0;\n      var division = Number(valor) / Number(tiempo);\n      var porcentaje = division * Number(interes) / 100;\n      var subtotal = division + porcentaje;\n      total = subtotal / 12;\n      return Number(total).toFixed(2);\n    },\n    prestamoQuirografario: function prestamoQuirografario(valor, meses, interes) {\n      var total = 0;\n      var division = Number(valor) / Number(meses);\n      var porcentaje = division * Number(interes) / 100;\n      total = division + porcentaje;\n      return Number(total).toFixed(2);\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////BALANCE INICIAL HORIZONTAL/////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar b_hori = new Vue({\n  el: '#b_horizontal',\n  data: {\n    options: objeto,\n    cuentas: cuentas,\n    id_taller: taller,\n    tipo: 'horizontal',\n    //diarios:[],\n    update: 0,\n    balance_inicial: {\n      //Nombre y fecha del balance inicial\n      nombre: '',\n      fecha: ''\n    },\n    patrimonio: {\n      //Asignar Patrimonio\n      nom_cuenta: '',\n      cuenta_id: '',\n      saldo: ''\n    },\n    //diarios2:[],\n    total_balance_inicial: {\n      //Totales de activo, pasivo y patrimonio\n      t_activo: '',\n      t_pasivo: '',\n      t_patrimonio_pasivo: ''\n    },\n    b_initotal: {\n      t_a_corriente: '',\n      //Total de activo corriente\n      t_a_nocorriente: '',\n      //Total de activo no corriente\n      t_p_corriente: '',\n      //Total de pasivo corriente\n      t_p_no_corriente: '',\n      //Total de pasivo no corriente\n      t_patrimonio: '' //Total de patrimonio\n\n    },\n    a_corrientes: [],\n    //Array de activos corrientes\n    a_nocorrientes: [],\n    //Array de activos no corrientes\n    p_corrientes: [],\n    //Array de pasivos corrientes\n    p_nocorrientes: [],\n    //Array de pasivos no corrientes\n    patrimonios: [],\n    //Array de patrimonios\n    registro: {\n      activo_corriente: '',\n      activo_nocorriente: '',\n      pasivo_corriente: '',\n      pasivo_nocorriente: '',\n      patrimonio: ''\n    },\n    activo: {\n      a_corriente: {\n        //Agregar un nuevo activo corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false\n      },\n      a_nocorriente: {\n        //Agregar un nuevo activo no corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false\n      }\n    },\n    bi: {\n      const_id: ''\n    },\n    pasivo: {\n      p_corriente: {\n        //Agregar un nuevo pasivo corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false,\n        total: ''\n      },\n      p_nocorriente: {\n        //Agregar un nuevo pasivo no corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false,\n        total: ''\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.cambioActivo();\n    this.cambioActivoNo();\n    this.cambioPasivo();\n    this.cambioPasivoNo();\n    this.cambioPatrimonio();\n    this.TotalActivo();\n    this.TotalPasivo();\n    this.obtenerBalance();\n  },\n  methods: {\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    abrirActivoC: function abrirActivoC() {\n      this.limpiar();\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-activo-corriente-tab').tab('show'); // $('#kardex-promedio-ingreso-edit-tab').tab('show')\n    },\n    abrirActivoNoC: function abrirActivoNoC() {\n      this.limpiar();\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-activo-no-corriente-tab').tab('show');\n    },\n    abrirPasivoC: function abrirPasivoC() {\n      this.limpiar();\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-pasivo-corriente-tab').tab('show');\n    },\n    abrirPasivoNoC: function abrirPasivoNoC() {\n      this.limpiar();\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-pasivo-no-corriente-tab').tab('show');\n    },\n    abrirPatrimonio: function abrirPatrimonio() {\n      this.limpiar();\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-patrimonio-tab').tab('show');\n    },\n    //ELIMINAR ELEMENTOS DE UN ARRAY /////////\n    deleteAcCooriente: function deleteAcCooriente(index) {\n      var _this2 = this;\n\n      var nombre = this.a_corrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this2.a_corrientes.splice(index, 1);\n\n          _this2.cambioActivo();\n\n          _this2.TotalActivo();\n\n          _this2.limpiar();\n        }\n      });\n    },\n    deletePaCooriente: function deletePaCooriente(index) {\n      var _this3 = this;\n\n      var nombre = this.p_corrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this3.p_corrientes.splice(index, 1);\n\n          _this3.cambioPasivo();\n\n          _this3.TotalPasivo();\n\n          _this3.limpiar();\n        }\n      });\n    },\n    deleteAcNoCooriente: function deleteAcNoCooriente(index) {\n      var _this4 = this;\n\n      var nombre = this.a_nocorrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this4.a_nocorrientes.splice(index, 1);\n\n          _this4.cambioActivoNo();\n\n          _this4.TotalActivo();\n\n          _this4.limpiar();\n        }\n      });\n    },\n    deletePaNoCooriente: function deletePaNoCooriente(index) {\n      var _this5 = this;\n\n      var nombre = this.p_nocorrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this5.p_nocorrientes.splice(index, 1);\n\n          _this5.cambioPasivoNo();\n\n          _this5.TotalPasivo();\n\n          _this5.limpiar();\n        }\n      });\n    },\n    deletePatrimonio: function deletePatrimonio(index) {\n      var _this6 = this;\n\n      var nombre = this.patrimonios[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this6.patrimonios.splice(index, 1);\n\n          _this6.cambioPatrimonio();\n\n          _this6.limpiar();\n        }\n      });\n    },\n    limpiar: function limpiar() {\n      //LIMPIAR TODOS LOS CAMPOS DE ACTIVOS PASIVOS Y PATRIMONIOS\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.pasivo.p_corriente.edit = false;\n      this.pasivo.p_nocorriente.edit = false;\n      this.activo.a_corriente.edit = false;\n      this.activo.a_nocorriente.edit = false;\n      this.patrimonio.edit = false;\n      this.bi.const_id = '';\n    },\n    agregarActivoCorriente: function agregarActivoCorriente() {\n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var a_corriente = {\n            cuenta_id: this.activo.a_corriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.activo.a_corriente.saldo\n          };\n          this.a_corrientes.push(a_corriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.cambioActivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editAcorriente: function editAcorriente(index) {\n      this.limpiar();\n      this.activo.a_corriente.edit = true;\n      this.registro.a_corriente = index;\n      this.bi.const_id = this.a_corrientes[index].cuenta_id;\n      this.activo.a_corriente.cuenta_id = this.a_corrientes[index].cuenta_id;\n      this.activo.a_corriente.saldo = this.a_corrientes[index].saldo;\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-activo-corriente-tab').tab('show');\n    },\n    actualizarActivoC: function actualizarActivoC() {\n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_corriente;\n          this.a_corrientes[index].cuenta_id = this.activo.a_corriente.cuenta_id;\n          this.a_corrientes[index].nom_cuenta = nombre;\n          this.a_corrientes[index].saldo = this.activo.a_corriente.saldo;\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.activo.a_corriente.edit = false;\n          this.registro.a_corriente = '';\n          this.cambioActivo();\n        }\n      }\n    },\n    cancelarEdicionActivoC: function cancelarEdicionActivoC() {\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_corriente.edit = false;\n    },\n    agregarActivoNoCorriente: function agregarActivoNoCorriente() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var a_nocorriente = {\n            cuenta_id: this.activo.a_nocorriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.activo.a_nocorriente.saldo\n          };\n          this.a_nocorrientes.push(a_nocorriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.cambioActivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editNoAcorriente: function editNoAcorriente(index) {\n      this.limpiar();\n      this.activo.a_nocorriente.edit = true;\n      this.registro.a_nocorriente = index;\n      this.bi.const_id = this.a_nocorrientes[index].cuenta_id;\n      this.activo.a_nocorriente.cuenta_id = this.a_nocorrientes[index].cuenta_id;\n      this.activo.a_nocorriente.saldo = this.a_nocorrientes[index].saldo;\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-activo-no-corriente-tab').tab('show');\n    },\n    actualizarActivoNC: function actualizarActivoNC() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_nocorriente;\n          this.a_nocorrientes[index].cuenta_id = this.activo.a_nocorriente.cuenta_id;\n          this.a_nocorrientes[index].nom_cuenta = nombre;\n          this.a_nocorrientes[index].saldo = this.activo.a_nocorriente.saldo;\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.activo.a_nocorriente.edit = false;\n          this.registro.a_nocorriente = '';\n          this.cambioActivoNo();\n        }\n      }\n    },\n    cancelarEdicionActivoNC: function cancelarEdicionActivoNC() {\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.activo.a_nocorriente.edit = false;\n    },\n    agregarPasivoCorriente: function agregarPasivoCorriente() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_corriente = {\n            cuenta_id: this.pasivo.p_corriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.pasivo.p_corriente.saldo\n          };\n          this.p_corrientes.push(p_corriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPcorriente: function editPcorriente(index) {\n      this.limpiar();\n      this.pasivo.p_corriente.edit = true;\n      this.registro.p_corriente = index;\n      this.bi.const_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.cuenta_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.saldo = this.p_corrientes[index].saldo;\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-pasivo-corriente-tab').tab('show');\n    },\n    actualizarPasivoC: function actualizarPasivoC() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_corriente;\n          this.p_corrientes[index].cuenta_id = this.pasivo.p_corriente.cuenta_id;\n          this.p_corrientes[index].nom_cuenta = nombre;\n          this.p_corrientes[index].saldo = this.pasivo.p_corriente.saldo;\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.pasivo.p_corriente.edit = false;\n          this.registro.p_corriente = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    cancelarEdicionPcorriente: function cancelarEdicionPcorriente() {\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_corriente.edit = false;\n    },\n    agregarPasivoNoCorriente: function agregarPasivoNoCorriente() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_nocorriente = {\n            cuenta_id: this.pasivo.p_nocorriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.pasivo.p_nocorriente.saldo\n          };\n          this.p_nocorrientes.push(p_nocorriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPNocorriente: function editPNocorriente(index) {\n      this.limpiar();\n      this.pasivo.p_nocorriente.edit = true;\n      this.registro.p_nocorriente = index;\n      this.bi.const_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.cuenta_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.saldo = this.p_nocorrientes[index].saldo;\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-pasivo-no-corriente-tab').tab('show');\n    },\n    actualizarPasivoNC: function actualizarPasivoNC() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_nocorriente;\n          this.p_nocorrientes[index].cuenta_id = this.pasivo.p_nocorriente.cuenta_id;\n          this.p_nocorrientes[index].nom_cuenta = nombre;\n          this.p_nocorrientes[index].saldo = this.pasivo.p_nocorriente.saldo;\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.pasivo.p_nocorriente.edit = false;\n          this.registro.p_nocorriente = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    cancelarEdicionPNocorriente: function cancelarEdicionPNocorriente() {\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.pasivo.p_nocorriente.edit = false;\n    },\n    agregarPatrimonio: function agregarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var patrimonio = {\n            cuenta_id: this.patrimonio.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.patrimonio.saldo\n          };\n          this.patrimonios.push(patrimonio);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPatrimonio: function editPatrimonio(index) {\n      this.limpiar();\n      this.patrimonio.edit = true;\n      this.registro.patrimonio = index;\n      this.bi.const_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.cuenta_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.saldo = this.patrimonios[index].saldo;\n      $('#bih-transaccion').modal('show');\n      $('#nav-bih-patrimonio-tab').tab('show');\n    },\n    actualizarPatrimonio: function actualizarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.patrimonio;\n          this.patrimonios[index].cuenta_id = this.patrimonio.cuenta_id;\n          this.patrimonios[index].nom_cuenta = nombre;\n          this.patrimonios[index].saldo = this.patrimonio.saldo;\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.patrimonio.edit = false;\n          this.registro.patrimonio = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    cancelarEdicionPatrimonio: function cancelarEdicionPatrimonio() {\n      this.patrimonio.cuenta_id = '';\n      this.patrimonio.saldo = '';\n      this.patrimonio.edit = false;\n    },\n    Agregar: function Agregar() {\n      if (this.diario.nom_cuenta.trim() === '') {\n        toastr.error(\"El campo Nombre de cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diario.debe.trim() === '' && this.diario.haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diario.debe.trim() != '' && this.diario.haber.trim() != '') {\n        toastr.warning(\"No pueden estar ambos campos llenos a mismo tiempo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var diario = {\n          fecha: this.diario.fecha,\n          nom_cuenta: this.diario.nom_cuenta,\n          gloza: this.diario.gloza,\n          debe: this.diario.debe,\n          haber: this.diario.haber\n        };\n        this.diarios.push(diario); //añadimos el la variable persona al array\n        //Limpiamos los campos\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.fecha = '';\n        this.diario.nom_cuenta = '';\n        this.diario.gloza = '';\n        this.diario.debe = '';\n        this.diario.haber = '';\n      }\n    },\n    deleteDiario: function deleteDiario(index) {\n      this.diarios.splice(index, 1);\n    },\n    guardarDiario: function guardarDiario() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diario';\n      axios.post(url, {\n        id: _this.id_taller,\n        datos: _this.diarios\n      }).then(function (response) {\n        console.log(response.data);\n      })[\"catch\"](function (error) {});\n    },\n    agregarBalance: function agregarBalance() {\n      if (this.balance.cuenta.trim() === '') {\n        toastr.error(\"El campo cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.suma_debe.trim() === '' && this.balance.suma_haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber DE SUMAS, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.saldo_debe.trim() === '' && this.balance.saldo_haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber de SALDOS, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.saldo_debe.trim() != '' && this.balance.saldo_haber.trim() != '') {\n        toastr.warning(\"No pueden estar ambos campos llenos a mismo tiempo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var balance = {\n          cuenta: this.balance.cuenta,\n          suma_debe: this.balance.suma_debe,\n          suma_haber: this.balance.suma_haber,\n          saldo_debe: this.balance.saldo_debe,\n          saldo_haber: this.balance.saldo_haber\n        };\n        this.balances.push(balance); //añadimos el la variable persona al array\n        //Limpiamos los campos\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.balance.cuenta = '';\n        this.balance.suma_debe = '';\n        this.balance.suma_haber = '';\n        this.balance.saldo_debe = '';\n        this.balance.saldo_haber = '';\n      }\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.bi.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.a_corrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var anc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var pc = this.p_corrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var pnc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var p = this.patrimonios.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (anc.length > 0) {\n        return true;\n      } else if (pc.length > 0) {\n        return true;\n      } else if (pnc.length > 0) {\n        return true;\n      } else if (p.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    //ACTUALIZAR SUMAS DE PASIVOS, ACTIVOS Y PATRIMONIO\n    cambioActivo: function cambioActivo() {\n      this.b_initotal.t_a_corriente = 0;\n      var t_activo = this.a_corrientes; //CARGAR EL ARRAY DE LOS ACTIVOS\n      //console.log(t_activo)\n\n      var total = 0;\n      t_activo.forEach(function (obj) {\n        //RECORRER ESE ARRAY\n        total += Number(obj.saldo); //SUMAR EL SALDO DE CADA CUENTA EN EL ARRAY UNA Y OTRA VEZ\n      }); //console.log(total);          \n\n      this.b_initotal.t_a_corriente = total; //IGUALAR LA VARIABLE QUE CONTIENE LA SUMA TOTAL CON LA SUMA REALIZADA\n\n      this.TotalActivo();\n    },\n    cambioActivoNo: function cambioActivoNo() {\n      this.b_initotal.t_a_nocorriente = 0;\n      var t_noactivo = this.a_nocorrientes; //console.log(t_noactivo)\n\n      var total = 0;\n      t_noactivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);  \n\n      this.b_initotal.t_a_nocorriente = total;\n      this.TotalActivo();\n    },\n    cambioPasivo: function cambioPasivo() {\n      this.b_initotal.t_p_corriente = 0;\n      var t_pasivo = this.p_corrientes;\n      console.log(t_pasivo);\n      var total = 0;\n      t_pasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      });\n      console.log(total);\n      this.b_initotal.t_p_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPasivoNo: function cambioPasivoNo() {\n      this.b_initotal.t_p_no_corriente = 0;\n      var t_nopasivo = this.p_nocorrientes; //console.log(t_nopasivo)\n\n      var total = 0;\n      t_nopasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_p_no_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPatrimonio: function cambioPatrimonio() {\n      this.b_initotal.t_patrimonio = 0;\n      var t_patrimo = this.patrimonios; //console.log(t_patrimo)\n\n      var total = 0;\n      t_patrimo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_patrimonio = total;\n    },\n    //TOTAL GENERAL DE ACTIVO, PASIVO Y PATRIMONIO       \n    TotalActivo: function TotalActivo() {\n      var activo = this.b_initotal.t_a_corriente + this.b_initotal.t_a_nocorriente; //console.log(activo);\n\n      this.total_balance_inicial.t_activo = activo;\n    },\n    TotalPasivo: function TotalPasivo() {\n      var pasivo = this.b_initotal.t_p_corriente + this.b_initotal.t_p_no_corriente; //onsole.log(pasivo);\n\n      this.total_balance_inicial.t_pasivo = pasivo;\n    },\n    totalPasivoPatrimonio: function totalPasivoPatrimonio() {\n      $('#pasivo_patrimonio').modal('hide');\n      toastr.success(\"Total Agregado Correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    //GUARDAR BALANCE INICIAL\n    guardarBalanceInicial: function guardarBalanceInicial() {\n      if (this.balance_inicial.nombre.trim() === '') {\n        toastr.error(\"Campo Nombre es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance_inicial.fecha.trim() === '') {\n        toastr.error(\"Campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.total_balance_inicial.t_patrimonio_pasivo.trim() === '') {\n        toastr.error(\"Debes calcular el Total del Pasivo + Patrimonio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/balance_inicial';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.balance_inicial.nombre,\n          fecha: _this.balance_inicial.fecha,\n          tipo: _this.tipo,\n          a_corriente: _this.a_corrientes,\n          a_nocorriente: _this.a_nocorrientes,\n          p_corriente: _this.p_corrientes,\n          p_nocorriente: _this.p_nocorrientes,\n          patrimonio: _this.patrimonios,\n          totales_iniciales: _this.total_balance_inicial,\n          totales_totales: _this.b_initotal,\n          t_patrimonio: _this.total_balance_inicial.t_patrimonio_pasivo\n        }).then(function (response) {\n          if (response.data.success == true) {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio(); // diario.obtenerBalanceInicial();\n            // $('#list-tab a:nth-child(3)').tab('show');\n\n\n            console.log(response.data);\n          } else {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio(); // diario.obtenerBalanceInicial();\n\n          }\n        })[\"catch\"](function (error) {\n          toastr.error(error.response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        });\n      }\n    },\n    obtenerBalance: function obtenerBalance() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/obtenerbalance';\n      axios.post(url, {\n        id: _this.id_taller,\n        tipo: _this.tipo\n      }).then(function (response) {\n        if (response.data.tipo == _this.tipo || response.data.datos == true) {\n          toastr.success(response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.balance_inicial.nombre = response.data.nombre;\n          _this.balance_inicial.fecha = response.data.fecha;\n          _this.a_corrientes = response.data.a_corriente;\n          _this.a_nocorrientes = response.data.a_nocorriente;\n          _this.p_corrientes = response.data.p_corriente;\n          _this.p_nocorrientes = response.data.p_nocorriente;\n          _this.patrimonios = response.data.patrimonios;\n          _this.total_balance_inicial.t_patrimonio_pasivo = response.data.total_pasivo_patrimonio;\n\n          _this.cambioActivo();\n\n          _this.cambioActivoNo();\n\n          _this.cambioPasivo();\n\n          _this.cambioPasivoNo();\n\n          _this.cambioPatrimonio(); // diario.obtenerBalanceInicial();\n\n\n          console.log(response.data);\n        } else {}\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////BALANCE INICIAL VERTICAL///////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar b_ver = new Vue({\n  el: '#b_vertical',\n  data: {\n    id_taller: taller,\n    tipo: 'vertical',\n    //diarios:[],\n    update: 0,\n    balance_inicial: {\n      //Nombre y fecha del balance inicial\n      nombre: '',\n      fecha: ''\n    },\n    patrimonio: {\n      //Asignar Patrimonio\n      nom_cuenta: '',\n      cuenta_id: '',\n      saldo: ''\n    },\n    bi: {\n      const_id: ''\n    },\n    options: objeto,\n    cuentas: cuentas,\n    //diarios2:[],\n    total_balance_inicial: {\n      //Totales de activo, pasivo y patrimonio\n      t_activo: '',\n      t_pasivo: '',\n      t_patrimonio_pasivo: ''\n    },\n    b_initotal: {\n      t_a_corriente: '',\n      //Total de activo corriente\n      t_a_nocorriente: '',\n      //Total de activo no corriente\n      t_p_corriente: '',\n      //Total de pasivo corriente\n      t_p_no_corriente: '',\n      //Total de pasivo no corriente\n      t_patrimonio: '' //Total de patrimonio\n\n    },\n    a_corrientes: [],\n    //Array de activos corrientes\n    a_nocorrientes: [],\n    //Array de activos no corrientes\n    p_corrientes: [],\n    //Array de pasivos corrientes\n    p_nocorrientes: [],\n    //Array de pasivos no corrientes\n    patrimonios: [],\n    //Array de patrimonios\n    registro: {\n      activo_corriente: '',\n      activo_nocorriente: '',\n      pasivo_corriente: '',\n      pasivo_nocorriente: '',\n      patrimonio: ''\n    },\n    activo: {\n      a_corriente: {\n        //Agregar un nuevo activo corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false\n      },\n      a_nocorriente: {\n        //Agregar un nuevo activo no corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false\n      }\n    },\n    pasivo: {\n      p_corriente: {\n        //Agregar un nuevo pasivo corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false,\n        total: ''\n      },\n      p_nocorriente: {\n        //Agregar un nuevo pasivo no corriente al array\n        nom_cuenta: '',\n        cuenta_id: '',\n        saldo: '',\n        edit: false,\n        total: ''\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.cambioActivo();\n    this.cambioActivoNo();\n    this.cambioPasivo();\n    this.cambioPasivoNo();\n    this.cambioPatrimonio();\n    this.TotalActivo();\n    this.TotalPasivo();\n    this.obtenerBalance();\n  },\n  methods: {\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    abrirActivoC: function abrirActivoC() {\n      this.limpiar();\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-activo-corriente-tab').tab('show');\n    },\n    abrirActivoNoC: function abrirActivoNoC() {\n      this.limpiar();\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-activo-no-corriente-tab').tab('show');\n    },\n    abrirPasivoC: function abrirPasivoC() {\n      this.limpiar();\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-pasivo-corriente-tab').tab('show');\n    },\n    abrirPasivoNoC: function abrirPasivoNoC() {\n      this.limpiar();\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-pasivo-no-corriente-tab').tab('show');\n    },\n    abrirPatrimonio: function abrirPatrimonio() {\n      this.limpiar();\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-patrimonio-tab').tab('show');\n    },\n    //ELIMINAR ELEMENTOS DE UN ARRAY /////////\n    deleteAcCooriente: function deleteAcCooriente(index) {\n      var _this7 = this;\n\n      var nombre = this.a_corrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this7.a_corrientes.splice(index, 1);\n\n          _this7.cambioActivo();\n\n          _this7.TotalActivo();\n        }\n      });\n    },\n    deletePaCooriente: function deletePaCooriente(index) {\n      var _this8 = this;\n\n      var nombre = this.p_corrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this8.p_corrientes.splice(index, 1);\n\n          _this8.cambioPasivo();\n\n          _this8.TotalPasivo();\n        }\n      });\n    },\n    deleteAcNoCooriente: function deleteAcNoCooriente(index) {\n      var _this9 = this;\n\n      var nombre = this.a_nocorrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this9.a_nocorrientes.splice(index, 1);\n\n          _this9.cambioActivoNo();\n\n          _this9.TotalActivo();\n        }\n      });\n    },\n    deletePaNoCooriente: function deletePaNoCooriente(index) {\n      var _this10 = this;\n\n      var nombre = this.p_nocorrientes[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this10.p_nocorrientes.splice(index, 1);\n\n          _this10.cambioPasivoNo();\n\n          _this10.TotalPasivo();\n        }\n      });\n    },\n    deletePatrimonio: function deletePatrimonio(index) {\n      var _this11 = this;\n\n      var nombre = this.patrimonios[index].nom_cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this11.patrimonios.splice(index, 1);\n\n          _this11.cambioPatrimonio();\n        }\n      });\n    },\n    limpiar: function limpiar() {\n      //LIMPIAR TODOS LOS CAMPOS DE ACTIVOS PASIVOS Y PATRIMONIOS\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.pasivo.p_corriente.edit = false;\n      this.pasivo.p_nocorriente.edit = false;\n      this.activo.a_corriente.edit = false;\n      this.activo.a_nocorriente.edit = false;\n      this.bi.const_id = '';\n    },\n    agregarActivoCorriente: function agregarActivoCorriente() {\n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var a_corriente = {\n            cuenta_id: this.activo.a_corriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.activo.a_corriente.saldo\n          };\n          this.a_corrientes.push(a_corriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.cambioActivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editAcorriente: function editAcorriente(index) {\n      this.activo.a_corriente.edit = true;\n      this.registro.a_corriente = index;\n      this.bi.const_id = this.a_corrientes[index].cuenta_id;\n      this.activo.a_corriente.cuenta_id = this.a_corrientes[index].cuenta_id;\n      this.activo.a_corriente.saldo = this.a_corrientes[index].saldo;\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-activo-corriente-tab').tab('show');\n    },\n    actualizarActivoC: function actualizarActivoC() {\n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_corriente;\n          this.a_corrientes[index].cuenta_id = this.activo.a_corriente.cuenta_id;\n          this.a_corrientes[index].nom_cuenta = nombre;\n          this.a_corrientes[index].saldo = this.activo.a_corriente.saldo;\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.activo.a_corriente.edit = false;\n          this.registro.a_corriente = '';\n          this.cambioActivo();\n        }\n      }\n    },\n    cancelarEdicionActivoC: function cancelarEdicionActivoC() {\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_corriente.edit = false;\n    },\n    agregarActivoNoCorriente: function agregarActivoNoCorriente() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var a_nocorriente = {\n            cuenta_id: this.activo.a_nocorriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.activo.a_nocorriente.saldo\n          };\n          this.a_nocorrientes.push(a_nocorriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.cambioActivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editNoAcorriente: function editNoAcorriente(index) {\n      this.activo.a_nocorriente.edit = true;\n      this.registro.a_nocorriente = index;\n      this.bi.const_id = this.a_nocorrientes[index].cuenta_id;\n      this.activo.a_nocorriente.cuenta_id = this.a_nocorrientes[index].cuenta_id;\n      this.activo.a_nocorriente.saldo = this.a_nocorrientes[index].saldo;\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-activo-no-corriente-tab').tab('show');\n    },\n    actualizarActivoNC: function actualizarActivoNC() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_nocorriente;\n          this.a_nocorrientes[index].cuenta_id = this.activo.a_nocorriente.cuenta_id;\n          this.a_nocorrientes[index].nom_cuenta = nombre;\n          this.a_nocorrientes[index].saldo = this.activo.a_nocorriente.saldo;\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.activo.a_nocorriente.edit = false;\n          this.registro.a_nocorriente = '';\n          this.cambioActivoNo();\n        }\n      }\n    },\n    cancelarEdicionActivoNC: function cancelarEdicionActivoNC() {\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.activo.a_nocorriente.edit = false;\n    },\n    agregarPasivoCorriente: function agregarPasivoCorriente() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_corriente = {\n            cuenta_id: this.pasivo.p_corriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.pasivo.p_corriente.saldo\n          };\n          this.p_corrientes.push(p_corriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPcorriente: function editPcorriente(index) {\n      this.pasivo.p_corriente.edit = true;\n      this.registro.p_corriente = index;\n      this.bi.const_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.cuenta_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.saldo = this.p_corrientes[index].saldo;\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-pasivo-corriente-tab').tab('show');\n    },\n    actualizarPasivoC: function actualizarPasivoC() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_corriente;\n          this.p_corrientes[index].cuenta_id = this.pasivo.p_corriente.cuenta_id;\n          this.p_corrientes[index].nom_cuenta = nombre;\n          this.p_corrientes[index].saldo = this.pasivo.p_corriente.saldo;\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.pasivo.p_corriente.edit = false;\n          this.registro.p_corriente = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    cancelarEdicionPcorriente: function cancelarEdicionPcorriente() {\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_corriente.edit = false;\n    },\n    agregarPasivoNoCorriente: function agregarPasivoNoCorriente() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_nocorriente = {\n            cuenta_id: this.pasivo.p_nocorriente.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.pasivo.p_nocorriente.saldo\n          };\n          this.p_nocorrientes.push(p_nocorriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPNocorriente: function editPNocorriente(index) {\n      this.pasivo.p_nocorriente.edit = true;\n      this.registro.p_nocorriente = index;\n      this.bi.const_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.cuenta_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.saldo = this.p_nocorrientes[index].saldo;\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-pasivo-no-corriente-tab').tab('show');\n    },\n    actualizarPasivoNC: function actualizarPasivoNC() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_nocorriente;\n          this.p_nocorrientes[index].cuenta_id = this.pasivo.p_nocorriente.cuenta_id;\n          this.p_nocorrientes[index].nom_cuenta = nombre;\n          this.p_nocorrientes[index].saldo = this.pasivo.p_nocorriente.saldo;\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.pasivo.p_nocorriente.edit = false;\n          this.registro.p_nocorriente = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    cancelarEdicionPNocorriente: function cancelarEdicionPNocorriente() {\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.pasivo.p_nocorriente.edit = false;\n    },\n    agregarPatrimonio: function agregarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var patrimonio = {\n            cuenta_id: this.patrimonio.cuenta_id,\n            nom_cuenta: nombre,\n            saldo: this.patrimonio.saldo\n          };\n          this.patrimonios.push(patrimonio);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPatrimonio: function editPatrimonio(index) {\n      this.patrimonio.edit = true;\n      this.registro.patrimonio = index;\n      this.bi.const_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.cuenta_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.saldo = this.patrimonios[index].saldo;\n      $('#biv-transaccion').modal('show');\n      $('#nav-biv-patrimonio-tab').tab('show');\n    },\n    actualizarPatrimonio: function actualizarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.patrimonio;\n          this.patrimonios[index].cuenta_id = this.patrimonio.cuenta_id;\n          this.patrimonios[index].nom_cuenta = nombre;\n          this.patrimonios[index].saldo = this.patrimonio.saldo;\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.patrimonio.edit = false;\n          this.registro.patrimonio = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    cancelarEdicionPatrimonio: function cancelarEdicionPatrimonio() {\n      this.patrimonio.cuenta_id = '';\n      this.patrimonio.saldo = '';\n      this.patrimonio.edit = false;\n    },\n    Agregar: function Agregar() {\n      if (this.diario.nom_cuenta.trim() === '') {\n        toastr.error(\"El campo Nombre de cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diario.debe.trim() === '' && this.diario.haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diario.debe.trim() != '' && this.diario.haber.trim() != '') {\n        toastr.warning(\"No pueden estar ambos campos llenos a mismo tiempo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var diario = {\n          fecha: this.diario.fecha,\n          nom_cuenta: this.diario.nom_cuenta,\n          gloza: this.diario.gloza,\n          debe: this.diario.debe,\n          haber: this.diario.haber\n        };\n        this.diarios.push(diario); //añadimos el la variable persona al array\n        //Limpiamos los campos\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.fecha = '';\n        this.diario.nom_cuenta = '';\n        this.diario.gloza = '';\n        this.diario.debe = '';\n        this.diario.haber = '';\n      }\n    },\n    deleteDiario: function deleteDiario(index) {\n      this.diarios.splice(index, 1);\n    },\n    guardarDiario: function guardarDiario() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diario';\n      axios.post(url, {\n        id: _this.id_taller,\n        datos: _this.diarios\n      }).then(function (response) {\n        console.log(response.data);\n      })[\"catch\"](function (error) {});\n    },\n    agregarBalance: function agregarBalance() {\n      if (this.balance.cuenta.trim() === '') {\n        toastr.error(\"El campo cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.suma_debe.trim() === '' && this.balance.suma_haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber DE SUMAS, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.saldo_debe.trim() === '' && this.balance.saldo_haber.trim() === '') {\n        toastr.warning(\"Rellena el cambio de Debe o Haber de SALDOS, no puedes dejar ambos vacios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance.saldo_debe.trim() != '' && this.balance.saldo_haber.trim() != '') {\n        toastr.warning(\"No pueden estar ambos campos llenos a mismo tiempo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var balance = {\n          cuenta: this.balance.cuenta,\n          suma_debe: this.balance.suma_debe,\n          suma_haber: this.balance.suma_haber,\n          saldo_debe: this.balance.saldo_debe,\n          saldo_haber: this.balance.saldo_haber\n        };\n        this.balances.push(balance); //añadimos el la variable persona al array\n        //Limpiamos los campos\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.balance.cuenta = '';\n        this.balance.suma_debe = '';\n        this.balance.suma_haber = '';\n        this.balance.saldo_debe = '';\n        this.balance.saldo_haber = '';\n      }\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.bi.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.a_corrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var anc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var pc = this.p_corrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var pnc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var p = this.patrimonios.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (anc.length > 0) {\n        return true;\n      } else if (pc.length > 0) {\n        return true;\n      } else if (pnc.length > 0) {\n        return true;\n      } else if (p.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    //ACTUALIZAR SUMAS DE PASIVOS, ACTIVOS Y PATRIMONIO\n    cambioActivo: function cambioActivo() {\n      this.b_initotal.t_a_corriente = 0;\n      var t_activo = this.a_corrientes; //CARGAR EL ARRAY DE LOS ACTIVOS\n      //console.log(t_activo)\n\n      var total = 0;\n      t_activo.forEach(function (obj) {\n        //RECORRER ESE ARRAY\n        total += Number(obj.saldo); //SUMAR EL SALDO DE CADA CUENTA EN EL ARRAY UNA Y OTRA VEZ\n      }); //console.log(total);          \n\n      this.b_initotal.t_a_corriente = total; //IGUALAR LA VARIABLE QUE CONTIENE LA SUMA TOTAL CON LA SUMA REALIZADA\n\n      this.TotalActivo();\n    },\n    cambioActivoNo: function cambioActivoNo() {\n      this.b_initotal.t_a_nocorriente = 0;\n      var t_noactivo = this.a_nocorrientes; //console.log(t_noactivo)\n\n      var total = 0;\n      t_noactivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);  \n\n      this.b_initotal.t_a_nocorriente = total;\n      this.TotalActivo();\n    },\n    cambioPasivo: function cambioPasivo() {\n      this.b_initotal.t_p_corriente = 0;\n      var t_pasivo = this.p_corrientes; //console.log(t_pasivo)\n\n      var total = 0;\n      t_pasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_p_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPasivoNo: function cambioPasivoNo() {\n      this.b_initotal.t_p_no_corriente = 0;\n      var t_nopasivo = this.p_nocorrientes; //console.log(t_nopasivo)\n\n      var total = 0;\n      t_nopasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_p_no_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPatrimonio: function cambioPatrimonio() {\n      this.b_initotal.t_patrimonio = 0;\n      var t_patrimo = this.patrimonios; //console.log(t_patrimo)\n\n      var total = 0;\n      t_patrimo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_patrimonio = total;\n    },\n    //TOTAL GENERAL DE ACTIVO, PASIVO Y PATRIMONIO       \n    TotalActivo: function TotalActivo() {\n      var activo = this.b_initotal.t_a_corriente + this.b_initotal.t_a_nocorriente; //console.log(activo);\n\n      this.total_balance_inicial.t_activo = activo;\n    },\n    TotalPasivo: function TotalPasivo() {\n      var pasivo = this.b_initotal.t_p_corriente + this.b_initotal.t_p_no_corriente; //onsole.log(pasivo);\n\n      this.total_balance_inicial.t_pasivo = pasivo;\n    },\n    totalPasivoPatrimonio: function totalPasivoPatrimonio() {\n      $('#pasivo_patrimonio').modal('hide');\n      toastr.success(\"Total Agregado Correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    //GUARDAR BALANCE INICIAL\n    guardarBalanceInicial: function guardarBalanceInicial() {\n      if (this.balance_inicial.nombre.trim() === '') {\n        toastr.error(\"Campo Nombre es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance_inicial.fecha.trim() === '') {\n        toastr.error(\"Campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.total_balance_inicial.t_patrimonio_pasivo.trim() === '') {\n        toastr.error(\"Debes calcular el Total del Pasivo + Patrimonio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/balance_inicial';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.balance_inicial.nombre,\n          fecha: _this.balance_inicial.fecha,\n          tipo: _this.tipo,\n          a_corriente: _this.a_corrientes,\n          a_nocorriente: _this.a_nocorrientes,\n          p_corriente: _this.p_corrientes,\n          p_nocorriente: _this.p_nocorrientes,\n          patrimonio: _this.patrimonios,\n          totales_iniciales: _this.total_balance_inicial,\n          totales_totales: _this.b_initotal,\n          t_patrimonio: _this.total_balance_inicial.t_patrimonio_pasivo\n        }).then(function (response) {\n          if (response.data.success == true) {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio();\n\n            console.log(response.data);\n          } else {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio();\n          }\n        })[\"catch\"](function (error) {\n          toastr.error(error.response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        });\n      }\n    },\n    obtenerBalance: function obtenerBalance() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/obtenerbalance';\n      axios.post(url, {\n        id: _this.id_taller,\n        tipo: _this.tipo\n      }).then(function (response) {\n        if (response.data.tipo == _this.tipo || response.data.datos == true) {\n          toastr.success(response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.balance_inicial.nombre = response.data.nombre;\n          _this.balance_inicial.fecha = response.data.fecha;\n          _this.a_corrientes = response.data.a_corriente;\n          _this.a_nocorrientes = response.data.a_nocorriente;\n          _this.p_corrientes = response.data.p_corriente;\n          _this.p_nocorrientes = response.data.p_nocorriente;\n          _this.patrimonios = response.data.patrimonios;\n          _this.total_balance_inicial.t_patrimonio_pasivo = response.data.total_pasivo_patrimonio;\n\n          _this.cambioActivo();\n\n          _this.cambioActivoNo();\n\n          _this.cambioPasivo();\n\n          _this.cambioPasivoNo();\n\n          _this.cambioPatrimonio(); //diario.obtenerBalanceInicial();\n\n\n          console.log(response.data);\n        } else {}\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////DIARIO GENERAL//////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar diario = new Vue({\n  el: '#diario',\n  data: {\n    id_taller: taller,\n    datos_diario: '',\n    producto_id: 1,\n    nombre: '',\n    fechabalance: '',\n    complete: false,\n    options: objeto,\n    cuentas: cuentas,\n    balanceInicial: {\n      debe: [],\n      haber: [],\n      totaldebe: 0,\n      totalhaber: 0\n    },\n    kardex: [],\n    nombre_kardex: '',\n    producto_kardex: '',\n    transacciones: '',\n    registros: [],\n    eliminar: {\n      index: ''\n    },\n    ajustes: [],\n    porcentajes: {\n      porcentaje: 0,\n      index_cuenta: '',\n      tipo: '',\n      cantidad: 0\n    },\n    registerindex: 0,\n    cuentaindex: 0,\n    diarios: {\n      debe: [],\n      haber: [],\n      comentario: '',\n      fecha: '',\n      ajustado: false,\n      tipo: ''\n    },\n    edit: {\n      debe: [],\n      haber: [],\n      comentario: ''\n    },\n    diario: {\n      debe: {\n        edit: false,\n        index: '',\n        fecha: '',\n        nom_cuenta: '',\n        saldo: '0.00'\n      },\n      haber: {\n        edit: false,\n        index: '',\n        fecha: '',\n        nom_cuenta: '',\n        saldo: '0.00'\n      },\n      comentario: ''\n    },\n    pasan: {\n      debe: 0,\n      haber: 0\n    },\n    total: {\n      debe: 0,\n      haber: 0\n    },\n    update: false,\n    dato: []\n  },\n  mounted: function mounted() {\n    this.obtenerDiarioGeneral();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.fecha = [];\n      this.diarios.comentario = [];\n      this.diarios.ajustado = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.limpiar();\n      $('#dg-transaccion').modal('show');\n      $('#comentario-diario-tab').tab('show');\n    },\n    limpiar: function limpiar() {\n      this.update = false;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.fecha = [];\n      this.diarios.comentario = [];\n      this.diarios.ajustado = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n    },\n    valorPorcentual: function valorPorcentual(porcentaje, valor) {\n      var total = Number(valor * porcentaje / 100);\n      return total;\n    },\n    obtenerKardexFifo: function obtenerKardexFifo() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/kardex-obtener-fifo';\n      axios.post(url, {\n        id: _this.id_taller,\n        producto_id: _this.producto_id\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.kardex = response.data.kardex_fifo;\n          _this.nombre_kardex = response.data.informacion.nombre;\n          _this.producto_kardex = response.data.informacion.producto;\n        } else {\n          _this.kardex = [];\n          _this.nombre = '';\n          _this.producto = '';\n        }\n      })[\"catch\"](function (error) {});\n    },\n    obtenerBalanceInicial: function obtenerBalanceInicial() {\n      var _this12 = this;\n\n      var verificar = this.registros.filter(function (x) {\n        return x.tipo == 'inicial';\n      });\n\n      if (verificar.length >= 1) {\n        toastr.warning(\"Ya tienes cargado los datos del balance inicial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        return;\n      }\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/b_inicial_diario';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          var inicial = response.data.inicial;\n          inicial.debe[0].fecha = inicial.fecha;\n\n          _this.registros.unshift(inicial);\n\n          console.log(response.data);\n\n          _this12.totalDebe();\n\n          _this12.totalHaber();\n\n          _this12.totalesFinales();\n        } else {\n          toastr.warning(\"Aun no has creado tu balance Inicial\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        }\n      })[\"catch\"](function (error) {});\n    },\n    agregarHaber: function agregarHaber() {\n      if (this.diario.haber.nom_cuenta === '') {\n        toastr.error(\"No has registrado una cuenta\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.diario.haber.nom_cuenta;\n        var cuenta = this.cuentas.filter(function (x) {\n          return x.id == id;\n        });\n        var valor = this.diario.haber.saldo;\n\n        if (cuenta[0].porcentual == 1) {\n          var calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n          var haber = {\n            cuenta_id: cuenta[0].id,\n            fecha: this.diario.haber.fecha,\n            nom_cuenta: cuenta[0].nombre,\n            saldo: calculo\n          };\n          this.diarios.haber.push(haber); //añadimos el la variable persona al array\n        } else {\n          var _haber = {\n            cuenta_id: cuenta[0].id,\n            fecha: this.diario.haber.fecha,\n            nom_cuenta: cuenta[0].nombre,\n            saldo: this.diario.haber.saldo\n          };\n          this.diarios.haber.push(_haber);\n        } //Limpiamos los campos\n\n\n        toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.haber.fecha = '';\n        this.diario.haber.nom_cuenta = '';\n        this.diario.haber.saldo = '';\n      }\n    },\n    agregarDebe: function agregarDebe() {\n      var id = this.diario.debe.nom_cuenta;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      var valor = this.diario.debe.saldo;\n\n      if (this.diario.debe.nom_cuenta === '') {\n        toastr.error(\"La cuenta es obligatoria\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        if (cuenta[0].porcentual == 1) {\n          var calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n          var debe = {\n            cuenta_id: cuenta[0].id,\n            fecha: this.diario.debe.fecha,\n            nom_cuenta: cuenta[0].nombre,\n            saldo: calculo\n          };\n          this.diarios.debe.push(debe); //añadimos el la variable persona al array\n        } else {\n          var _debe = {\n            cuenta_id: cuenta[0].id,\n            fecha: this.diario.debe.fecha,\n            nom_cuenta: cuenta[0].nombre,\n            saldo: this.diario.debe.saldo\n          };\n          this.diarios.debe.push(_debe);\n        }\n\n        toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.debe.fecha = '';\n        this.diario.debe.nom_cuenta = '';\n        this.diario.debe.saldo = '';\n      } // }     \n\n    },\n    agregarComentario: function agregarComentario() {\n      this.diarios.comentario = this.diario.comentario;\n      this.diario.comentario = '';\n    },\n    deleteHaber: function deleteHaber(index) {\n      this.diarios.haber.splice(index, 1);\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n    },\n    deleteDebe: function deleteDebe(index) {\n      this.diarios.debe.splice(index, 1);\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n    },\n    guardarRegistro: function guardarRegistro() {\n      var total_debe = 0;\n      var total_haber = 0;\n      this.diarios.debe.forEach(function (debe, id) {\n        var saldo = debe.saldo;\n        total_debe += Number(saldo);\n      });\n      this.diarios.haber.forEach(function (haber, id) {\n        var saldo = haber.saldo;\n        total_haber += Number(saldo);\n      });\n\n      if (this.diarios.debe == 0) {\n        toastr.error(\"No tienes transaccion para guardar\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.comentario == '') {\n        toastr.error(\"Debes agregar un comentario\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.fecha == '') {\n        toastr.error(\"Debes agregar la fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (total_haber.toFixed(2) != total_debe.toFixed(2)) {\n        toastr.error(\"El Total de Debe y Haber no coinciden\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.diarios.debe[0].fecha = this.diarios.fecha;\n\n        if (this.diarios.ajustado == true) {\n          var registro = {\n            tipo: 'ajustado',\n            debe: this.diarios.debe,\n            haber: this.diarios.haber,\n            comentario: this.diarios.comentario,\n            fecha: this.diarios.fecha\n          };\n          this.ajustes.push(registro); //añadimos el la variable persona al array\n        } else {\n          var _registro = {\n            tipo: 'normal',\n            debe: this.diarios.debe,\n            haber: this.diarios.haber,\n            comentario: this.diarios.comentario,\n            fecha: this.diarios.fecha\n          };\n          this.registros.push(_registro); //añadimos el la variable persona al array\n        } //Limpiamos los campos\n\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diarios.debe = [];\n        this.diarios.haber = [];\n        this.diarios.comentario = '';\n        this.diarios.ajustado = false;\n        this.totalDebe();\n        this.totalHaber();\n        this.totalesFinales();\n        this.limpiar();\n        $('#dg-transaccion').modal('hide');\n      }\n    },\n    debeEditRegister: function debeEditRegister(id) {\n      var register = JSON.parse(JSON.stringify(this.registros));\n      this.update = true;\n      this.registerindex = id;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.debe = register[id].debe;\n      this.diarios.haber = register[id].haber;\n      this.diarios.comentario = register[id].comentario;\n      this.diarios.fecha = register[id].fecha;\n\n      if (register[id].tipo == 'ajustado') {\n        this.diarios.ajustado = true;\n      } else {\n        this.diarios.ajustado = false;\n      }\n\n      this.diarios.tipo = register[id].tipo;\n      $('#dg-transaccion').modal('show');\n    },\n    debeEditAjustado: function debeEditAjustado(id) {\n      var register = JSON.parse(JSON.stringify(this.ajustes));\n      this.update = true;\n      this.registerindex = id;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.debe = register[id].debe;\n      this.diarios.haber = register[id].haber;\n      this.diarios.comentario = register[id].comentario;\n      this.diarios.fecha = register[id].fecha;\n\n      if (register[id].tipo == 'ajustado') {\n        this.diarios.ajustado = true;\n      } else {\n        this.diarios.ajustado = false;\n      }\n\n      this.diarios.tipo = register[id].tipo;\n      $('#dg-transaccion').modal('show');\n    },\n    deleteRegistro: function deleteRegistro(id) {\n      var _this13 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este registro??',\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro se elimino', 'success');\n\n          _this13.registros.splice(id, 1);\n\n          _this13.totalDebe();\n\n          _this13.totalHaber();\n\n          _this13.totalesFinales();\n        }\n      });\n    },\n    deleteAjuste: function deleteAjuste(id) {\n      var _this14 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este registro??',\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro se elimino', 'success');\n\n          _this14.ajustes.splice(id, 1);\n\n          _this14.totalDebe();\n\n          _this14.totalHaber();\n\n          _this14.totalesFinales();\n        }\n      });\n    },\n    updaterRegister: function updaterRegister() {\n      var id = this.registerindex;\n      var total_debe = 0;\n      var total_haber = 0;\n      this.diarios.debe.forEach(function (debe, id) {\n        var saldo = debe.saldo;\n        total_debe += Number(saldo);\n      });\n      this.diarios.haber.forEach(function (haber, id) {\n        var saldo = haber.saldo;\n        total_haber += Number(saldo);\n      });\n\n      if (this.diarios.debe == 0) {\n        toastr.error(\"No tienes transaccion para guardar\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.comentario.trim() === '') {\n        toastr.error(\"Debes agregar un comentario\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.fecha.trim() === '') {\n        toastr.error(\"Debes agregar la fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (total_haber != total_debe) {\n        toastr.error(\"El Total de Debe y Haber no coinciden\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        if (this.diarios.tipo == 'ajustado' && this.diarios.ajustado == true) {\n          this.diarios.debe.forEach(function (sal, id) {\n            sal.fecha = '';\n          });\n          this.diarios.debe[0].fecha = this.diarios.fecha;\n          this.ajustes[id].debe = this.diarios.debe;\n          this.ajustes[id].haber = this.diarios.haber;\n          this.ajustes[id].comentario = this.diarios.comentario;\n          this.ajustes[id].fecha = this.diarios.fecha;\n        } else if (this.diarios.tipo == 'ajustado' && this.diarios.ajustado !== true) {\n          var register = JSON.parse(JSON.stringify(this.ajustes[id]));\n          this.diarios.debe.forEach(function (sal, id) {\n            sal.fecha = '';\n          });\n          this.diarios.debe[0].fecha = this.diarios.fecha;\n          register.debe = this.diarios.debe;\n          register.haber = this.diarios.haber;\n          register.comentario = this.diarios.comentario;\n          register.fecha = this.diarios.fecha;\n          register.tipo = 'normal';\n          this.registros.push(register);\n          this.ajustes.splice(id, 1);\n        } else if (this.diarios.tipo == 'normal' && this.diarios.ajustado == false) {\n          this.diarios.debe.forEach(function (sal, id) {\n            sal.fecha = '';\n          });\n          this.diarios.debe[0].fecha = this.diarios.fecha;\n          this.registros[id].debe = this.diarios.debe;\n          this.registros[id].haber = this.diarios.haber;\n          this.registros[id].comentario = this.diarios.comentario;\n          this.registros[id].fecha = this.diarios.fecha;\n        } else if (this.diarios.tipo == 'normal' && this.diarios.ajustado == true) {\n          var _register = JSON.parse(JSON.stringify(this.registros[id]));\n\n          this.diarios.debe.forEach(function (sal, id) {\n            sal.fecha = '';\n            console.log(sal.fecha);\n          });\n          console.log(_register);\n          this.diarios.debe[0].fecha = this.diarios.fecha;\n          _register.debe = this.diarios.debe;\n          _register.haber = this.diarios.haber;\n          _register.comentario = this.diarios.comentario;\n          _register.fecha = this.diarios.fecha;\n          _register.tipo = 'ajustado';\n          this.ajustes.push(_register);\n          this.registros.splice(id, 1);\n        }\n\n        this.diarios.debe = [];\n        this.diarios.haber = [];\n        this.diarios.comentario = '';\n        this.diarios.fecha = '';\n        this.diarios.tipo = '';\n        this.diarios.ajustado = false;\n        this.totalDebe();\n        this.totalHaber();\n        this.totalesFinales();\n        $('#dg-transaccion').modal('hide');\n      }\n    },\n    updateHaber: function updateHaber() {\n      var id = this.diario.haber.nom_cuenta;\n      var index = this.diario.haber.index;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      console.log(cuenta);\n      var valor = this.diario.haber.saldo;\n\n      if (cuenta[0].porcentual == 1) {\n        var calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n        this.diarios.haber[index].nom_cuenta = cuenta[0].nombre;\n        this.diarios.haber[index].saldo = calculo;\n      } else {\n        this.diarios.haber[index].cuenta_id = id;\n        this.diarios.haber[index].nom_cuenta = cuenta[0].nombre;\n        this.diarios.haber[index].saldo = valor;\n      }\n\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n    },\n    habediarioEdit: function habediarioEdit(index) {\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.diario.haber.index = index;\n      var id_cuenta = this.diarios.haber[index].cuenta_id;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id_cuenta;\n      });\n      console.log(cuenta);\n\n      if (cuenta[0].porcentual == 1) {\n        this.diario.haber.nom_cuenta = id_cuenta;\n        this.diario.haber.saldo = '';\n      } else {\n        this.diario.haber.nom_cuenta = id_cuenta;\n        this.diario.haber.saldo = this.diarios.haber[index].saldo;\n      }\n\n      this.diario.haber.edit = true;\n      $('#haber-diario-tab').tab('show');\n    },\n    totalesFinales: function totalesFinales() {\n      this.total.debe = 0;\n      this.total.haber = 0;\n      var regis = this.ajustes;\n      var total = 0;\n      var total1 = 0;\n      regis.forEach(function (obj, index) {\n        obj.debe.forEach(function (sal, id) {\n          total += Number(sal.saldo);\n        });\n      }); // console.log(total);\n\n      this.total.debe = Number(this.pasan.debe + total).toFixed(2);\n      regis.forEach(function (obj, index) {\n        obj.haber.forEach(function (sal, id) {\n          total1 += Number(sal.saldo);\n        });\n      });\n      this.total.haber = Number(this.pasan.haber + total1).toFixed(2);\n    },\n    debediairoEdit: function debediairoEdit(index) {\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.index = index;\n      var id_cuenta = this.diarios.debe[index].cuenta_id;\n\n      if (this.diarios.debe[index].fecha !== '') {\n        this.diario.debe.fecha = this.diarios.debe[index].fecha;\n      } else {\n        this.diario.debe.fecha = '';\n      }\n\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id_cuenta;\n      }); // console.log(cuenta)\n\n      if (cuenta[0].porcentual == 1) {\n        this.diario.debe.nom_cuenta = id_cuenta;\n        this.diario.debe.saldo = '';\n      } else {\n        this.diario.debe.nom_cuenta = id_cuenta;\n        this.diario.debe.saldo = this.diarios.debe[index].saldo;\n      }\n\n      this.diario.debe.edit = true;\n      $('#debe-diario-tab').tab('show');\n    },\n    cancelarEdicion: function cancelarEdicion(cuenta) {\n      if (cuenta == 'debe') {\n        this.diario.debe.fecha = '';\n        this.diario.debe.nom_cuenta = '';\n        this.diario.debe.saldo = '';\n        this.diario.debe.edit = false;\n      } else {\n        this.diario.haber.nom_cuenta = '';\n        this.diario.haber.saldo = '';\n        this.diario.haber.edit = false;\n      }\n    },\n    updateDebe: function updateDebe() {\n      var id = this.diario.debe.nom_cuenta;\n      var index = this.diario.debe.index;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      console.log(cuenta);\n      var valor = this.diario.debe.saldo;\n\n      if (this.diario.debe.fecha !== '') {\n        this.diarios.debe[index].fecha = this.diario.debe.fecha;\n      }\n\n      if (cuenta[0].porcentual == 1) {\n        var calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n        this.diarios.debe[index].nom_cuenta = cuenta[0].nombre;\n        this.diarios.debe[index].saldo = calculo;\n      } else {\n        this.diarios.debe[index].nom_cuenta = cuenta[0].nombre;\n        this.diarios.debe[index].saldo = valor;\n      }\n\n      this.diarios.debe[index].cuenta_id = id;\n\n      if (this.diario.debe.fecha !== '') {\n        this.diario.debe.fecha = '';\n      }\n\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n    },\n    debeDelete: function debeDelete(index) {\n      this.edit.debe.splice(index, 1);\n    },\n    totalDebeBi: function totalDebeBi() {\n      var balan = this.balanceInicial;\n      var total = 0;\n      balan.debe.forEach(function (obj, index) {\n        total += Number(obj.saldo);\n      }); // console.log(total);        \n\n      this.balanceInicial.totaldebe = total;\n    },\n    totalHaberBi: function totalHaberBi() {\n      var balan = this.balanceInicial;\n      var total = 0;\n      balan.haber.forEach(function (obj, index) {\n        total += Number(obj.saldo);\n      }); // console.log(total);        \n\n      this.balanceInicial.totalhaber = total;\n      this.totalesFinales();\n    },\n    totalDebe: function totalDebe() {\n      this.pasan.debe = 0;\n      var regis = this.registros;\n      var total = 0;\n      regis.forEach(function (obj, index) {\n        obj.debe.forEach(function (sal, id) {\n          total += Number(sal.saldo);\n        });\n      }); // console.log(total);\n\n      this.pasan.debe = this.balanceInicial.totaldebe + total;\n    },\n    totalHaber: function totalHaber() {\n      this.pasan.haber = 0;\n      var regis = this.registros;\n      var total = 0;\n      regis.forEach(function (obj, index) {\n        obj.haber.forEach(function (sal, id) {\n          total += Number(sal.saldo);\n        });\n      }); // console.log(total);  \n\n      this.pasan.haber = this.balanceInicial.totalhaber + total;\n    },\n    guardarDiario: function guardarDiario() {\n      var union = this.registros.concat(this.ajustes);\n\n      if (union.length == 0) {\n        toastr.error('No tienes registros para guardar', \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        console.log(union);\n\n        var _this = this;\n\n        var url = '/sistema/admin/taller/diario';\n        axios.post(url, {\n          id: _this.id_taller,\n          registro: union,\n          nombre: _this.nombre,\n          total_debe: _this.total.debe,\n          total_haber: _this.total.haber\n        }).then(function (response) {\n          if (response.data.success == false) {\n            toastr.error(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.success == 'act') {\n            toastr.success(\"Diario General Actualizado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            mayor_general.obtenerDiarioGeneral();\n            librocaja.obtenerDiarioGeneral();\n            librosbanco.obtenerDiarioGeneral();\n            reten_iva.obtenerDiarioGeneral();\n          } else {\n            toastr.success(\"Diario General Creado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            _this.dato = response.data;\n            mayor_general.obtenerDiarioGeneral();\n            librocaja.obtenerDiarioGeneral();\n            librosbanco.obtenerDiarioGeneral();\n            reten_iva.obtenerDiarioGeneral(); //\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerDiarioGeneral: function obtenerDiarioGeneral() {\n      var _this15 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diariogeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.registros = response.data.registros;\n          _this.ajustes = response.data.ajustes;\n          _this.nombre = response.data.nombre;\n\n          if (response.data.tieneinicial == true) {\n            var inicial = response.data.inicial;\n\n            _this.registros.unshift(inicial);\n          } // _this.complete = true;\n\n\n          _this15.totalDebe();\n\n          _this15.totalHaber();\n\n          _this15.totalesFinales();\n\n          toastr.success(\"Diairo General cargado Correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////MAYOR GENERAL//////// /////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar mayor_general = new Vue({\n  el: \"#mayor_general\",\n  data: (_data = {\n    id_taller: taller,\n    nombre: '',\n    nombre_dgral: '',\n    fechabalance: '',\n    complete: false,\n    options: objeto,\n    cuentas: cuentas,\n    dgeneral: [],\n    nombre_kardex: '',\n    producto_kardex: '',\n    registros: [],\n    eliminar: {\n      index: ''\n    }\n  }, _defineProperty(_data, \"eliminar\", {\n    nombre: '',\n    index: ''\n  }), _defineProperty(_data, \"ajustes\", []), _defineProperty(_data, \"registerindex\", 0), _defineProperty(_data, \"cuentaindex\", 0), _defineProperty(_data, \"mayores\", {\n    registros: [],\n    cierres: [],\n    cuenta: '',\n    total_debe: '',\n    total_haber: '',\n    total_saldo: ''\n  }), _defineProperty(_data, \"mayor\", {\n    seleccion: '',\n    registro: {\n      edit: false,\n      cierre: false,\n      index: '',\n      fecha: '',\n      detalle: '',\n      debe: '',\n      haber: '',\n      saldo: ''\n    },\n    cuenta: '',\n    tipo: ''\n  }), _defineProperty(_data, \"update\", false), _defineProperty(_data, \"registros_cierres\", []), _defineProperty(_data, \"nombre_cierre\", ''), _data),\n  mounted: function mounted() {\n    this.obtenerDiarioGeneral();\n    this.obtenerMayorGeneral();\n    this.obtenerAsientoCierre();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerAsientoCierre: function obtenerAsientoCierre() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/asiento-cierre-obtener';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.registros_cierres = response.data.registros;\n          _this.nombre_cierre = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    onSelect: function onSelect() {\n      if (this.mayor.seleccion == null) {\n        this.update = false;\n        this.mayores.registros = [];\n        this.mayores.cierres = [];\n        this.mayores.cuenta = '';\n        this.mayor.registro.cierre = false;\n        this.mayor.registro.detalle = '';\n        this.mayor.registro.fecha = '';\n        this.mayor.registro.debe = '';\n        this.mayor.registro.haber = '';\n        this.mayor.registro.saldo = '';\n        return;\n      }\n\n      var id = this.mayor.seleccion.value;\n      var cuenta = this.registros.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      console.log(id);\n\n      if (cuenta.length > 0) {\n        this.update = true;\n        this.mayores.registros = cuenta[0].registros;\n        this.mayores.cierres = cuenta[0].cierres;\n        this.mayor.cuenta = cuenta[0].cuenta_id;\n      } else {\n        this.update = false;\n        this.mayores.registros = [];\n        this.mayores.cierres = [];\n        this.mayor.cuenta = id;\n        this.mayor.registro.cierre = false;\n        this.mayor.registro.detalle = '';\n        this.mayor.registro.fecha = '';\n        this.mayor.registro.debe = '';\n        this.mayor.registro.haber = '';\n        this.mayor.registro.saldo = '';\n      }\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      this.mayores.registros = [];\n      this.mayores.cierres = [];\n      this.mayor.cuenta = '';\n      this.mayores.cuenta = '';\n      this.mayor.seleccion = '';\n      this.mayor.registro.cierre = false;\n      this.mayor.registro.detalle = '';\n      this.mayor.registro.fecha = '';\n      this.mayor.registro.debe = '';\n      this.mayor.registro.haber = '';\n      this.mayor.registro.saldo = '';\n      $('#mg-transaccion').modal('show');\n    },\n    numberFormat: function numberFormat(numero) {\n      var number = numero;\n      var nuevo = new Intl.NumberFormat(\"de-DE\").format(numero);\n      return nuevo;\n    },\n    agregarCelda: function agregarCelda() {\n      if (this.mayor.registro.fecha == '') {\n        toastr.error(\"El campo fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.mayor.registro.detalle == '') {\n        toastr.error(\"El campo detalle es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var saldo = Number(this.mayor.registro.saldo).toFixed(2);\n        var debe = this.decimales(this.mayor.registro.debe);\n        var haber = this.decimales(this.mayor.registro.haber);\n\n        if (this.mayor.registro.cierre == true) {\n          var registro = {\n            tipo: '',\n            fecha: this.mayor.registro.fecha,\n            detalle: this.mayor.registro.detalle,\n            debe: debe,\n            haber: haber,\n            saldo: saldo\n          };\n          this.mayores.cierres.push(registro);\n        } else {\n          var _registro2 = {\n            tipo: '',\n            fecha: this.mayor.registro.fecha,\n            detalle: this.mayor.registro.detalle,\n            debe: debe,\n            haber: haber,\n            saldo: saldo\n          };\n          this.mayores.registros.push(_registro2);\n        }\n\n        toastr.success(\"Movimiento agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.mayor.registro.fecha = '';\n        this.mayor.registro.detalle = '';\n        this.mayor.registro.debe = '';\n        this.mayor.registro.haber = '';\n        this.mayor.registro.saldo = '';\n        this.mayor.registro.cierre = false;\n      }\n    },\n    deleteNormal: function deleteNormal(index) {\n      this.mayores.registros.splice(index, 1);\n    },\n    deleteCierre: function deleteCierre(index) {\n      this.mayores.cierres.splice(index, 1);\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return '';\n      }\n    },\n    guardarRegistro: function guardarRegistro() {\n      if (this.mayores.registros.length == 0) {\n        toastr.error(\"No tienes transaccion para guardar\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.mayor.cuenta == '') {\n        toastr.error(\"Debes seleccionar una cuenta\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var tdebe = 0;\n        var thaber = 0;\n        this.mayores.registros.forEach(function (debe, id) {\n          var saldo = debe.debe;\n          tdebe += Number(saldo);\n        });\n        this.mayores.registros.forEach(function (haber, id) {\n          var saldo = haber.haber;\n          thaber += Number(saldo);\n        });\n        var id = this.mayor.cuenta;\n        var nombre = funciones.obtenerNombre(id);\n\n        if (this.mayores.cierres.length >= 1) {\n          var registro = {\n            cuenta_id: id,\n            cuenta: nombre,\n            registros: this.mayores.registros,\n            cierres: this.mayores.cierres,\n            total_debe: tdebe,\n            total_haber: thaber,\n            total_saldo: '-0-'\n          };\n          this.registros.push(registro); //añadimos el la variable persona al array\n        } else {\n          var _registro3 = {\n            cuenta_id: id,\n            cuenta: nombre,\n            registros: this.mayores.registros,\n            cierres: this.mayores.cierres,\n            total_debe: tdebe,\n            total_haber: thaber,\n            total_saldo: ''\n          };\n          this.registros.push(_registro3); //añadimos el la variable persona al array\n        } //Limpiamos los campos\n\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.mayores.registros = [];\n        this.mayores.cierres = [];\n        this.mayor.cuenta = '';\n        this.mayor.seleccion = '';\n        this.mayor.registro.cierre = false;\n      }\n    },\n    editarTransaccion: function editarTransaccion(id) {\n      var register = JSON.parse(JSON.stringify(this.registros));\n      this.update = true;\n      this.registerindex = id;\n      this.mayores.registros = [];\n      this.mayores.cierres = [];\n      this.mayores.registros = register[id].registros;\n      this.mayores.cierres = register[id].cierres;\n      this.mayor.seleccion = {\n        text: register[id].cuenta,\n        value: register[id].cuenta_id\n      };\n      this.onSelect();\n      $('#mg-transaccion').modal('show');\n    },\n    updaterRegister: function updaterRegister() {\n      var id = this.mayor.cuenta;\n      var tdebe = 0;\n      var thaber = 0;\n      var cuenta = this.registros.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      console.log(cuenta);\n      cuenta[0].registros.forEach(function (debe, id) {\n        var saldo = debe.debe;\n        tdebe += Number(saldo);\n      });\n      cuenta[0].registros.forEach(function (haber, id) {\n        var saldo = haber.haber;\n        thaber += Number(saldo);\n      });\n      cuenta[0].total_debe = tdebe;\n      cuenta[0].total_haber = thaber;\n\n      if (this.mayores.cierres.length >= 1) {\n        cuenta[0].total_saldo = '-0-';\n      } else {\n        cuenta[0].total_saldo = '';\n      }\n\n      this.mayores.registros = [];\n      this.mayores.cierres = [];\n      this.mayor.cuenta = '';\n      this.mayores.cuenta = '';\n      this.mayor.seleccion = '';\n      this.mayor.registro.cierre = false;\n      this.mayor.registro.detalle = '';\n      this.mayor.registro.fecha = '';\n      this.mayor.registro.debe = '';\n      this.mayor.registro.haber = '';\n      this.mayor.registro.saldo = '';\n      toastr.success(\"Registro Actualizado Correctamente \", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    obtenerDiarioGeneral: function obtenerDiarioGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diariogeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.dgeneral = response.data.registros;\n          _this.ajustes = response.data.ajustes;\n          _this.nombre_dgral = response.data.nombre;\n          var inicial = response.data.inicial;\n\n          _this.dgeneral.unshift(inicial);\n        }\n      })[\"catch\"](function (error) {});\n    },\n    warningEliminar: function warningEliminar(id) {\n      var _this16 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.registros[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this16.eliminar.nombre, 'success');\n\n          _this16.registros.splice(id, 1);\n        }\n      });\n    },\n    eliminarRegistro: function eliminarRegistro() {\n      var id = this.eliminar.index;\n      this.registros.splice(id, 1);\n      this.eliminar.index = '';\n      this.eliminar.nombre = '';\n      $('#eliminar-mg').modal('hide');\n    },\n    guardarMayor: function guardarMayor() {\n      if (this.registros.length == 0) {\n        toastr.error('No tienes registros para guardar', \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/mayor';\n        axios.post(url, {\n          id: _this.id_taller,\n          registro: _this.registros,\n          nombre: _this.nombre\n        }).then(function (response) {\n          if (response.data.success == false) {\n            toastr.error(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.success == 'act') {\n            toastr.success(\"Mayor General Actualizado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_comp.obtenerMayorGeneral();\n            hoja_trabajo.obtenerMayorGeneral();\n          } else {\n            toastr.success(\"Mayor General Creado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_comp.obtenerMayorGeneral();\n            hoja_trabajo.obtenerMayorGeneral();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerMayorGeneral: function obtenerMayorGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/mayorgeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.registros = response.data.registros;\n          _this.nombre = response.data.nombre;\n          console.log(response.data.registros);\n          toastr.success(\"Mayor General cargado Correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////BALANCE DE COMPROBACION /////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar balance_comp = new Vue({\n  el: '#balance_comp',\n  data: {\n    nombre: '',\n    fecha: '',\n    enunciados: \"\",\n    id_taller: taller,\n    nombre_mayor: '',\n    options: objeto,\n    cuentas: cuentas,\n    balances: [],\n    //array del balance de COMPROBACION\n    balance: {\n      //variables a utilizar para el balance de COMPROBACION\n      cuenta: '',\n      suma_debe: '',\n      suma_haber: '',\n      saldo_debe: '',\n      saldo_haber: '',\n      edit: false,\n      const_id: ''\n    },\n    mayorgeneral: [],\n    suman: {\n      //suma total del balance COMPROBACION\n      sum_debe: 0,\n      sum_haber: 0,\n      sal_debe: 0,\n      sal_haber: 0\n    },\n    update: false,\n    registro_id: 0\n  },\n  mounted: function mounted() {\n    this.obtenerBalanceCom();\n    this.obtenerMayorGeneral();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.balance.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.balances.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    decimales: function decimales(saldo) {\n      var vacio = '';\n\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return vacio;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    obtenerMayorGeneral: function obtenerMayorGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/mayorgeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.mayorgeneral = response.data.registros;\n          _this.nombre_mayor = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      this.balance.cuenta = '';\n      this.balance.edit = false;\n      this.balance.suma_debe = '';\n      this.balance.suma_haber = '';\n      this.balance.saldo_debe = '';\n      this.balance.saldo_haber = '';\n      $('#bc-transaccion').modal('show');\n    },\n    sumas: function sumas() {\n      var debe = Number(this.balance.suma_debe);\n      var haber = Number(this.balance.suma_haber);\n\n      if (debe > haber) {\n        this.balance.saldo_debe = Number(debe - haber).toFixed(2);\n        this.balance.saldo_haber = '';\n      } else {\n        this.balance.saldo_haber = Number(haber - debe).toFixed(2);\n        this.balance.saldo_debe = '';\n      }\n    },\n    mover: function mover() {\n      this.update = false;\n      this.balance.cuenta = '';\n      this.balance.suma_debe = '';\n      this.balance.suma_haber = '';\n    },\n    log: function log(evt) {\n      window.console.log(evt);\n    },\n    totales: function totales() {\n      this.suman.sum_debe = 0;\n      this.suman.sum_haber = 0;\n      this.suman.sal_debe = 0;\n      this.suman.sal_haber = 0;\n      var regis = this.balances;\n      var total1 = 0;\n      var total2 = 0;\n      var total3 = 0;\n      var total4 = 0;\n      regis.forEach(function (obj, index) {\n        total1 += Number(obj.suma_debe);\n      });\n      regis.forEach(function (obj, index) {\n        total2 += Number(obj.suma_haber);\n      });\n      regis.forEach(function (obj, index) {\n        total3 += Number(obj.saldo_debe);\n      });\n      regis.forEach(function (obj, index) {\n        total4 += Number(obj.saldo_haber);\n      });\n      this.suman.sum_debe = total1.toFixed(2);\n      this.suman.sum_haber = total2.toFixed(2);\n      this.suman.sal_debe = total3.toFixed(2);\n      this.suman.sal_haber = total4.toFixed(2);\n    },\n    agregarRegistro: function agregarRegistro() {\n      if (this.balance.cuenta == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.balance.cuenta;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id); // this.sumas()\n\n          var balance = {\n            cuenta_id: id,\n            cuenta: nombre,\n            suma_debe: this.balance.suma_debe,\n            suma_haber: this.balance.suma_haber,\n            saldo_debe: this.balance.saldo_debe,\n            saldo_haber: this.balance.saldo_haber\n          };\n          this.balances.push(balance);\n          toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.balance.cuenta = '';\n          this.balance.suma_debe = '';\n          this.balance.saldo_debe = '';\n          this.balance.suma_haber = '';\n          this.balance.saldo_haber = '';\n          this.totales();\n        }\n      }\n    },\n    //fin metodo agregar registro   \n    deleteBalance: function deleteBalance(index) {\n      var _this17 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + this.balances[index].cuenta,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this17.balances[index].cuenta, 'success');\n\n          _this17.balances.splice(index, 1);\n\n          _this17.cancelarEdicion();\n\n          _this17.totales();\n        }\n      });\n    },\n    //fin metodo delete cuenta \n    editBalance: function editBalance(index) {\n      this.balance.edit = true;\n      this.registro_id = index;\n      this.balance.const_id = this.balances[index].cuenta_id;\n      this.balance.cuenta = this.balances[index].cuenta_id;\n      this.balance.suma_debe = this.balances[index].suma_debe;\n      this.balance.suma_haber = this.balances[index].suma_haber;\n      this.balance.saldo_debe = this.balances[index].saldo_debe;\n      this.balance.saldo_haber = this.balances[index].saldo_haber;\n    },\n    editBalanceFuera: function editBalanceFuera(index) {\n      this.balance.edit = true;\n      this.registro_id = index;\n      this.balance.const_id = this.balances[index].cuenta_id;\n      this.balance.cuenta = this.balances[index].cuenta_id;\n      this.balance.suma_debe = this.balances[index].suma_debe;\n      this.balance.suma_haber = this.balances[index].suma_haber;\n      this.balance.saldo_debe = this.balances[index].saldo_debe;\n      this.balance.saldo_haber = this.balances[index].saldo_haber;\n      $('#bc-transaccion').modal('show');\n    },\n    cancelarEdicion: function cancelarEdicion() {\n      this.balance.cuenta = '';\n      this.balance.suma_debe = '';\n      this.balance.suma_haber = '';\n      this.balance.saldo_haber = '';\n      this.balance.saldo_debe = '';\n      this.balance.edit = false;\n    },\n    actualizarBalance: function actualizarBalance() {\n      if (this.balance.cuenta == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        // this.sumas();\n        var index = this.registro_id;\n        var id = this.balance.cuenta;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          this.balances[index].cuenta = nombre;\n          this.balances[index].cuenta_id = id;\n          this.balances[index].suma_debe = this.balance.suma_debe;\n          this.balances[index].suma_haber = this.balance.suma_haber;\n          this.balances[index].saldo_debe = this.balance.saldo_debe;\n          this.balances[index].saldo_haber = this.balance.saldo_haber;\n          this.balance.cuenta = '';\n          this.balance.suma_debe = '';\n          this.balance.suma_haber = '';\n          this.balance.saldo_debe = '';\n          this.balance.saldo_haber = '';\n          this.balance.edit = false;\n          this.totales();\n        }\n      }\n    },\n    guardarBalance: function guardarBalance() {\n      var _this18 = this;\n\n      if (this.balances.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en el Balance\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha == '' || this.nombre == '') {\n        toastr.error(\"Fecha y Nombre son obligaorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/balance-comprobacion';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          fecha: _this.fecha,\n          balances: _this.balances,\n          sum_debe: _this.suman.sum_debe,\n          sum_haber: _this.suman.sum_haber,\n          sal_debe: _this.suman.sal_debe,\n          sal_haber: _this.suman.sal_haber\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Balance creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            hoja_trabajo.obtenerBalanceCom();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Balance actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            console.log(_this18.balances);\n            hoja_trabajo.obtenerBalanceCom();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerBalanceCom: function obtenerBalanceCom() {\n      var _this19 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/balance-obtener-comprobacion';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Balance de Comprobacion cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this19.balances = response.data.bcomprobacion;\n          _this19.nombre = response.data.nombre;\n          _this19.fecha = response.data.fecha;\n\n          _this19.totales();\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////HOJA DE TRABAJO ////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar hoja_trabajo = new Vue({\n  el: \"#hoja_trabajo\",\n  data: {\n    id_taller: taller,\n    nombre: '',\n    options: objeto,\n    cuentas: cuentas,\n    balances: [],\n    nombre_mayor: '',\n    mayorgeneral: [],\n    nombre_balance: '',\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    fecha_balance: '',\n    registros: [],\n    registro_id: '',\n    registro: {\n      edit: false,\n      const_id: '',\n      cuenta_id: '',\n      balance_comp: {\n        debe: '',\n        haber: ''\n      },\n      ajustes: {\n        debe: '',\n        haber: ''\n      },\n      balance_ajustado: {\n        debe: '',\n        haber: ''\n      },\n      estado_resultado: {\n        debe: '',\n        haber: ''\n      },\n      balance_general: {\n        debe: '',\n        haber: ''\n      }\n    },\n    suman: {\n      balance_comp: {\n        total_debe: 0,\n        total_haber: 0\n      },\n      ajustes: {\n        total_debe: 0,\n        total_haber: 0\n      },\n      balance_ajustado: {\n        total_debe: 0,\n        total_haber: 0\n      },\n      estado_resultado: {\n        total_debe: 0,\n        total_haber: 0\n      },\n      balance_general: {\n        total_debe: 0,\n        total_haber: 0\n      }\n    },\n    update: false\n  },\n  mounted: function mounted() {\n    this.obtenerBalanceCom();\n    this.obtenerMayorGeneral();\n    this.obtenerHojita();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    sumasTotales: function sumasTotales() {\n      var registros = this.registros;\n      var bc_debe = 0;\n      var bc_haber = 0;\n      var ajuste_debe = 0;\n      var ajuste_haber = 0;\n      var ba_debe = 0;\n      var ba_haber = 0;\n      var er_debe = 0;\n      var er_haber = 0;\n      var bg_debe = 0;\n      var bg_haber = 0; //INGRESO CANTIDAD\n\n      registros.forEach(function (registro, i) {\n        var temp = registro.bc_debe;\n\n        if (temp != null && temp !== '') {\n          bc_debe += Number(temp);\n        }\n      });\n      this.suman.balance_comp.total_debe = bc_debe.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.bc_haber;\n\n        if (temp != null && temp !== '') {\n          bc_haber += Number(temp);\n        }\n      });\n      this.suman.balance_comp.total_haber = bc_haber.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.ajuste_debe;\n\n        if (temp != null && temp !== '') {\n          ajuste_debe += Number(temp);\n        }\n      });\n      this.suman.ajustes.total_debe = ajuste_debe.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.ajuste_haber;\n\n        if (temp != null && temp !== '') {\n          ajuste_haber += Number(temp);\n        }\n      });\n      this.suman.ajustes.total_haber = ajuste_haber.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.ba_debe;\n\n        if (temp != null && temp !== '') {\n          ba_debe += Number(temp);\n        }\n      });\n      this.suman.balance_ajustado.total_debe = ba_debe.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.ba_haber;\n\n        if (temp != null && temp !== '') {\n          ba_haber += Number(temp);\n        }\n      });\n      this.suman.balance_ajustado.total_haber = ba_haber.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.er_debe;\n\n        if (temp != null && temp !== '') {\n          er_debe += Number(temp);\n        }\n      });\n      this.suman.estado_resultado.total_debe = er_debe.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.er_haber;\n\n        if (temp != null && temp !== '') {\n          er_haber += Number(temp);\n        }\n      });\n      this.suman.estado_resultado.total_haber = er_haber.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.bg_debe;\n\n        if (temp != null && temp !== '') {\n          bg_debe += Number(temp);\n        }\n      });\n      this.suman.balance_general.total_debe = bg_debe.toFixed(2);\n      registros.forEach(function (registro, i) {\n        var temp = registro.bg_haber;\n\n        if (temp != null && temp !== '') {\n          bg_haber += Number(temp);\n        }\n      });\n      this.suman.balance_general.total_haber = bg_haber.toFixed(2);\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.registro.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.registros.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      $('#ht-transaccion').modal('show');\n    },\n    agregarRegistro: function agregarRegistro() {\n      if (this.registro.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var balance = {\n            cuenta_id: id,\n            cuenta: nombre,\n            bc_debe: this.registro.balance_comp.debe,\n            bc_haber: this.registro.balance_comp.haber,\n            ajuste_debe: this.registro.ajustes.debe,\n            ajuste_haber: this.registro.ajustes.haber,\n            ba_debe: this.registro.balance_ajustado.debe,\n            ba_haber: this.registro.balance_ajustado.haber,\n            er_debe: this.registro.estado_resultado.debe,\n            er_haber: this.registro.estado_resultado.haber,\n            bg_debe: this.registro.balance_general.debe,\n            bg_haber: this.registro.balance_general.haber\n          };\n          this.registros.push(balance);\n          toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.registro.cuenta_id = '';\n          this.registro.balance_comp.debe = '';\n          this.registro.balance_comp.haber = '';\n          this.registro.ajustes.debe = '';\n          this.registro.ajustes.haber = '';\n          this.registro.balance_ajustado.debe = '';\n          this.registro.balance_ajustado.haber = '';\n          this.registro.estado_resultado.debe = '';\n          this.registro.estado_resultado.haber = '';\n          this.registro.balance_general.debe = '';\n          this.registro.balance_general.haber = '';\n          this.sumasTotales();\n        }\n      }\n    },\n    editBalance: function editBalance(index) {\n      this.registro.edit = true;\n      this.registro_id = index;\n      this.registro.const_id = this.registros[index].cuenta_id;\n      this.registro.cuenta_id = this.registros[index].cuenta_id;\n      this.registro.balance_comp.debe = this.registros[index].bc_debe;\n      this.registro.balance_comp.haber = this.registros[index].bc_haber;\n      this.registro.ajustes.debe = this.registros[index].ajuste_debe;\n      this.registro.ajustes.haber = this.registros[index].ajuste_haber;\n      this.registro.balance_ajustado.debe = this.registros[index].ba_debe;\n      this.registro.balance_ajustado.haber = this.registros[index].ba_haber;\n      this.registro.estado_resultado.debe = this.registros[index].er_debe;\n      this.registro.estado_resultado.haber = this.registros[index].er_haber;\n      this.registro.balance_general.debe = this.registros[index].bg_debe;\n      this.registro.balance_general.haber = this.registros[index].bg_haber;\n    },\n    editBalanceFuera: function editBalanceFuera(index) {\n      this.registro.edit = true;\n      this.registro_id = index;\n      this.registro.const_id = this.registros[index].cuenta_id;\n      this.registro.cuenta_id = this.registros[index].cuenta_id;\n      this.registro.balance_comp.debe = this.registros[index].bc_debe;\n      this.registro.balance_comp.haber = this.registros[index].bc_haber;\n      this.registro.ajustes.debe = this.registros[index].ajuste_debe;\n      this.registro.ajustes.haber = this.registros[index].ajuste_haber;\n      this.registro.balance_ajustado.debe = this.registros[index].ba_debe;\n      this.registro.balance_ajustado.haber = this.registros[index].ba_haber;\n      this.registro.estado_resultado.debe = this.registros[index].er_debe;\n      this.registro.estado_resultado.haber = this.registros[index].er_haber;\n      this.registro.balance_general.debe = this.registros[index].bg_debe;\n      this.registro.balance_general.haber = this.registros[index].bg_haber;\n      $('#ht-transaccion').modal('show');\n    },\n    cancelarEdicion: function cancelarEdicion() {\n      this.registro.const_id = '';\n      this.registro.cuenta_id = '';\n      this.registro.balance_comp.debe = '';\n      this.registro.balance_comp.haber = '';\n      this.registro.ajustes.debe = '';\n      this.registro.ajustes.haber = '';\n      this.registro.balance_ajustado.debe = '';\n      this.registro.balance_ajustado.haber = '';\n      this.registro.estado_resultado.debe = '';\n      this.registro.estado_resultado.haber = '';\n      this.registro.balance_general.debe = '';\n      this.registro.balance_general.haber = '';\n      this.registro.edit = false;\n    },\n    actualizarBalance: function actualizarBalance() {\n      if (this.registro.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        var id = this.registro.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          this.registros[index].cuenta = nombre;\n          this.registros[index].cuenta_id = id;\n          this.registros[index].bc_debe = this.registro.balance_comp.debe;\n          this.registros[index].bc_haber = this.registro.balance_comp.haber;\n          this.registros[index].ajuste_debe = this.registro.ajustes.debe;\n          this.registros[index].ajuste_haber = this.registro.ajustes.haber;\n          this.registros[index].ba_debe = this.registro.balance_ajustado.debe;\n          this.registros[index].ba_haber = this.registro.balance_ajustado.haber;\n          this.registros[index].er_debe = this.registro.estado_resultado.debe;\n          this.registros[index].er_haber = this.registro.estado_resultado.haber;\n          this.registros[index].bg_debe = this.registro.balance_general.debe;\n          this.registros[index].bg_haber = this.registro.balance_general.haber;\n          this.cancelarEdicion();\n          this.sumasTotales();\n          toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          }); // this.totales();\n        }\n      }\n    },\n    eliminarRegistro: function eliminarRegistro() {\n      var id = this.eliminar.index;\n      this.registros.splice(id, 1);\n      this.eliminar.index = '';\n      this.eliminar.nombre = '';\n      $('#eliminar-ht').modal('hide');\n    },\n    deleteBalance: function deleteBalance(index) {\n      this.registros.splice(index, 1);\n      this.sumasTotales();\n    },\n    warningEliminar: function warningEliminar(id) {\n      var _this20 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.registros[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this20.eliminar.nombre, 'success');\n\n          _this20.registros.splice(id, 1);\n\n          _this20.cancelarEdicion();\n\n          _this20.sumasTotales();\n        }\n      });\n    },\n    obtenerBalanceCom: function obtenerBalanceCom() {\n      var _this21 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/balance-obtener-comprobacion';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this21.balances = response.data.bcomprobacion;\n          _this21.nombre_balance = response.data.nombre;\n          _this21.fecha_balance = response.data.fecha;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    obtenerMayorGeneral: function obtenerMayorGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/mayorgeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.mayorgeneral = response.data.registros;\n          _this.nombre_mayor = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    guardarHoja: function guardarHoja() {\n      if (this.registros.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en la Hoja\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nombre == '') {\n        toastr.error(\"Nombre es obligaorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/hoja-trabajo';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          registros: _this.registros,\n          bc_total_debe: _this.suman.balance_comp.total_debe,\n          bc_total_haber: _this.suman.balance_comp.total_haber,\n          ajuste_total_debe: _this.suman.ajustes.total_debe,\n          ajuste_total_haber: _this.suman.ajustes.total_haber,\n          ba_total_debe: _this.suman.balance_ajustado.total_debe,\n          ba_total_haber: _this.suman.balance_ajustado.total_haber,\n          er_total_debe: _this.suman.estado_resultado.total_debe,\n          er_total_haber: _this.suman.estado_resultado.total_haber,\n          bg_total_debe: _this.suman.balance_general.total_debe,\n          bg_total_haber: _this.suman.balance_general.total_haber\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Hoja de Trabajo Creada Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_ajustado.obtenerHojita();\n            estado_resultado.obtenerHojita();\n            balance_general.obtenerHojita();\n            asientos_cierre.obtenerHojita();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Hoja de Trabajo Actualizada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_ajustado.obtenerHojita();\n            estado_resultado.obtenerHojita();\n            balance_general.obtenerHojita();\n            asientos_cierre.obtenerHojita();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerHojita: function obtenerHojita() {\n      var _this22 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/hoja-obtener-trabajo';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this22.registros = response.data.hojatrabajo;\n          _this22.nombre = response.data.nombre;\n\n          _this22.sumasTotales();\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////BALANCE DE COMPROBACION AJUSTADO /////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar balance_ajustado = new Vue({\n  el: \"#balance_ajustado\",\n  data: {\n    id_taller: taller,\n    hojatrabajo: [],\n    options: objeto,\n    cuentas: cuentas,\n    nombre_hoja: '',\n    nombre: '',\n    fecha: '',\n    balances_ajustados: [],\n    //array del balance de COMPROBACION\n    balance: {\n      //variables a utilizar para el balance de COMPROBACION\n      cuenta_id: '',\n      debe: '',\n      haber: '',\n      const_id: '',\n      edit: false\n    },\n    suman: {\n      //suma total del balance COMPROBACION\n      debe: 0,\n      haber: 0\n    },\n    update: false,\n    registro_id: 0\n  },\n  mounted: function mounted() {\n    this.obtenerBalanceAjus();\n    this.obtenerHojita();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerHojita: function obtenerHojita() {\n      var _this23 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/hoja-obtener-trabajo';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this23.hojatrabajo = response.data.hojatrabajo;\n          _this23.nombre_hoja = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.balance.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.balances_ajustados.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    totales: function totales() {\n      this.suman.debe = 0;\n      this.suman.haber = 0;\n      var regis = this.balances_ajustados;\n      var total1 = 0;\n      var total2 = 0;\n      regis.forEach(function (obj, index) {\n        total1 += Number(obj.debe);\n      });\n      regis.forEach(function (obj, index) {\n        total2 += Number(obj.haber);\n      });\n      this.suman.debe = total1.toFixed(2);\n      this.suman.haber = total2.toFixed(2);\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      $('#ba-transaccion').modal('show');\n    },\n    agregarRegistro: function agregarRegistro() {\n      if (this.balance.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.balance.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var balance = {\n            cuenta_id: this.balance.cuenta_id,\n            cuenta: nombre,\n            debe: this.balance.debe,\n            haber: this.balance.haber\n          };\n          this.balances_ajustados.push(balance);\n          toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.balance.cuenta_id = '';\n          this.balance.debe = '';\n          this.balance.haber = '';\n          this.totales();\n        }\n      }\n    },\n    //fin metodo agregar registro  \n    deleteBalance: function deleteBalance(index) {\n      this.balances_ajustados.splice(index, 1);\n      this.totales();\n    },\n    //fin metodo delete cuenta \n    editBalance: function editBalance(index) {\n      this.balance.edit = true;\n      this.registro_id = index;\n      this.balance.const_id = this.balances_ajustados[index].cuenta_id;\n      this.balance.cuenta_id = this.balances_ajustados[index].cuenta_id;\n      this.balance.debe = this.balances_ajustados[index].debe;\n      this.balance.haber = this.balances_ajustados[index].haber;\n    },\n    editBalanceFuera: function editBalanceFuera(index) {\n      this.balance.edit = true;\n      this.registro_id = index;\n      this.balance.const_id = this.balances_ajustados[index].cuenta_id;\n      this.balance.cuenta_id = this.balances_ajustados[index].cuenta_id;\n      this.balance.debe = this.balances_ajustados[index].debe;\n      this.balance.haber = this.balances_ajustados[index].haber;\n      $('#ba-transaccion').modal('show');\n    },\n    cancelarEdicion: function cancelarEdicion() {\n      this.balance.cuenta_id = '';\n      this.balance.debe = '';\n      this.balance.haber = '';\n      this.balance.edit = false;\n    },\n    actualizarBalance: function actualizarBalance() {\n      if (this.balance.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.balance.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro_id;\n          this.balances_ajustados[index].cuenta_id = this.balance.cuenta_id;\n          this.balances_ajustados[index].cuenta = nombre;\n          this.balances_ajustados[index].debe = this.balance.debe;\n          this.balances_ajustados[index].haber = this.balance.haber;\n          this.balance.cuenta_id = '';\n          this.balance.debe = '';\n          this.balance.haber = '';\n          this.balance.edit = false;\n          this.registro_id = '';\n          this.totales();\n        }\n      }\n    },\n    warningEliminar: function warningEliminar(id) {\n      var _this24 = this;\n\n      var nombre = this.balances_ajustados[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this24.balances_ajustados.splice(id, 1);\n\n          _this24.cancelarEdicion();\n        }\n      });\n    },\n    guardarBalance: function guardarBalance() {\n      if (this.balances_ajustados.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en el Balance\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nombre == '') {\n        toastr.error(\"El nombre es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha == '') {\n        toastr.error(\"La fecha es obligatoria\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/balance-ajustado';\n        axios.post(url, {\n          id: _this.id_taller,\n          balances: _this.balances_ajustados,\n          total_debe: _this.suman.debe,\n          total_haber: _this.suman.haber,\n          nombre: _this.nombre,\n          fecha: _this.fecha\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Balance creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Balance actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerBalanceAjus: function obtenerBalanceAjus() {\n      var _this25 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/balance-obtener-ajustado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Balance de Comprobacion Ajustado cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this25.balances_ajustados = response.data.bcomprobacionAjustado;\n          _this25.nombre = response.data.nombre;\n          _this25.fecha = response.data.fecha;\n\n          _this25.totales();\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////ESTADO RESULTADO ///////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar estado_resultado = new Vue({\n  el: \"#estado_resultado\",\n  data: {\n    id_taller: taller,\n    hojatrabajo: [],\n    options: objeto,\n    cuentas: cuentas,\n    nombre_hoja: '',\n    venta: '',\n    costo_venta: '',\n    producto: '',\n    nombre: '',\n    fecha: '',\n    ingresos: [],\n    gastos: [],\n    ingreso: {\n      cuenta_id: '',\n      saldo: '',\n      edit: false,\n      const_id: ''\n    },\n    utilidad_bruta: {\n      costo: '',\n      costo_venta: ''\n    },\n    gasto: {\n      cuenta_id: '',\n      saldo: '',\n      edit: false,\n      const_id: ''\n    },\n    utilida: {\n      cuenta_id: '',\n      saldo: '',\n      edit: false,\n      create: false,\n      const_id: ''\n    },\n    utilidades: [],\n    utilidad: '',\n    update: false,\n    registro: {\n      ingreso: '',\n      gasto: '',\n      utilida: ''\n    },\n    totales: {\n      ingreso: 0,\n      gastos: 0,\n      utilidad_bruta_ventas: '',\n      utilidad_neta_o: 0,\n      utilidad_ejercicio: '',\n      utilidad_liquida: ''\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerHojita();\n    this.obtenerEstadoResultado();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    agregarBruta: function agregarBruta() {\n      this.venta = this.utilidad_bruta.venta;\n      this.costo_venta = this.utilidad_bruta.costo_venta;\n      toastr.info(\"Datos agregados\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      var suma_ventas = Number(this.venta - this.costo_venta);\n      this.totales.utilidad_bruta_ventas = suma_ventas;\n      console.log(suma_ventas);\n      this.totale();\n    },\n    subtotal: function subtotal() {\n      var total = Number(this.totales.ingreso) + Number(this.totales.utilidad_bruta_ventas);\n      console.log(total);\n      this.totales.utilidad_neta_o = Number(total).toFixed(2);\n    },\n    warningEliminarIngreso: function warningEliminarIngreso(id) {\n      var _this26 = this;\n\n      var nombre = this.ingresos[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this26.ingresos.splice(id, 1);\n\n          _this26.totale();\n\n          _this26.subtotal();\n        }\n      });\n    },\n    warningEliminarGastos: function warningEliminarGastos(id) {\n      var _this27 = this;\n\n      var nombre = this.gastos[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this27.gastos.splice(id, 1);\n\n          _this27.totale();\n\n          _this27.subtotal();\n        }\n      });\n    },\n    warningEliminarUtilidad: function warningEliminarUtilidad(id) {\n      var _this28 = this;\n\n      var nombre = this.utilidades[id].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this28.utilidades.splice(id, 1);\n        }\n      });\n    },\n    VueSweetAlert2: function VueSweetAlert2(component, propsData) {\n      Swal.fire({\n        html: '<div id=\"VueSweetAlert2\"></div>',\n        showConfirmButton: false,\n        showCloseButton: true,\n        willOpen: function willOpen() {\n          var ComponentClass = Vue.extend(Vue.component(component));\n          var instance = new ComponentClass({\n            propsData: propsData\n          });\n          instance.$mount();\n          document.getElementById('VueSweetAlert2').appendChild(instance.$el);\n        }\n      });\n    },\n    totale: function totale() {\n      this.totales.ingreso = 0;\n      this.totales.gastos = 0;\n      var ingreso = this.ingresos;\n      var gasto = this.gastos;\n      var total1 = 0;\n      var total2 = 0;\n      ingreso.forEach(function (obj, index) {\n        total1 += Number(obj.saldo);\n      });\n      gasto.forEach(function (obj, index) {\n        total2 += Number(obj.saldo);\n      });\n      this.totales.ingreso = total1.toFixed(2);\n      this.totales.gastos = total2.toFixed(2);\n      console.log(total1);\n      console.log(total2);\n      this.subtotal();\n    },\n    selectUtilidad: function selectUtilidad() {\n      if (this.utilidad == 'perdida') {} else if (this.utilidad == 'ganancia') {}\n    },\n    obtenerHojita: function obtenerHojita() {\n      var _this29 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/hoja-obtener-trabajo';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this29.hojatrabajo = response.data.hojatrabajo;\n          _this29.nombre_hoja = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    verificarCuentaIngreso: function verificarCuentaIngreso(id) {\n      if (Number(this.ingreso.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.ingresos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var ga = this.gastos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var u = this.utilidades.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (ga.length > 0) {\n        return true;\n      } else if (u.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    verificarCuentaGasto: function verificarCuentaGasto(id) {\n      if (Number(this.gasto.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.ingresos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var ga = this.gastos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var u = this.utilidades.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (ga.length > 0) {\n        return true;\n      } else if (u.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    verificarCuentaUtilidad: function verificarCuentaUtilidad(id) {\n      if (Number(this.utilida.const_id) === id) {\n        return false;\n      }\n\n      var ac = this.ingresos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var ga = this.gastos.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n      var u = this.utilidades.filter(function (x) {\n        return x.cuenta_id == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (ga.length > 0) {\n        return true;\n      } else if (u.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    abrirIngreso: function abrirIngreso() {\n      $('#er-ingreso').modal('show');\n      $('#nav-er-ingreso-tab').tab('show');\n    },\n    abrirGastos: function abrirGastos() {\n      $('#er-ingreso').modal('show');\n      $('#nav-er-gastos-tab').tab('show');\n    },\n    abrirUtilidades: function abrirUtilidades() {\n      $('#er-ingreso').modal('show');\n      $('#nav-er-utilidad-tab').tab('show');\n    },\n    mostrarUtilidades: function mostrarUtilidades() {\n      this.utilida.create = true;\n    },\n    cerrarUtilidades: function cerrarUtilidades() {\n      this.utilida.create = false;\n      this.utilida.cuenta_id = '';\n      this.utilida.saldo = '';\n      this.utilida.edit = false;\n      this.utilida.create = false;\n      this.const_id = '';\n    },\n    agregarIngreso: function agregarIngreso() {\n      if (this.ingreso.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.ingreso.cuenta_id;\n        var verificar = this.verificarCuentaIngreso(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var ingreso = {\n            cuenta_id: this.ingreso.cuenta_id,\n            cuenta: nombre,\n            saldo: this.ingreso.saldo\n          };\n          this.ingresos.push(ingreso);\n          toastr.success(\"Ingreso agregado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.ingreso.cuenta_id = '';\n          this.ingreso.saldo = '';\n          this.totale();\n          this.subtotal();\n        }\n      }\n    },\n    agregarGasto: function agregarGasto() {\n      if (this.gasto.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.gasto.cuenta_id;\n        var verificar = this.verificarCuentaGasto(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var gasto = {\n            cuenta_id: this.gasto.cuenta_id,\n            cuenta: nombre,\n            saldo: this.gasto.saldo\n          };\n          this.gastos.push(gasto);\n          toastr.success(\"Gasto agregado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.gasto.cuenta_id = '';\n          this.gasto.saldo = '';\n          this.totale();\n          this.subtotal();\n        }\n      }\n    },\n    agregarUtilidad: function agregarUtilidad() {\n      if (this.utilida.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.utilida.cuenta_id;\n        var verificar = this.verificarCuentaUtilidad(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var utilida = {\n            cuenta_id: this.utilida.cuenta_id,\n            cuenta: nombre,\n            saldo: this.utilida.saldo\n          };\n          this.utilidades.push(utilida);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.utilida.cuenta_id = '';\n          this.utilida.saldo = '';\n          this.totale();\n          this.subtotal();\n        }\n      }\n    },\n    editIngreso: function editIngreso(index) {\n      this.ingreso.edit = true;\n      this.registro.ingreso = index;\n      this.ingreso.const_id = this.ingresos[index].cuenta_id;\n      this.ingreso.cuenta_id = this.ingresos[index].cuenta_id;\n      this.ingreso.saldo = this.ingresos[index].saldo;\n    },\n    editIngresoFuera: function editIngresoFuera(index) {\n      this.ingreso.edit = true;\n      this.registro.ingreso = index;\n      this.ingreso.const_id = this.ingresos[index].cuenta_id;\n      this.ingreso.cuenta_id = this.ingresos[index].cuenta_id;\n      this.ingreso.saldo = this.ingresos[index].saldo;\n      $('#er-ingreso').modal('show');\n      $('#nav-er-ingreso-tab').tab('show');\n    },\n    cancelarEdicionIngreso: function cancelarEdicionIngreso() {\n      this.ingreso.cuenta_id = '';\n      this.ingreso.saldo = '';\n      this.ingreso.edit = false;\n    },\n    actualizarIngreso: function actualizarIngreso() {\n      if (this.ingreso.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.ingreso.cuenta_id;\n        var verificar = this.verificarCuentaIngreso(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.ingreso;\n          this.ingresos[index].cuenta_id = this.ingreso.cuenta_id;\n          this.ingresos[index].cuenta = nombre;\n          this.ingresos[index].saldo = this.ingreso.saldo;\n          this.ingreso.cuenta_id = '';\n          this.ingreso.saldo = '';\n          this.ingreso.edit = false;\n          this.registro.ingreso = '';\n          this.totale();\n          this.subtotal();\n        }\n      }\n    },\n    editGasto: function editGasto(index) {\n      this.gasto.edit = true;\n      this.registro.gasto = index;\n      this.gasto.const_id = this.gastos[index].cuenta_id;\n      this.gasto.cuenta_id = this.gastos[index].cuenta_id;\n      this.gasto.saldo = this.gastos[index].saldo;\n    },\n    editGastoFuera: function editGastoFuera(index) {\n      this.gasto.edit = true;\n      this.registro.gasto = index;\n      this.gasto.const_id = this.gastos[index].cuenta_id;\n      this.gasto.cuenta_id = this.gastos[index].cuenta_id;\n      this.gasto.saldo = this.gastos[index].saldo;\n      $('#er-ingreso').modal('show');\n      $('#nav-er-gastos-tab').tab('show');\n    },\n    cancelarEdicionGasto: function cancelarEdicionGasto() {\n      this.gasto.cuenta_id = '';\n      this.gasto.saldo = '';\n      this.gasto.edit = false;\n    },\n    actualizarGasto: function actualizarGasto() {\n      if (this.gasto.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.gasto.cuenta_id;\n        var verificar = this.verificarCuentaGasto(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.gasto;\n          this.gastos[index].cuenta_id = this.gasto.cuenta_id;\n          this.gastos[index].cuenta = nombre;\n          this.gastos[index].saldo = this.gasto.saldo;\n          this.gasto.cuenta_id = '';\n          this.gasto.saldo = '';\n          this.gasto.edit = false;\n          this.registro.gasto = '';\n          this.totales();\n          this.subtotal();\n        }\n      }\n    },\n    editUtilidad: function editUtilidad(index) {\n      this.utilida.create = true;\n      this.utilida.edit = true;\n      this.registro.utilida = index;\n      this.utilida.const_id = this.utilidades[index].cuenta_id;\n      this.utilida.cuenta_id = this.utilidades[index].cuenta_id;\n      this.utilida.saldo = this.utilidades[index].saldo;\n    },\n    editUtilidadFuera: function editUtilidadFuera(index) {\n      this.utilida.edit = true;\n      this.registro.utilida = index;\n      this.utilida.const_id = this.utilidades[index].cuenta_id;\n      this.utilida.cuenta_id = this.utilidades[index].cuenta_id;\n      this.utilida.saldo = this.utilidades[index].saldo;\n      $('#er-ingreso').modal('show');\n      $('#nav-er-utilidad-tab').tab('show');\n    },\n    cancelarEdicionUtilidad: function cancelarEdicionUtilidad() {\n      this.utilida.cuenta_id = '';\n      this.utilida.saldo = '';\n      this.utilida.edit = false;\n    },\n    actualizarUtilidad: function actualizarUtilidad() {\n      if (this.utilida.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.utilida.cuenta_id;\n        var verificar = this.verificarCuentaUtilidad(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.utilida;\n          this.utilidades[index].cuenta_id = this.utilida.cuenta_id;\n          this.utilidades[index].cuenta = nombre;\n          this.utilidades[index].saldo = this.utilida.saldo;\n          this.utilida.cuenta_id = '';\n          this.utilida.saldo = '';\n          this.utilida.edit = false;\n          this.utilida.create = false;\n          this.registro.utilidad = '';\n          this.totale();\n          this.subtotal();\n        }\n      }\n    },\n    guardarEstadoResultado: function guardarEstadoResultado() {\n      if (this.nombre.trim() === '') {\n        toastr.error(\"Campo Nombre es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha.trim() === '') {\n        toastr.error(\"Campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/estado-resultado';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          fecha: _this.fecha,\n          ingresos: _this.ingresos,\n          gastos: _this.gastos,\n          utilidades: _this.utilidades,\n          utilidad: _this.utilidad,\n          totales: _this.totales,\n          venta: _this.venta,\n          costo_venta: _this.costo_venta\n        }).then(function (response) {\n          if (response.data.success == 'actualizado') {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_general.obtenerEstadoResultado();\n            asientos_cierre.obtenerEstadoResultado();\n          } else {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            balance_general.obtenerEstadoResultado();\n            asientos_cierre.obtenerEstadoResultado();\n          }\n        })[\"catch\"](function (error) {\n          toastr.error(error.response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        });\n      }\n    },\n    obtenerEstadoResultado: function obtenerEstadoResultado() {\n      var _this30 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/estado-obtener-resultado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.nombre = response.data.estadoresultado.nombre;\n          _this.fecha = response.data.estadoresultado.fecha;\n          _this.ingresos = response.data.ingresos;\n          _this.gastos = response.data.gastos;\n          _this.utilidades = response.data.utilidades;\n          _this.utilidad = response.data.estadoresultado.utilidad;\n          _this.venta = response.data.estadoresultado.venta;\n          _this.costo_venta = response.data.estadoresultado.costo_venta;\n          _this.totales.utilidad_bruta_ventas = response.data.estadoresultado.utilidad_bruta_ventas;\n          _this.utilidad_bruta.venta = response.data.estadoresultado.venta;\n          _this.utilidad_bruta.costo_venta = response.data.estadoresultado.costo_venta;\n          _this.totales.utilidad_ejercicio = response.data.estadoresultado.utilidad_ejercicio;\n          _this.totales.utilidad_liquida = response.data.estadoresultado.utilidad_liquida;\n          console.log(response.data.estadoresultado);\n\n          _this30.totale();\n\n          _this30.subtotal();\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////BALANCE GENERAL ///////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar balance_general = new Vue({\n  el: \"#balance_general\",\n  data: {\n    nombre: '',\n    fecha: '',\n    id_taller: taller,\n    hojatrabajo: [],\n    nombre_hoja: '',\n    estadoresultado: {\n      nombre_e_resultado: '',\n      fecha_e_resultado: '',\n      ingresos: [],\n      gastos: [],\n      utilidades: [],\n      utilidad: '',\n      venta_e_resultado: '',\n      costo_venta_e_resultado: '',\n      totales: {\n        ingreso: '',\n        gasto: '',\n        utilidad_bruta_ventas_e_resultado: '',\n        utilidad_ejercicio_e_resultado: '',\n        utilidad_liquida_e_resultado: ''\n      }\n    },\n    //diarios:[],\n    update: 0,\n    balance_general: {\n      //Nombre y fecha del balance inicial\n      nombre: '',\n      fecha: ''\n    },\n    patrimonio: {\n      //Asignar Patrimonio\n      cuenta_id: '',\n      edit: false,\n      saldo: ''\n    },\n    bi: {\n      const_id: '',\n      const_id2: ''\n    },\n    options: objeto,\n    cuentas: cuentas,\n    //diarios2:[],\n    total_balance_inicial: {\n      //Totales de activo, pasivo y patrimonio\n      t_activo: '',\n      t_pasivo: '',\n      t_patrimonio_pasivo: ''\n    },\n    registro: {\n      activo_corriente: '',\n      activo_nocorriente: '',\n      pasivo_corriente: '',\n      pasivo_nocorriente: '',\n      patrimonio: ''\n    },\n    b_initotal: {\n      t_a_corriente: '',\n      //Total de activo corriente\n      t_a_nocorriente: '',\n      //Total de activo no corriente\n      t_p_corriente: '',\n      //Total de pasivo corriente\n      t_p_no_corriente: '',\n      //Total de pasivo no corriente\n      t_patrimonio: '' //Total de patrimonio\n\n    },\n    a_corrientes: [],\n    //Array de activos corrientes\n    a_nocorrientes: [],\n    //Array de activos no corrientes\n    p_corrientes: [],\n    //Array de pasivos corrientes\n    p_nocorrientes: [],\n    //Array de pasivos no corrientes\n    patrimonios: [],\n    //Array de patrimonios\n    activo: {\n      a_corriente: {\n        //Agregar un nuevo activo corriente al array\n        cuenta_id: '',\n        saldo: '',\n        cuenta_id2: '',\n        total_saldo: '',\n        total_saldo2: '',\n        saldo2: '',\n        edit: false,\n        \"double\": false\n      },\n      a_nocorriente: {\n        //Agregar un nuevo activo no corriente al array\n        cuenta_id: '',\n        saldo: '',\n        cuenta_id2: '',\n        total_saldo: '',\n        total_saldo2: '',\n        saldo2: '',\n        edit: false,\n        \"double\": false\n      }\n    },\n    pasivo: {\n      p_corriente: {\n        cuenta_id: '',\n        saldo: '',\n        total: '',\n        edit: false\n      },\n      p_nocorriente: {\n        cuenta_id: '',\n        saldo: '',\n        total: '',\n        edit: false\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerHojita();\n    this.cambioActivo();\n    this.cambioActivoNo();\n    this.cambioPasivo();\n    this.cambioPasivoNo();\n    this.cambioPatrimonio();\n    this.TotalActivo();\n    this.TotalPasivo();\n    this.obtenerBalance();\n    this.obtenerEstadoResultado();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerEstadoResultado: function obtenerEstadoResultado() {\n      var _this31 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/estado-obtener-resultado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.estadoresultado.nombre_e_resultado = response.data.estadoresultado.nombre;\n          _this.estadoresultado.fecha_e_resultado = response.data.estadoresultado.fecha;\n          _this.estadoresultado.ingresos = response.data.ingresos;\n          _this.estadoresultado.totales.ingreso = response.data.estadoresultado.total_ingresos;\n          _this.estadoresultado.totales.gasto = response.data.estadoresultado.total_gastos;\n          _this.estadoresultado.gastos = response.data.gastos;\n          _this.estadoresultado.utilidades = response.data.utilidades;\n          _this.estadoresultado.utilidad = response.data.estadoresultado.utilidad;\n          _this.estadoresultado.venta_e_resultado = response.data.estadoresultado.venta;\n          _this.estadoresultado.costo_venta_e_resultado = response.data.estadoresultado.costo_venta;\n          _this.estadoresultado.totales.utilidad_bruta_ventas_e_resultado = response.data.estadoresultado.utilidad_bruta_ventas;\n          _this.estadoresultado.totales.utilidad_ejercicio_e_resultado = response.data.estadoresultado.utilidad_ejercicio;\n          _this.estadoresultado.totales.utilidad_liquida_e_resultado = response.data.estadoresultado.utilidad_liquida;\n          _this.estadoresultado.totales.utilidad_neta_o = response.data.estadoresultado.utilidad_neta_o;\n          console.log(response.data.estadoresultado);\n\n          _this31.totale();\n\n          _this31.subtotal();\n        }\n      })[\"catch\"](function (error) {});\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    obtenerHojita: function obtenerHojita() {\n      var _this32 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/hoja-obtener-trabajo';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this32.hojatrabajo = response.data.hojatrabajo;\n          _this32.nombre_hoja = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    abrirActivoC: function abrirActivoC() {\n      this.limpiar();\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-activo-corriente-tab').tab('show'); // $('#kardex-promedio-ingreso-edit-tab').tab('show')\n    },\n    abrirActivoNoC: function abrirActivoNoC() {\n      this.limpiar();\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-activo-no-corriente-tab').tab('show');\n    },\n    abrirPasivoC: function abrirPasivoC() {\n      this.limpiar();\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-pasivo-corriente-tab').tab('show');\n    },\n    abrirPasivoNoC: function abrirPasivoNoC() {\n      this.limpiar();\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-pasivo-no-corriente-tab').tab('show');\n    },\n    abrirPatrimonio: function abrirPatrimonio() {\n      this.limpiar();\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-patrimonio-tab').tab('show');\n    },\n    //ELIMINAR ELEMENTOS DE UN ARRAY /////////\n    deleteAcCooriente: function deleteAcCooriente(index) {\n      var _this33 = this;\n\n      var nombre = this.a_corrientes[index].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this33.a_corrientes.splice(index, 1);\n\n          _this33.cambioActivo();\n\n          _this33.TotalActivo();\n\n          _this33.limpiar();\n        }\n      });\n    },\n    deletePaCooriente: function deletePaCooriente(index) {\n      var _this34 = this;\n\n      var nombre = this.p_corrientes[index].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this34.p_corrientes.splice(index, 1);\n\n          _this34.cambioPasivo();\n\n          _this34.TotalPasivo();\n\n          _this34.limpiar();\n        }\n      });\n    },\n    deleteAcNoCooriente: function deleteAcNoCooriente(index) {\n      var _this35 = this;\n\n      var nombre = this.a_nocorrientes[index].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this35.a_nocorrientes.splice(index, 1);\n\n          _this35.cambioActivoNo();\n\n          _this35.TotalActivo();\n\n          _this35.limpiar();\n        }\n      });\n    },\n    deletePaNoCooriente: function deletePaNoCooriente(index) {\n      var _this36 = this;\n\n      var nombre = this.p_nocorrientes[index].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this36.p_nocorrientes.splice(index, 1);\n\n          _this36.cambioPasivoNo();\n\n          _this36.TotalPasivo();\n\n          _this36.limpiar();\n        }\n      });\n    },\n    deletePatrimonio: function deletePatrimonio(index) {\n      var _this37 = this;\n\n      var nombre = this.patrimonios[index].cuenta;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this37.patrimonios.splice(index, 1);\n\n          _this37.cambioPatrimonio();\n\n          _this37.limpiar();\n        }\n      });\n    },\n    limpiar: function limpiar() {\n      //LIMPIAR TODOS LOS CAMPOS DE ACTIVOS PASIVOS Y PATRIMONIOS\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_corriente.cuenta_id2 = '';\n      this.activo.a_corriente.saldo2 = '';\n      this.activo.a_corriente[\"double\"] = '';\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.activo.a_nocorriente.cuenta_id2 = '';\n      this.activo.a_nocorriente.saldo2 = '';\n      this.activo.a_nocorriente[\"double\"] = '';\n      this.bi.const_id = '';\n      this.activo.a_corriente.edit = false;\n      this.activo.a_nocorriente.edit = false;\n      this.pasivo.p_corriente.edit = false;\n      this.pasivo.p_nocorriente.edit = false;\n      this.patrimonio.edit = false;\n    },\n    agregarActivoCorriente: function agregarActivoCorriente() {\n      //    if(this.activo.a_corriente.cuenta_id  ==''){\n      //     toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n      //       \"timeOut\": \"3000\"\n      //   });\n      // }else {\n      //      let id = this.activo.a_corriente.cuenta_id;\n      //        let verificar = this.verificarCuenta(id);\n      //            if (verificar == true) {\n      //              toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n      //               \"timeOut\": \"3000\"\n      //               });\n      //            }else{\n      //     let nombre   = funciones.obtenerNombre(id);\n      //     var a_corriente ={resta:'', cuenta_id2:'', cuenta2:'', total_saldo2:'', saldo2:'', total_saldo:'', cuenta_id:this.activo.a_corriente.cuenta_id, cuenta:nombre, saldo:this.activo.a_corriente.saldo}\n      //     this.a_corrientes.push(a_corriente);\n      //     toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n      //       \"timeOut\": \"3000\"\n      //     });\n      //    this.activo.a_corriente.cuenta_id =''\n      //    this.activo.a_corriente.saldo     =''\n      //    this.cambioActivo(); \n      //  }\n      //    }   \n      //    \n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var id2 = this.activo.a_corriente.cuenta_id2;\n\n        if (id == id2) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          return;\n        }\n\n        if (id2 !== '') {\n          var verificar2 = this.verificarCuenta(id2);\n\n          if (verificar2 == true) {\n            toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            return;\n          }\n        }\n\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n\n          if (id2 != '' && id2 != undefined) {\n            this.activo.a_corriente.nombre1 = funciones.obtenerNombre(id2);\n            console.log('HAS ENTRADO AQUI');\n            var resta = Number(this.activo.a_corriente.saldo) - Number(this.activo.a_corriente.saldo2);\n            this.activo.a_corriente.total_saldo2 = resta;\n            var a_corriente = {\n              resta: 'si',\n              cuenta_id: this.activo.a_corriente.cuenta_id,\n              cuenta: nombre,\n              saldo: this.activo.a_corriente.saldo,\n              cuenta2: this.activo.a_corriente.nombre1,\n              total_saldo: this.activo.a_corriente.total_saldo,\n              cuenta_id2: this.activo.a_corriente.cuenta_id2,\n              saldo2: this.activo.a_corriente.saldo2,\n              total_saldo2: this.activo.a_corriente.total_saldo2\n            };\n            this.a_corrientes.push(a_corriente);\n            toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else {\n            var _a_corriente = {\n              resta: 'no',\n              cuenta_id: this.activo.a_corriente.cuenta_id,\n              cuenta: nombre,\n              saldo: '',\n              cuenta2: '',\n              saldo2: '',\n              total_saldo: this.activo.a_corriente.saldo,\n              cuenta_id2: this.activo.a_corriente.cuenta_id2,\n              total_saldo2: this.activo.a_corriente.total_saldo2\n            };\n            this.a_corrientes.push(_a_corriente);\n            toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.activo.a_corriente.cuenta_id2 = '';\n          this.activo.a_corriente.saldo2 = '';\n          this.activo.a_corriente.total_saldo = '';\n          this.activo.a_corriente.total_saldo2 = '';\n          this.activo.a_corriente[\"double\"] = false;\n          this.cambioActivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editAcorriente: function editAcorriente(index) {\n      this.activo.a_corriente.edit = true;\n      this.registro.a_corriente = index;\n      this.bi.const_id = this.a_corrientes[index].cuenta_id;\n      this.bi.const_id2 = this.a_corrientes[index].cuenta_id2;\n      this.activo.a_corriente.cuenta_id = this.a_corrientes[index].cuenta_id;\n\n      if (this.a_corrientes[index].saldo != '' && this.a_corrientes[index].saldo != undefined) {\n        this.activo.a_corriente.saldo = this.a_corrientes[index].saldo;\n      } else {\n        this.activo.a_corriente.saldo = this.a_corrientes[index].total_saldo;\n      }\n\n      this.activo.a_corriente.cuenta_id2 = this.a_corrientes[index].cuenta_id2;\n      this.activo.a_corriente.saldo2 = this.a_corrientes[index].saldo2;\n\n      if (this.a_corrientes[index].resta == 'si') {\n        this.activo.a_corriente[\"double\"] = true;\n      } // this.activo.a_corriente.edit      = true;\n      // this.registro.a_corriente    = index;\n      // this.bi.const_id                  = this.a_corrientes[index].cuenta_id;\n      // this.activo.a_corriente.cuenta_id = this.a_corrientes[index].cuenta_id;\n      // this.activo.a_corriente.saldo     = this.a_corrientes[index].saldo;\n\n\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-activo-corriente-tab').tab('show');\n    },\n    actualizarActivoC: function actualizarActivoC() {\n      if (this.activo.a_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_corriente.cuenta_id;\n        var id2 = this.activo.a_corriente.cuenta_id2;\n\n        if (id == id2) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          return;\n        }\n\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_corriente;\n          this.a_corrientes[index].cuenta_id = this.activo.a_corriente.cuenta_id;\n          this.a_corrientes[index].cuenta = nombre;\n\n          if (id2 !== '' && id2 !== undefined) {\n            var verificar2 = this.verificarCuentaAct(id2);\n\n            if (verificar2 == true) {\n              toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n                \"timeOut\": \"3000\"\n              });\n              return;\n            }\n\n            var nombre2 = funciones.obtenerNombre(id2);\n            this.a_corrientes[index].cuenta_id2 = this.activo.a_corriente.cuenta_id2;\n            this.a_corrientes[index].cuenta2 = nombre2;\n            this.a_corrientes[index].saldo = this.activo.a_corriente.saldo;\n            this.a_corrientes[index].saldo2 = this.activo.a_corriente.saldo2;\n            this.a_corrientes[index].total_saldo = '';\n            var resta = Number(this.activo.a_corriente.saldo) - Number(this.activo.a_corriente.saldo2);\n            this.a_corrientes[index].total_saldo2 = resta;\n            this.a_corrientes[index].resta = 'si';\n            console.log(resta);\n          } else {\n            this.a_corrientes[index].saldo = '';\n            this.a_corrientes[index].cuenta_id2 = '';\n            this.a_corrientes[index].cuenta2 = '';\n            this.a_corrientes[index].saldo2 = '';\n            this.a_corrientes[index].total_saldo2 = '';\n            this.a_corrientes[index].total_saldo = this.activo.a_corriente.saldo;\n            this.a_corrientes[index].resta = 'no';\n          }\n\n          this.activo.a_corriente.cuenta_id = '';\n          this.activo.a_corriente.saldo = '';\n          this.activo.a_corriente.edit = false;\n          this.registro.a_corriente = '';\n          this.activo.a_corriente.cuenta_id2 = '';\n          this.activo.a_corriente.saldo2 = '';\n          this.activo.a_corriente[\"double\"] = false;\n          this.cambioActivo();\n        }\n      } //     if(this.activo.a_corriente.cuenta_id ==''){\n      //     toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n      //       \"timeOut\": \"3000\"\n      //   });\n      //   }else {\n      //     let id = this.activo.a_corriente.cuenta_id;\n      //    let verificar = this.verificarCuenta(id);\n      //        if (verificar == true) {\n      //          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n      //           \"timeOut\": \"3000\"\n      //           });\n      //        }else{\n      //       let nombre                         = funciones.obtenerNombre(id);\n      //       let index                          = this.registro.a_corriente;\n      //       this.a_corrientes[index].cuenta_id = this.activo.a_corriente.cuenta_id;\n      //       this.a_corrientes[index].cuenta    = nombre;\n      //       this.a_corrientes[index].saldo     = this.activo.a_corriente.saldo;\n      //       this.activo.a_corriente.cuenta_id  =''\n      //       this.activo.a_corriente.saldo      =''\n      //       this.activo.a_corriente.edit       = false;\n      //       this.registro.a_corriente          = '';\n      //     this.cambioActivo();\n      //     }\n      // }\n\n    },\n    cancelarEdicionActivoC: function cancelarEdicionActivoC() {\n      this.activo.a_corriente.cuenta_id = '';\n      this.activo.a_corriente.saldo = '';\n      this.activo.a_corriente.edit = false;\n      this.activo.a_corriente[\"double\"] = false;\n      this.activo.a_corriente.cuenta_id2 = '';\n      this.activo.a_corriente.saldo2 = '';\n    },\n    DoubleCouenta: function DoubleCouenta() {\n      this.activo.a_nocorriente[\"double\"] = true;\n    },\n    DoubleCouentaC: function DoubleCouentaC() {\n      this.activo.a_nocorriente[\"double\"] = false;\n    },\n    DoubleAcorriente: function DoubleAcorriente() {\n      this.activo.a_corriente[\"double\"] = true;\n    },\n    DoubleAcorrienteC: function DoubleAcorrienteC() {\n      this.activo.a_corriente[\"double\"] = false;\n    },\n    agregarActivoNoCorriente: function agregarActivoNoCorriente() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var id2 = this.activo.a_nocorriente.cuenta_id2;\n\n        if (id2 !== '') {\n          var verificar2 = this.verificarCuenta(id2);\n\n          if (verificar2 == true) {\n            toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            return;\n          }\n        }\n\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n\n          if (id2 != '' && id2 != undefined) {\n            this.activo.a_nocorriente.nombre1 = funciones.obtenerNombre(id2);\n            console.log('HAS ENTRADO AQUI');\n            var resta = Number(this.activo.a_nocorriente.saldo) - Number(this.activo.a_nocorriente.saldo2);\n            this.activo.a_nocorriente.total_saldo2 = resta;\n            var a_nocorriente = {\n              resta: 'si',\n              cuenta_id: this.activo.a_nocorriente.cuenta_id,\n              cuenta: nombre,\n              saldo: this.activo.a_nocorriente.saldo,\n              cuenta2: this.activo.a_nocorriente.nombre1,\n              total_saldo: this.activo.a_nocorriente.total_saldo,\n              cuenta_id2: this.activo.a_nocorriente.cuenta_id2,\n              saldo2: this.activo.a_nocorriente.saldo2,\n              total_saldo2: this.activo.a_nocorriente.total_saldo2\n            };\n            this.a_nocorrientes.push(a_nocorriente);\n            toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else {\n            var _a_nocorriente = {\n              resta: 'no',\n              cuenta_id: this.activo.a_nocorriente.cuenta_id,\n              cuenta: nombre,\n              saldo: '',\n              cuenta2: '',\n              saldo2: '',\n              total_saldo: this.activo.a_nocorriente.saldo,\n              cuenta_id2: this.activo.a_nocorriente.cuenta_id2,\n              total_saldo2: this.activo.a_nocorriente.total_saldo2\n            };\n            this.a_nocorrientes.push(_a_nocorriente);\n            toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.activo.a_nocorriente.cuenta_id2 = '';\n          this.activo.a_nocorriente.saldo2 = '';\n          this.activo.a_nocorriente.total_saldo = '';\n          this.activo.a_nocorriente.total_saldo2 = '';\n          this.activo.a_nocorriente[\"double\"] = false;\n          this.cambioActivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editNoAcorriente: function editNoAcorriente(index) {\n      this.activo.a_nocorriente.edit = true;\n      this.registro.a_nocorriente = index;\n      this.bi.const_id = this.a_nocorrientes[index].cuenta_id;\n      this.bi.const_id2 = this.a_nocorrientes[index].cuenta_id2;\n      this.activo.a_nocorriente.cuenta_id = this.a_nocorrientes[index].cuenta_id;\n\n      if (this.a_nocorrientes[index].saldo != '' && this.a_nocorrientes[index].saldo != undefined) {\n        this.activo.a_nocorriente.saldo = this.a_nocorrientes[index].saldo;\n      } else {\n        this.activo.a_nocorriente.saldo = this.a_nocorrientes[index].total_saldo;\n      } // this.activo.a_nocorriente.saldo      = this.a_nocorrientes[index].saldo;\n\n\n      this.activo.a_nocorriente.cuenta_id2 = this.a_nocorrientes[index].cuenta_id2;\n      this.activo.a_nocorriente.saldo2 = this.a_nocorrientes[index].saldo2;\n\n      if (this.a_nocorrientes[index].resta == 'si') {\n        this.activo.a_nocorriente[\"double\"] = true;\n      }\n\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-activo-no-corriente-tab').tab('show');\n    },\n    actualizarActivoNC: function actualizarActivoNC() {\n      if (this.activo.a_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.activo.a_nocorriente.cuenta_id;\n        var id2 = this.activo.a_nocorriente.cuenta_id2;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.a_nocorriente;\n          this.a_nocorrientes[index].cuenta_id = this.activo.a_nocorriente.cuenta_id;\n          this.a_nocorrientes[index].cuenta = nombre;\n\n          if (id2 !== '' && id2 !== undefined) {\n            var verificar2 = this.verificarCuentaAct(id2);\n\n            if (verificar2 == true) {\n              toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n                \"timeOut\": \"3000\"\n              });\n              return;\n            }\n\n            var nombre2 = funciones.obtenerNombre(id2);\n            this.a_nocorrientes[index].cuenta_id2 = this.activo.a_nocorriente.cuenta_id2;\n            this.a_nocorrientes[index].cuenta2 = nombre2;\n            this.a_nocorrientes[index].saldo = this.activo.a_nocorriente.saldo;\n            this.a_nocorrientes[index].saldo2 = this.activo.a_nocorriente.saldo2;\n            this.a_nocorrientes[index].total_saldo = '';\n            this.a_nocorrientes[index].resta = 'si';\n            var resta = Number(this.activo.a_nocorriente.saldo) - Number(this.activo.a_nocorriente.saldo2);\n            this.a_nocorrientes[index].total_saldo2 = resta;\n            console.log(resta);\n          } else {\n            this.a_nocorrientes[index].cuenta_id2 = '';\n            this.a_nocorrientes[index].cuenta2 = '';\n            this.a_nocorrientes[index].saldo2 = '';\n            this.a_nocorrientes[index].resta = 'no';\n            this.a_nocorrientes[index].total_saldo2 = '';\n            this.a_nocorrientes[index].saldo = '';\n            this.a_nocorrientes[index].total_saldo = this.activo.a_nocorriente.saldo;\n          }\n\n          this.activo.a_nocorriente.cuenta_id = '';\n          this.activo.a_nocorriente.saldo = '';\n          this.activo.a_nocorriente.edit = false;\n          this.registro.a_nocorriente = '';\n          this.activo.a_nocorriente.cuenta_id2 = '';\n          this.activo.a_nocorriente.saldo2 = '';\n          this.activo.a_nocorriente[\"double\"] = false;\n          this.cambioActivoNo();\n        }\n      }\n    },\n    cancelarEdicionActivoNC: function cancelarEdicionActivoNC() {\n      this.activo.a_nocorriente.cuenta_id = '';\n      this.activo.a_nocorriente.saldo = '';\n      this.activo.a_nocorriente.edit = false;\n      this.activo.a_nocorriente[\"double\"] = false;\n      this.activo.a_nocorriente.cuenta_id2 = '';\n      this.activo.a_nocorriente.saldo2 = '';\n    },\n    agregarPasivoCorriente: function agregarPasivoCorriente() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_corriente = {\n            cuenta_id: this.pasivo.p_corriente.cuenta_id,\n            cuenta: nombre,\n            saldo: this.pasivo.p_corriente.saldo\n          };\n          this.p_corrientes.push(p_corriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPcorriente: function editPcorriente(index) {\n      this.pasivo.p_corriente.edit = true;\n      this.registro.p_corriente = index;\n      this.bi.const_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.cuenta_id = this.p_corrientes[index].cuenta_id;\n      this.pasivo.p_corriente.saldo = this.p_corrientes[index].saldo;\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-pasivo-corriente-tab').tab('show');\n    },\n    actualizarPasivoC: function actualizarPasivoC() {\n      if (this.pasivo.p_corriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_corriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_corriente;\n          this.p_corrientes[index].cuenta_id = this.pasivo.p_corriente.cuenta_id;\n          this.p_corrientes[index].cuenta = nombre;\n          this.p_corrientes[index].saldo = this.pasivo.p_corriente.saldo;\n          this.pasivo.p_corriente.cuenta_id = '';\n          this.pasivo.p_corriente.saldo = '';\n          this.pasivo.p_corriente.edit = false;\n          this.registro.p_corriente = '';\n          this.cambioPasivo();\n        }\n      }\n    },\n    cancelarEdicionPcorriente: function cancelarEdicionPcorriente() {\n      this.pasivo.p_corriente.cuenta_id = '';\n      this.pasivo.p_corriente.saldo = '';\n      this.pasivo.p_corriente.edit = false;\n    },\n    agregarPasivoNoCorriente: function agregarPasivoNoCorriente() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var p_nocorriente = {\n            cuenta_id: this.pasivo.p_nocorriente.cuenta_id,\n            cuenta: nombre,\n            saldo: this.pasivo.p_nocorriente.saldo\n          };\n          this.p_nocorrientes.push(p_nocorriente);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPNocorriente: function editPNocorriente(index) {\n      this.pasivo.p_nocorriente.edit = true;\n      this.registro.p_nocorriente = index;\n      this.bi.const_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.cuenta_id = this.p_nocorrientes[index].cuenta_id;\n      this.pasivo.p_nocorriente.saldo = this.p_nocorrientes[index].saldo;\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-pasivo-no-corriente-tab').tab('show');\n    },\n    actualizarPasivoNC: function actualizarPasivoNC() {\n      if (this.pasivo.p_nocorriente.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.pasivo.p_nocorriente.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.p_nocorriente;\n          this.p_nocorrientes[index].cuenta_id = this.pasivo.p_nocorriente.cuenta_id;\n          this.p_nocorrientes[index].cuenta = nombre;\n          this.p_nocorrientes[index].saldo = this.pasivo.p_nocorriente.saldo;\n          this.pasivo.p_nocorriente.cuenta_id = '';\n          this.pasivo.p_nocorriente.saldo = '';\n          this.pasivo.p_nocorriente.edit = false;\n          this.registro.p_nocorriente = '';\n          this.cambioPasivoNo();\n        }\n      }\n    },\n    cancelarEdicionPNocorriente: function cancelarEdicionPNocorriente() {\n      this.pasivo.p_nocorriente.cuenta_id = '';\n      this.pasivo.p_nocorriente.saldo = '';\n      this.pasivo.p_nocorriente.edit = false;\n    },\n    agregarPatrimonio: function agregarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var patrimonio = {\n            cuenta_id: this.patrimonio.cuenta_id,\n            cuenta: nombre,\n            saldo: this.patrimonio.saldo\n          };\n          this.patrimonios.push(patrimonio);\n          toastr.success(\"Cuenta agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    //EDITAR ELEMENTOS DE UN ARRAY\n    editPatrimonio: function editPatrimonio(index) {\n      this.patrimonio.edit = true;\n      this.registro.patrimonio = index;\n      this.bi.const_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.cuenta_id = this.patrimonios[index].cuenta_id;\n      this.patrimonio.saldo = this.patrimonios[index].saldo;\n      $('#bg-transaccion').modal('show');\n      $('#nav-bg-patrimonio-tab').tab('show');\n    },\n    actualizarPatrimonio: function actualizarPatrimonio() {\n      if (this.patrimonio.cuenta_id == '') {\n        toastr.error(\"El campo Cuenta es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.patrimonio.cuenta_id;\n        var verificar = this.verificarCuenta(id);\n\n        if (verificar == true) {\n          toastr.error(\"No puedes agregar una cuenta repetida\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var nombre = funciones.obtenerNombre(id);\n          var index = this.registro.patrimonio;\n          this.patrimonios[index].cuenta_id = this.patrimonio.cuenta_id;\n          this.patrimonios[index].cuenta = nombre;\n          this.patrimonios[index].saldo = this.patrimonio.saldo;\n          this.patrimonio.cuenta_id = '';\n          this.patrimonio.saldo = '';\n          this.patrimonio.edit = false;\n          this.registro.patrimonio = '';\n          this.cambioPatrimonio();\n        }\n      }\n    },\n    cancelarEdicionPatrimonio: function cancelarEdicionPatrimonio() {\n      this.patrimonio.cuenta_id = '';\n      this.patrimonio.saldo = '';\n      this.patrimonio.edit = false;\n    },\n    verificarCuenta: function verificarCuenta(id) {\n      if (Number(this.bi.const_id) === id) {\n        return false;\n      } else if (Number(this.bi.const_id2) === id) {\n        return false;\n      }\n\n      var ac = this.a_corrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var anc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var pc = this.p_corrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var pnc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var p = this.patrimonios.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (anc.length > 0) {\n        return true;\n      } else if (pc.length > 0) {\n        return true;\n      } else if (pnc.length > 0) {\n        return true;\n      } else if (p.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    verificarCuentaAct: function verificarCuentaAct(id) {\n      if (this.bi.const_id == this.bi.const_id2) {\n        return true;\n      }\n\n      if (Number(this.bi.const_id) === id) {\n        return false;\n      } else if (Number(this.bi.const_id2) === id) {\n        return false;\n      }\n\n      var ac = this.a_corrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var anc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var pc = this.p_corrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var pnc = this.a_nocorrientes.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n      var p = this.patrimonios.filter(function (x) {\n        return x.cuenta_id == id || x.cuenta_id2 == id;\n      });\n\n      if (ac.length > 0) {\n        return true;\n      } else if (anc.length > 0) {\n        return true;\n      } else if (pc.length > 0) {\n        return true;\n      } else if (pnc.length > 0) {\n        return true;\n      } else if (p.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    //ACTUALIZAR SUMAS DE PASIVOS, ACTIVOS Y PATRIMONIO\n    cambioActivo: function cambioActivo() {\n      this.b_initotal.t_a_corriente = 0;\n      var t_activo = this.a_corrientes; //CARGAR EL ARRAY DE LOS ACTIVOS\n      //console.log(t_activo)\n\n      var total = 0;\n      t_activo.forEach(function (obj) {\n        //RECORRER ESE ARRAY\n        total += Number(obj.total_saldo); //SUMAR EL SALDO DE CADA CUENTA EN EL ARRAY UNA Y OTRA VEZ\n      });\n      t_activo.forEach(function (obj2) {\n        total += Number(obj2.total_saldo2);\n      }); //console.log(total);          \n\n      this.b_initotal.t_a_corriente = total; //IGUALAR LA VARIABLE QUE CONTIENE LA SUMA TOTAL CON LA SUMA REALIZADA\n\n      this.TotalActivo();\n    },\n    cambioActivoNo: function cambioActivoNo() {\n      this.b_initotal.t_a_nocorriente = 0;\n      var t_noactivo = this.a_nocorrientes; //console.log(t_noactivo)\n\n      var total = 0;\n      t_noactivo.forEach(function (obj) {\n        total += Number(obj.total_saldo);\n      });\n      t_noactivo.forEach(function (obj2) {\n        total += Number(obj2.total_saldo2);\n      });\n      console.log(total);\n      this.b_initotal.t_a_nocorriente = total;\n      this.TotalActivo();\n    },\n    cambioPasivo: function cambioPasivo() {\n      this.b_initotal.t_p_corriente = 0;\n      var t_pasivo = this.p_corrientes; //console.log(t_pasivo)\n\n      var total = 0;\n      t_pasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_p_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPasivoNo: function cambioPasivoNo() {\n      this.b_initotal.t_p_no_corriente = 0;\n      var t_nopasivo = this.p_nocorrientes; //console.log(t_nopasivo)\n\n      var total = 0;\n      t_nopasivo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_p_no_corriente = total;\n      this.TotalPasivo();\n    },\n    cambioPatrimonio: function cambioPatrimonio() {\n      this.b_initotal.t_patrimonio = 0;\n      var t_patrimo = this.patrimonios; //console.log(t_patrimo)\n\n      var total = 0;\n      t_patrimo.forEach(function (obj) {\n        total += Number(obj.saldo);\n      }); //console.log(total);\n\n      this.b_initotal.t_patrimonio = total;\n    },\n    //TOTAL GENERAL DE ACTIVO, PASIVO Y PATRIMONIO       \n    TotalActivo: function TotalActivo() {\n      var activo = this.b_initotal.t_a_corriente + this.b_initotal.t_a_nocorriente; //console.log(activo);\n\n      this.total_balance_inicial.t_activo = activo;\n    },\n    TotalPasivo: function TotalPasivo() {\n      var pasivo = this.b_initotal.t_p_corriente + this.b_initotal.t_p_no_corriente; //onsole.log(pasivo);\n\n      this.total_balance_inicial.t_pasivo = pasivo;\n    },\n    totalPasivoPatrimonio: function totalPasivoPatrimonio() {\n      $('#pasivo_patrimonio').modal('hide');\n      toastr.success(\"Total Agregado Correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    //GUARDAR BALANCE INICIAL\n    guardarBalanceGeneral: function guardarBalanceGeneral() {\n      if (this.balance_general.nombre.trim() === '') {\n        toastr.error(\"Campo Nombre es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.balance_general.fecha.trim() === '') {\n        toastr.error(\"Campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.a_corrientes.length == 0) {\n        toastr.error(\"Debe haber al menos un Activo Corriente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.a_nocorrientes.length == 0) {\n        toastr.error(\"Debe haber al menos un Activo No Corriente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.p_corrientes.length == 0) {\n        toastr.error(\"Debe haber al menos un Pasivo Corriente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.p_nocorrientes.length == 0) {\n        toastr.error(\"Debe haber al menos un Pasivo No Corriente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.patrimonios.length == 0) {\n        toastr.error(\"Debe haber al menos un Patrimonio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.total_balance_inicial.t_patrimonio_pasivo.trim() === '') {\n        toastr.error(\"Debes calcular el Total del Pasivo + Patrimonio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/balance-general';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.balance_general.nombre,\n          fecha: _this.balance_general.fecha,\n          a_corriente: _this.a_corrientes,\n          a_nocorriente: _this.a_nocorrientes,\n          p_corriente: _this.p_corrientes,\n          p_nocorriente: _this.p_nocorrientes,\n          patrimonio: _this.patrimonios,\n          totales: _this.b_initotal,\n          total_balance_inicial: _this.total_balance_inicial,\n          t_patrimonio: _this.total_balance_inicial.t_patrimonio_pasivo\n        }).then(function (response) {\n          if (response.data.success == true) {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio();\n\n            console.log(response.data);\n            asientos_cierre.obtenerBalance();\n          } else {\n            toastr.success(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this.cambioActivo();\n\n            _this.cambioActivoNo();\n\n            _this.cambioPasivo();\n\n            _this.cambioPasivoNo();\n\n            _this.cambioPatrimonio();\n\n            asientos_cierre.obtenerBalance(); // diario.obtenerBalanceInicial();\n          }\n        })[\"catch\"](function (error) {\n          console.log(error.response.data.message);\n        });\n      }\n    },\n    obtenerBalance: function obtenerBalance() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/obtener-balance-general';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.success(response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.balance_general.nombre = response.data.nombre;\n          _this.balance_general.fecha = response.data.fecha;\n          _this.a_corrientes = response.data.a_corriente;\n          _this.a_nocorrientes = response.data.a_nocorriente;\n          _this.p_corrientes = response.data.p_corriente;\n          _this.p_nocorrientes = response.data.p_nocorriente;\n          _this.patrimonios = response.data.patrimonios;\n          _this.total_balance_inicial.t_patrimonio_pasivo = response.data.total_pasivo_patrimonio;\n\n          _this.cambioActivo();\n\n          _this.cambioActivoNo();\n\n          _this.cambioPasivo();\n\n          _this.cambioPasivoNo();\n\n          _this.cambioPatrimonio(); //diario.obtenerBalanceInicial();\n\n\n          console.log(response.data);\n        } else {}\n      })[\"catch\"](function (error) {});\n    }\n  }\n});\nvar asientos_cierre = new Vue({\n  el: '#asientos_cierre',\n  data: {\n    id_taller: taller,\n    producto_id: 1,\n    nombre: '',\n    fechabalance: '',\n    complete: false,\n    options: objeto,\n    cuentas: cuentas,\n    balanceInicial: {\n      debe: [],\n      haber: [],\n      totaldebe: 0,\n      totalhaber: 0\n    },\n    kardex: [],\n    nombre_kardex: '',\n    producto_kardex: '',\n    registros: [],\n    eliminar: {\n      index: ''\n    },\n    porcentajes: {\n      porcentaje: 0,\n      index_cuenta: '',\n      tipo: '',\n      cantidad: 0\n    },\n    registerindex: 0,\n    cuentaindex: 0,\n    diarios: {\n      debe: [],\n      haber: [],\n      comentario: '',\n      fecha: '',\n      tipo: ''\n    },\n    edit: {\n      debe: [],\n      haber: [],\n      comentario: ''\n    },\n    diario: {\n      debe: {\n        edit: false,\n        index: '',\n        fecha: '',\n        nom_cuenta: '',\n        saldo: ''\n      },\n      haber: {\n        edit: false,\n        index: '',\n        fecha: '',\n        nom_cuenta: '',\n        saldo: ''\n      },\n      comentario: ''\n    },\n    pasan: {\n      debe: 0,\n      haber: 0\n    },\n    total: {\n      debe: 0,\n      haber: 0\n    },\n    update: false,\n    dato: [],\n    estadoresultado: {\n      nombre_e_resultado: '',\n      fecha_e_resultado: '',\n      ingresos: [],\n      gastos: [],\n      utilidades: [],\n      utilidad: '',\n      venta_e_resultado: '',\n      costo_venta_e_resultado: '',\n      totales: {\n        ingreso: '',\n        gasto: '',\n        utilidad_bruta_ventas_e_resultado: '',\n        utilidad_ejercicio_e_resultado: '',\n        utilidad_liquida_e_resultado: ''\n      }\n    },\n    balance_general: {\n      a_corrientes: [],\n      a_nocorrientes: [],\n      p_corrientes: [],\n      p_nocorrientes: [],\n      patrimonios: [],\n      total_balance_inicial: {\n        t_activo: '',\n        t_pasivo: '',\n        t_patrimonio: '',\n        t_patrimonio_pasivo: ''\n      }\n    },\n    hojatrabajo: [],\n    nombre_hoja: '',\n    b_initotal: {\n      t_a_corriente: '',\n      //Total de activo corriente\n      t_a_nocorriente: '',\n      //Total de activo no corriente\n      t_p_corriente: '',\n      //Total de pasivo corriente\n      t_p_no_corriente: '',\n      //Total de pasivo no corriente\n      t_patrimonio: '' //Total de patrimonio\n\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerAsientoCierre();\n    this.obtenerHojita(); // this.obtenerBalance();\n  },\n  methods: {\n    obtenerHojita: function obtenerHojita() {\n      var _this38 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/hoja-obtener-trabajo';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this38.hojatrabajo = response.data.hojatrabajo;\n          _this38.nombre_hoja = response.data.nombre;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerEstadoResultado: function obtenerEstadoResultado() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/estado-obtener-resultado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.estadoresultado.nombre_e_resultado = response.data.estadoresultado.nombre;\n          _this.estadoresultado.fecha_e_resultado = response.data.estadoresultado.fecha;\n          _this.estadoresultado.ingresos = response.data.ingresos;\n          _this.estadoresultado.totales.ingreso = response.data.estadoresultado.total_ingresos;\n          _this.estadoresultado.totales.gasto = response.data.estadoresultado.total_gastos;\n          _this.estadoresultado.gastos = response.data.gastos;\n          _this.estadoresultado.utilidades = response.data.utilidades;\n          _this.estadoresultado.utilidad = response.data.estadoresultado.utilidad;\n          _this.estadoresultado.venta_e_resultado = response.data.estadoresultado.venta;\n          _this.estadoresultado.costo_venta_e_resultado = response.data.estadoresultado.costo_venta;\n          _this.estadoresultado.totales.utilidad_bruta_ventas_e_resultado = response.data.estadoresultado.utilidad_bruta_ventas;\n          _this.estadoresultado.totales.utilidad_ejercicio_e_resultado = response.data.estadoresultado.utilidad_ejercicio;\n          _this.estadoresultado.totales.utilidad_liquida_e_resultado = response.data.estadoresultado.utilidad_liquida;\n          _this.estadoresultado.totales.utilidad_neta_o = response.data.estadoresultado.utilidad_neta_o;\n          console.log(response.data.estadoresultado); //   this.totale();\n          // this.subtotal();\n        }\n      })[\"catch\"](function (error) {});\n    },\n    limpiar: function limpiar() {\n      this.update = false;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.fecha = [];\n      this.diarios.comentario = [];\n      this.diarios.ajustado = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n    },\n    obtenerBalance: function obtenerBalance() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/obtener-balance-general';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.success(response.data.message, \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.balance_general.nombre = response.data.nombre;\n          _this.balance_general.fecha = response.data.fecha;\n          _this.balance_general.a_corrientes = response.data.a_corriente;\n          _this.balance_general.a_nocorrientes = response.data.a_nocorriente;\n          _this.balance_general.p_corrientes = response.data.p_corriente;\n          _this.balance_general.p_nocorrientes = response.data.p_nocorriente;\n          _this.balance_general.patrimonios = response.data.patrimonios;\n          _this.balance_general.total_balance_inicial.t_patrimonio_pasivo = response.data.total_pasivo_patrimonio;\n          _this.balance_general.total_balance_inicial.t_pasivo = response.data.bgneral.t_pasivo;\n          _this.balance_general.total_balance_inicial.t_activo = response.data.bgneral.t_activo;\n          _this.balance_general.total_balance_inicial.t_patrimonio = response.data.bgneral.t_patrimonio;\n          _this.b_initotal.t_a_corriente = response.data.bgneral.t_a_corriente;\n          _this.b_initotal.t_a_nocorriente = response.data.bgneral.t_a_nocorriente;\n          _this.b_initotal.t_p_corriente = response.data.bgneral.t_p_corriente;\n          _this.b_initotal.t_p_no_corriente = response.data.bgneral.t_p_no_corriente;\n          _this.b_initotal.t_patrimonio = response.data.bgneral.t_patrimonio;\n        } else {}\n      })[\"catch\"](function (error) {});\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    abrirTransaccion: function abrirTransaccion() {\n      this.update = false;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.fecha = [];\n      this.diarios.comentario = [];\n      this.diarios.ajustado = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.limpiar();\n      $('#as-transaccion').modal('show');\n      $('#comentario-asiento-tab').tab('show');\n    },\n    llamarDiario: function llamarDiario() {\n      $('#list-mayor-general-list').tab('show');\n      $('#mg-transaccion').modal('show');\n    },\n    valorPorcentual: function valorPorcentual(porcentaje, valor) {\n      // let porcentaje = this.cuentas[index].porcentaje;\n      var total = Number(valor * porcentaje / 100);\n      return total;\n    },\n    agregarHaber: function agregarHaber() {\n      if (this.diario.haber.nom_cuenta === '') {\n        toastr.error(\"No has registrado una cuenta\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.diario.haber.nom_cuenta;\n        var cuenta = this.cuentas.filter(function (x) {\n          return x.id == id;\n        });\n        var valor = this.diario.haber.saldo; // if (cuenta[0].porcentual == 1) {\n        //       let calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n        //       let haber = {cuenta_id: cuenta[0].id, fecha:this.diario.haber.fecha, nom_cuenta: cuenta[0].nombre, saldo:calculo};\n        //       this.diarios.haber.push(haber);//añadimos el la variable persona al array\n        // }else{\n\n        var haber = {\n          cuenta_id: cuenta[0].id,\n          fecha: this.diario.haber.fecha,\n          nom_cuenta: cuenta[0].nombre,\n          saldo: this.diario.haber.saldo\n        };\n        this.diarios.haber.push(haber); // }\n        //Limpiamos los campos\n\n        toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.haber.fecha = '';\n        this.diario.haber.nom_cuenta = '';\n        this.diario.haber.saldo = '';\n      }\n    },\n    agregarDebe: function agregarDebe() {\n      var id = this.diario.debe.nom_cuenta;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      var valor = this.diario.debe.saldo;\n\n      if (this.diario.debe.nom_cuenta === '') {\n        toastr.error(\"La cuenta es obligatoria\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        // if (cuenta[0].porcentual == 1) {\n        //       let calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n        //       let debe = {cuenta_id: cuenta[0].id, fecha:this.diario.debe.fecha, nom_cuenta: cuenta[0].nombre, saldo:calculo};\n        //       this.diarios.debe.push(debe);\n        // }else{\n        var debe = {\n          cuenta_id: cuenta[0].id,\n          fecha: this.diario.debe.fecha,\n          nom_cuenta: cuenta[0].nombre,\n          saldo: this.diario.debe.saldo\n        };\n        this.diarios.debe.push(debe); // }\n\n        toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diario.debe.fecha = '';\n        this.diario.debe.nom_cuenta = '';\n        this.diario.debe.saldo = '';\n      }\n    },\n    agregarComentario: function agregarComentario() {\n      this.diarios.comentario = this.diario.comentario;\n      this.diario.comentario = '';\n    },\n    deleteHaber: function deleteHaber(index) {\n      this.diarios.haber.splice(index, 1);\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n    },\n    deleteDebe: function deleteDebe(index) {\n      this.diarios.debe.splice(index, 1);\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n    },\n    guardarRegistro: function guardarRegistro() {\n      var total_debe = 0;\n      var total_haber = 0;\n      this.diarios.debe.forEach(function (debe, id) {\n        var saldo2 = debe.saldo;\n        total_debe += Number(saldo2);\n      });\n      this.diarios.haber.forEach(function (haber, id) {\n        var saldo = haber.saldo;\n        total_haber += Number(saldo);\n      });\n      console.log(total_debe);\n      console.log(total_haber);\n\n      if (this.diarios.debe == 0) {\n        toastr.error(\"No tienes transaccion para guardar\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.comentario == '') {\n        toastr.error(\"Debes agregar un comentario\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.fecha == '') {\n        toastr.error(\"Debes agregar la fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (total_haber.toFixed(2) != total_debe.toFixed(2)) {\n        toastr.error(\"El Total de Debe y Haber no coinciden\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.diarios.debe[0].fecha = this.diarios.fecha;\n        var registro = {\n          debe: this.diarios.debe,\n          haber: this.diarios.haber,\n          comentario: this.diarios.comentario,\n          fecha: this.diarios.fecha\n        };\n        this.registros.push(registro); //añadimos el la variable persona al array\n        //Limpiamos los campos\n\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.diarios.debe = [];\n        this.diarios.haber = [];\n        this.diarios.comentario = '';\n        this.diarios.ajustado = false;\n        this.totalDebe();\n        this.totalHaber();\n        this.limpiar();\n        $('#as-transaccion').modal('hide');\n      }\n    },\n    debeEditRegister: function debeEditRegister(id) {\n      var register = JSON.parse(JSON.stringify(this.registros));\n      this.update = true;\n      this.registerindex = id;\n      this.diarios.debe = [];\n      this.diarios.haber = [];\n      this.diarios.debe = register[id].debe;\n      this.diarios.haber = register[id].haber;\n      this.diarios.comentario = register[id].comentario;\n      this.diarios.fecha = register[id].fecha; // this.diarios.tipo = register[id].tipo;\n      // console.log(this.registros[id]);\n\n      $('#as-transaccion').modal('show');\n    },\n    deleteRegistro: function deleteRegistro(id) {\n      var _this39 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este registro??',\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro se elimino', 'success');\n\n          _this39.registros.splice(id, 1);\n\n          _this39.totalDebe();\n\n          _this39.totalHaber();\n        }\n      });\n    },\n    updaterRegister: function updaterRegister() {\n      var id = this.registerindex;\n      var total_debe = 0;\n      var total_haber = 0;\n      this.diarios.debe.forEach(function (debe, id) {\n        var saldo = debe.saldo;\n        total_debe += Number(saldo);\n      });\n      this.diarios.haber.forEach(function (haber, id) {\n        var saldo = haber.saldo;\n        total_haber += Number(saldo);\n      });\n\n      if (this.diarios.debe == 0) {\n        toastr.error(\"No tienes transaccion para guardar\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.comentario.trim() === '') {\n        toastr.error(\"Debes agregar un comentario\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.diarios.fecha.trim() === '') {\n        toastr.error(\"Debes agregar la fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (total_haber != total_debe) {\n        toastr.error(\"El Total de Debe y Haber no coinciden\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.diarios.debe[0].fecha = this.diarios.fecha;\n        this.registros[id].debe = this.diarios.debe;\n        this.registros[id].haber = this.diarios.haber;\n        this.registros[id].comentario = this.diarios.comentario;\n        this.registros[id].fecha = this.diarios.fecha;\n        this.diarios.debe = [];\n        this.diarios.haber = [];\n        this.diarios.comentario = '';\n        this.diarios.fecha = ''; // this.diarios.tipo             = '';\n\n        this.diarios.ajustado = false;\n        this.totalDebe();\n        this.totalHaber();\n        this.limpiar(); // \n\n        $('#as-transaccion').modal('hide');\n      }\n    },\n    agregarEdit: function agregarEdit() {\n      var haber = {\n        fecha: this.diario.haber.fecha,\n        nom_cuenta: this.diario.haber.nom_cuenta,\n        saldo: this.diario.haber.saldo\n      };\n      this.edit.haber.push(haber); //añadimos el la variable persona al array\n      //Limpiamos los campos\n\n      toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.diario.haber.fecha = '';\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n    },\n    agregarEditPasivo: function agregarEditPasivo() {\n      var debe = {\n        fecha: '',\n        nom_cuenta: this.diario.debe.nom_cuenta,\n        saldo: this.diario.debe.saldo\n      };\n      this.edit.debe.push(debe); //añadimos el la variable persona al array\n      //Limpiamos los campos\n\n      toastr.success(\"Activo agregado correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n    },\n    haberEdit: function haberEdit(index) {\n      var edit = this.edit;\n      this.cuentaindex = index;\n      this.diario.haber.nom_cuenta = edit.haber[index].nom_cuenta;\n      this.diario.haber.saldo = edit.haber[index].saldo;\n      $('#haber_a').modal('show');\n    },\n    updateHaber: function updateHaber() {\n      var id = this.diario.haber.nom_cuenta;\n      var index = this.diario.haber.index;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      console.log(cuenta);\n      var valor = this.diario.haber.saldo; // if (cuenta[0].porcentual == 1) {\n      //   let calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n      //   this.diarios.haber[index].nom_cuenta = cuenta[0].nombre;\n      //   this.diarios.haber[index].saldo      = calculo;\n      // }else{\n\n      this.diarios.haber[index].cuenta_id = id;\n      this.diarios.haber[index].nom_cuenta = cuenta[0].nombre;\n      this.diarios.haber[index].saldo = valor; // }\n\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n    },\n    habediarioEdit: function habediarioEdit(index) {\n      this.diario.debe.fecha = '';\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n      this.diario.haber.index = index;\n      var id_cuenta = this.diarios.haber[index].cuenta_id;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id_cuenta;\n      });\n      console.log(cuenta); // if (cuenta[0].porcentual == 1){\n      //   this.diario.haber.nom_cuenta = id_cuenta;\n      //   this.diario.haber.saldo      = '';\n      // }else{\n\n      this.diario.haber.nom_cuenta = id_cuenta;\n      this.diario.haber.saldo = this.diarios.haber[index].saldo; // }\n\n      this.diario.haber.edit = true;\n      $('#haber-asiento-tab').tab('show');\n    },\n    updateHaber1: function updateHaber1() {\n      var id = this.cuentaindex;\n      this.diarios.haber[id].nom_cuenta = this.diario.haber.nom_cuenta;\n      this.diarios.haber[id].saldo = this.diario.haber.saldo;\n      $('#haber_d').modal('hide');\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n    },\n    haberDelete: function haberDelete(index) {\n      this.edit.haber.splice(index, 1);\n    },\n    debediairoEdit: function debediairoEdit(index) {\n      this.diario.haber.nom_cuenta = '';\n      this.diario.haber.saldo = '';\n      this.diario.haber.edit = false;\n      this.diario.debe.index = index; // this.cuentaindex     = index;\n\n      var cuenta_id = this.diarios.debe[index].cuenta_id;\n\n      if (this.diarios.debe[index].fecha !== '') {\n        this.diario.debe.fecha = this.diarios.debe[index].fecha;\n      } else {\n        this.diario.debe.fecha = '';\n      }\n\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == cuenta_id;\n      }); // console.log(cuenta)\n      // if (cuenta[0].porcentual == 1){\n      //   this.diario.debe.nom_cuenta = cuenta_id;\n      //   this.diario.debe.saldo      = '';\n      // }else{\n\n      this.diario.debe.nom_cuenta = cuenta_id;\n      this.diario.debe.saldo = this.diarios.debe[index].saldo; // }\n\n      this.diario.debe.edit = true;\n      $('#debe-asiento-tab').tab('show');\n    },\n    cancelarEdicion: function cancelarEdicion(cuenta) {\n      if (cuenta == 'debe') {\n        this.diario.debe.fecha = '';\n        this.diario.debe.nom_cuenta = '';\n        this.diario.debe.saldo = '';\n        this.diario.debe.edit = false;\n      } else {\n        this.diario.haber.nom_cuenta = '';\n        this.diario.haber.saldo = '';\n        this.diario.haber.edit = false;\n      }\n    },\n    updateDebe: function updateDebe() {\n      var id = this.diario.debe.nom_cuenta;\n      var index = this.diario.debe.index;\n      var cuenta = this.cuentas.filter(function (x) {\n        return x.id == id;\n      });\n      console.log(cuenta);\n      var valor = this.diario.debe.saldo;\n\n      if (this.diario.debe.fecha !== '') {\n        this.diarios.debe[index].fecha = this.diario.debe.fecha;\n      } // if (cuenta[0].porcentual == 1) {\n      //   let calculo = this.valorPorcentual(cuenta[0].porcentaje, valor);\n      //   this.diarios.debe[index].nom_cuenta = cuenta[0].nombre;\n      //   this.diarios.debe[index].saldo      = calculo;\n      // }else{\n\n\n      this.diarios.debe[index].nom_cuenta = cuenta[0].nombre;\n      this.diarios.debe[index].saldo = valor; // }\n\n      this.diarios.debe[index].cuenta_id = id;\n\n      if (this.diario.debe.fecha !== '') {\n        this.diario.debe.fecha = '';\n      }\n\n      this.diario.debe.nom_cuenta = '';\n      this.diario.debe.saldo = '';\n      this.diario.debe.edit = false;\n    },\n    debeDelete: function debeDelete(index) {\n      this.edit.debe.splice(index, 1);\n    },\n    totalDebeBi: function totalDebeBi() {\n      var balan = this.balanceInicial;\n      var total = 0;\n      balan.debe.forEach(function (obj, index) {\n        total += Number(obj.saldo);\n      }); // console.log(total);        \n\n      this.balanceInicial.totaldebe = total;\n    },\n    totalHaberBi: function totalHaberBi() {\n      var balan = this.balanceInicial;\n      var total = 0;\n      balan.haber.forEach(function (obj, index) {\n        total += Number(obj.saldo);\n      }); // console.log(total);        \n\n      this.balanceInicial.totalhaber = total;\n    },\n    totalDebe: function totalDebe() {\n      this.pasan.debe = 0;\n      var regis = this.registros;\n      var total = 0;\n      regis.forEach(function (obj, index) {\n        obj.debe.forEach(function (sal, id) {\n          total += Number(sal.saldo);\n        });\n      }); // console.log(total);\n\n      this.pasan.debe = this.balanceInicial.totaldebe + total;\n    },\n    totalHaber: function totalHaber() {\n      this.pasan.haber = 0;\n      var regis = this.registros;\n      var total = 0;\n      regis.forEach(function (obj, index) {\n        obj.haber.forEach(function (sal, id) {\n          total += Number(sal.saldo);\n        });\n      }); // console.log(total);  \n\n      this.pasan.haber = this.balanceInicial.totalhaber + total;\n    },\n    guardarDiario: function guardarDiario() {\n      if (this.registros.length == 0) {\n        toastr.error('No tienes registros para guardar', \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        // console.log(union)\n        var _this = this;\n\n        var url = '/sistema/admin/taller/asiento-cierre';\n        axios.post(url, {\n          id: _this.id_taller,\n          registro: _this.registros,\n          nombre: _this.nombre,\n          total_debe: _this.pasan.debe,\n          total_haber: _this.pasan.haber\n        }).then(function (response) {\n          if (response.data.success == false) {\n            toastr.error(response.data.message, \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.success == 'act') {\n            toastr.success(\"Asiento de Cierre Actualizado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            mayor_general.obtenerDiarioGeneral();\n            mayor_general.obtenerAsientoCierre();\n          } else {\n            toastr.success(\"Asiento de Cierre Creado Correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            _this.dato = response.data;\n            mayor_general.obtenerDiarioGeneral();\n            mayor_general.obtenerAsientoCierre(); //\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerAsientoCierre: function obtenerAsientoCierre() {\n      var _this40 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/asiento-cierre-obtener';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.registros = response.data.registros;\n          _this.nombre = response.data.nombre;\n\n          _this40.totalDebe();\n\n          _this40.totalHaber();\n\n          toastr.success(\"Diairo General cargado Correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////KARDEX ///////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar kardex = new Vue({\n  el: \"#kardex\",\n  data: {\n    id_taller: taller,\n    exis: {\n      cantidad: '',\n      precio: '',\n      total: ''\n    },\n    producto: '',\n    producto_id: '',\n    productos: [],\n    nombre: '',\n    suman: {\n      ingreso_cantidad: 0,\n      ingreso_total: 0,\n      egreso_cantidad: 0,\n      egreso_total: 0,\n      muestra: 0\n    },\n    datos_transacciones: '',\n    totales: {\n      cantidad: '',\n      precio: '',\n      subtotal: '',\n      total: ''\n    },\n    prueba: {\n      cantidad: {\n        inventario_inicial: '',\n        adquicisiones: '',\n        ventas: '',\n        inventario_final: ''\n      },\n      precio: {\n        inventario_inicial: '',\n        adquicisiones: '',\n        ventas: '',\n        inventario_final: ''\n      }\n    },\n    ejercicio: [],\n    actuingreso: {\n      estado: false,\n      index: ''\n    },\n    modales: {\n      modal_ingreso: [],\n      existencia_ingreso: false,\n      modal_devolucion_compra: [],\n      modal_egreso: [],\n      modal_devolucion_venta: []\n    },\n    actuegreso: {\n      estado: false,\n      index: '',\n      tipo: false\n    },\n    egresos: [],\n    existencias: [],\n    transacciones: [],\n    update: false,\n    inicial: {\n      fecha: '',\n      movimiento: '',\n      cantidad: '',\n      precio: '',\n      total: ''\n    },\n    edit: {\n      egreso: {\n        cantidad: '',\n        precio: '',\n        total: '',\n        temp: ''\n      }\n    },\n    movimientos: [],\n    transaccion: {\n      fecha: '',\n      movimiento: '',\n      ingreso: {\n        cantidad: '',\n        precio: '',\n        total: ''\n      },\n      egreso: {\n        cantidad: '',\n        precio: '',\n        total: '',\n        temp: '',\n        edit: false,\n        add: false,\n        active: false\n      },\n      existencia: {\n        cantidad: '',\n        precio: '',\n        total: ''\n      },\n      exis: {\n        cantidad: '',\n        precio: ''\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerKardexFifo();\n  },\n  methods: {\n    VueSweetAlert2: function VueSweetAlert2(component, propsData) {\n      Swal.fire({\n        html: '<div id=\"VueSweetAlert2\"></div>',\n        showConfirmButton: false,\n        showCloseButton: true,\n        heightAuto: true,\n        customClass: 'swal-wide',\n        willOpen: function willOpen() {\n          var ComponentClass = Vue.extend(Vue.component(component));\n          var instance = new ComponentClass({\n            propsData: propsData\n          });\n          instance.$mount();\n          document.getElementById('VueSweetAlert2').appendChild(instance.$el);\n        }\n      });\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    reverseFecha: function reverseFecha(fecha) {\n      var date = fecha.split('/').reverse().join('-');\n      return date;\n    },\n    sumasTotales: function sumasTotales() {\n      var transacciones = this.transacciones;\n      var in_cantidad = 0;\n      var in_total = 0;\n      var eg_cantidad = 0;\n      var eg_total = 0; //INGRESO CANTIDAD\n\n      transacciones.forEach(function (transaccion, i) {\n        transaccion.forEach(function (ingreso_cantidad, id) {\n          var temp = ingreso_cantidad.ingreso_cantidad;\n\n          if (temp != null && temp !== '') {\n            in_cantidad += parseInt(temp); // console.log(temp);\n          }\n        });\n      });\n      this.suman.ingreso_cantidad = in_cantidad; //INGRESO TOTAL\n\n      transacciones.forEach(function (transaccion, i) {\n        transaccion.forEach(function (ingreso_total, id) {\n          var temp1 = ingreso_total.ingreso_total;\n\n          if (temp1 != null && temp1 !== '') {\n            in_total += Number(temp1); // console.log(temp1);\n          }\n        });\n      });\n      this.suman.ingreso_total = in_total.toFixed(2);\n      console.log(in_total); //EGRESO CANTIDAD\n\n      transacciones.forEach(function (transaccion, i) {\n        transaccion.forEach(function (egreso_cantidad, id) {\n          var temp = egreso_cantidad.egreso_cantidad;\n\n          if (temp != null && temp !== '') {\n            eg_cantidad += parseInt(temp); // console.log(temp);\n          }\n        });\n      });\n      this.suman.egreso_cantidad = eg_cantidad; //EGRESO TOTAL\n\n      transacciones.forEach(function (transaccion, i) {\n        transaccion.forEach(function (egreso_total, id) {\n          var temp1 = egreso_total.egreso_total;\n\n          if (temp1 != null && temp1 !== '') {\n            eg_total += Number(temp1); // console.log(temp1);\n          }\n        });\n      });\n      this.suman.egreso_total = eg_total.toFixed(2);\n      console.log(in_total);\n    },\n    modalIngreso: function modalIngreso() {\n      if (this.transacciones.length >= 1) {\n        var existencias = JSON.parse(JSON.stringify(this.existencias));\n        var ventas = JSON.parse(JSON.stringify(this.existencias));\n        this.modales.modal_ingreso = existencias;\n        this.modales.modal_devolucion_venta = ventas;\n      }\n\n      $('#ingreso').modal('show');\n      $('#tableingreso-tab').tab('show');\n    },\n    modalInicial: function modalInicial() {\n      this.cerrarInicial();\n\n      if (this.transacciones.length >= 1) {\n        var i = this.transacciones.length - 1;\n        console.log(this.transacciones[i]);\n        this.movimientos = this.transacciones[i];\n      }\n\n      $('#saldo_inicial').modal('show');\n    },\n    modalEgreso: function modalEgreso() {\n      if (this.transacciones.length >= 1) {\n        var existencias = JSON.parse(JSON.stringify(this.existencias));\n        var compras = JSON.parse(JSON.stringify(this.existencias));\n        this.modales.modal_egreso = existencias;\n        this.modales.modal_devolucion_compra = compras;\n      }\n\n      $('#egreso').modal('show');\n      $('#tablaegreso-tab').tab('show');\n    },\n    totalIng: function totalIng(id) {\n      var i = id;\n      var exis = this.totales.total;\n      var cantidad = Number(this.ejercicio[i].ingreso_cantidad);\n      var precio = Number(this.ejercicio[i].ingreso_precio);\n      var total1 = this.ejercicio[i].ingreso_total;\n      var multiplicacion = cantidad * precio;\n      this.ejercicio[i].ingreso_total = multiplicacion.toFixed(2);\n    },\n    ventaIng: function ventaIng(id) {\n      var i = id;\n      var exis = this.totales.total;\n      var cantidad = Number(this.ejercicio[i].ingreso_cantidad);\n      var precio = Number(this.ejercicio[i].ingreso_precio);\n      var total1 = this.ejercicio[i].ingreso_total;\n      var multiplicacion = cantidad * precio;\n      this.ejercicio[i].ingreso_total = multiplicacion.toFixed(2);\n    },\n    actuaIng: function actuaIng(id) {\n      var i = id;\n      var exis = this.totales.total;\n      var cantidad = Number(this.modales.modal_ingreso[i].ingreso_cantidad);\n      var precio = Number(this.modales.modal_ingreso[i].ingreso_precio);\n      var total1 = this.modales.modal_ingreso[i].ingreso_total;\n      var multiplicacion = cantidad * precio;\n      this.modales.modal_ingreso[i].ingreso_total = multiplicacion.toFixed(2);\n      var suma = multiplicacion + exis;\n      this.totales.subtotal = suma;\n      toastr.error(\"Datos Actualizado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    actuaVenta: function actuaVenta(id) {\n      var i = id;\n      var exis = this.totales.total;\n      var cantidad = Number(this.modales.modal_devolucion_venta[i].ingreso_cantidad);\n      var precio = Number(this.modales.modal_devolucion_venta[i].ingreso_precio);\n      var total1 = this.modales.modal_devolucion_venta[i].ingreso_total;\n      var multiplicacion = cantidad * precio;\n      this.modales.modal_devolucion_venta[i].ingreso_total = multiplicacion.toFixed(2);\n      var suma = multiplicacion + exis;\n      this.totales.subtotal = suma;\n      toastr.error(\"Datos Actualizado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    bajarExis: function bajarExis(estado) {\n      var id = this.transacciones.length + 1;\n      var existencia = {\n        identificador: id,\n        fecha: '',\n        movimiento: '',\n        tipo: 'existencia',\n        ingreso_cantidad: '',\n        ingreso_precio: '',\n        ingreso_total: '',\n        egreso_cantidad: '',\n        egreso_precio: '',\n        egreso_total: '',\n        existencia_cantidad: this.exis.cantidad,\n        existencia_precio: this.exis.precio,\n        existencia_total: ''\n      };\n      this.modales.modal_ingreso.unshift(existencia);\n      toastr.success(\"Agregado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.exis.cantidad = '';\n      this.exis.precio = '';\n      this.modales.existencia_ingreso = false;\n    },\n    actuExiIng: function actuExiIng(estado) {\n      var id = this.ejercicio[0].id;\n      var existencia = {\n        identificador: id,\n        fecha: '',\n        movimiento: '',\n        tipo: 'existencia',\n        ingreso_cantidad: '',\n        ingreso_precio: '',\n        ingreso_total: '',\n        egreso_cantidad: '',\n        egreso_precio: '',\n        egreso_total: '',\n        existencia_cantidad: this.exis.cantidad,\n        existencia_precio: this.exis.precio,\n        existencia_total: ''\n      };\n      this.ejercicio.unshift(existencia);\n      toastr.success(\"Agregado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    agregarTran: function agregarTran() {\n      if (this.inicial.fecha.trim() === '' || this.inicial.movimiento.trim() === '' || this.inicial.cantidad.trim() === '' || this.inicial.precio.trim() === '') {\n        toastr.error(\"Todos lo campos son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _existencia;\n\n        this.inicial.total = Number(this.inicial.cantidad * this.inicial.precio).toFixed(2);\n        var existencia = (_existencia = {\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: ''\n        }, _defineProperty(_existencia, \"tipo\", 'existencia'), _defineProperty(_existencia, \"ingreso_cantidad\", ''), _defineProperty(_existencia, \"ingreso_precio\", ''), _defineProperty(_existencia, \"ingreso_total\", ''), _defineProperty(_existencia, \"egreso_cantidad\", ''), _defineProperty(_existencia, \"egreso_precio\", ''), _defineProperty(_existencia, \"egreso_total\", ''), _defineProperty(_existencia, \"existencia_cantidad\", this.inicial.cantidad), _defineProperty(_existencia, \"existencia_precio\", this.inicial.precio), _defineProperty(_existencia, \"existencia_total\", ''), _existencia);\n        this.existencias.push(existencia);\n        var registro = [];\n        var array = {\n          tipo: 'inicial',\n          fecha: this.inicial.fecha,\n          movimiento: this.inicial.movimiento,\n          ingreso_cantidad: '',\n          ingreso_precio: '',\n          egreso_total: '',\n          egreso_cantidad: '',\n          egreso_precio: '',\n          ingreso_total: '',\n          existencia_cantidad: this.inicial.cantidad,\n          existencia_precio: this.inicial.precio,\n          existencia_total: this.inicial.total\n        };\n        registro.push(array);\n        this.transacciones.unshift(registro);\n        toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.totales.cantidad = this.inicial.cantidad;\n        this.totales.precio = this.inicial.precio;\n        this.totales.total = this.inicial.total;\n        this.inicial.fecha = '';\n        this.inicial.movimiento = '';\n        this.inicial.cantidad = '';\n        this.inicial.precio = '';\n        $('#saldo_inicial').modal('hide');\n      }\n\n      this.sumasTotales();\n      this.ultimaExistencia();\n    },\n    ultimaExistencia: function ultimaExistencia() {\n      var a = this.transacciones.length;\n      var u = this.transacciones.length - 1;\n\n      if (a >= 1) {\n        var ultima = this.transacciones[u];\n        var filtro = ultima.filter(function (x) {\n          return x.existencia_cantidad !== '' && x.existencia_cantidad !== null || x.existencia_precio !== '' && x.existencia_precio !== null;\n        });\n        var exis = [];\n        filtro.forEach(function (existencia, id) {\n          var _agregar;\n\n          var agregar = (_agregar = {\n            tipo: 'existencia',\n            fecha: '',\n            movimiento: ''\n          }, _defineProperty(_agregar, \"tipo\", 'existencia'), _defineProperty(_agregar, \"ingreso_cantidad\", ''), _defineProperty(_agregar, \"ingreso_precio\", ''), _defineProperty(_agregar, \"ingreso_total\", ''), _defineProperty(_agregar, \"egreso_cantidad\", ''), _defineProperty(_agregar, \"egreso_precio\", ''), _defineProperty(_agregar, \"egreso_total\", ''), _defineProperty(_agregar, \"existencia_cantidad\", existencia.existencia_cantidad), _defineProperty(_agregar, \"existencia_precio\", existencia.existencia_precio), _defineProperty(_agregar, \"existencia_total\", ''), _agregar);\n          exis.push(agregar);\n        });\n        console.log(this.transacciones[u]);\n        this.existencias = JSON.parse(JSON.stringify(exis));\n      } else {\n        this.existencias = [];\n      }\n    },\n    cerrarInicial: function cerrarInicial() {\n      this.update = false;\n      this.inicial.fecha = '';\n      this.inicial.movimiento = '';\n      this.inicial.cantidad = '';\n      this.inicial.precio = '';\n      this.inicial.fecha = '';\n      this.inicial.movimiento = '';\n      this.inicial.cantidad = '';\n      this.inicial.precio = '';\n    },\n    actualizarInicial: function actualizarInicial() {\n      if (this.inicial.fecha.trim() === '' || this.inicial.movimiento.trim() === '' || this.inicial.cantidad.trim() === '' || this.inicial.precio.trim() === '') {\n        toastr.error(\"Todos lo campos son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        // let fecha = this.formatoFecha(this.inicial.fecha)\n        this.transacciones[0][0].fecha = this.inicial.fecha;\n        this.transacciones[0][0].movimiento = this.inicial.movimiento;\n        this.transacciones[0][0].existencia_cantidad = this.inicial.cantidad;\n        this.transacciones[0][0].existencia_precio = this.inicial.precio;\n        var total = JSON.parse(JSON.stringify(this.inicial.total));\n        var newTotal = Number(this.inicial.cantidad) * Number(this.inicial.precio);\n        this.inicial.total = newTotal;\n        this.transacciones[0][0].existencia_total = newTotal.toFixed(2);\n        var transacciones = this.transacciones;\n        var identificador = transacciones.length - 1;\n        this.totales.cantidad = this.inicial.cantidad;\n        this.totales.precio = this.inicial.precio; // this.totales.total         = this.inicial.total;\n\n        this.update = false;\n        this.inicial.fecha = '';\n        this.inicial.movimiento = '';\n        this.inicial.cantidad = '';\n        this.inicial.precio = '';\n        $('#saldo_inicial').modal('hide');\n        this.ultimaExistencia();\n      }\n    },\n    agregarIngreso: function agregarIngreso() {\n      if (this.transaccion.fecha.trim() === '' || this.transaccion.movimiento.trim() === '' || this.transaccion.ingreso.cantidad.trim() === '' || this.transaccion.ingreso.precio.trim() === '') {\n        toastr.error(\"Todos los campos son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.transacciones.length + 1;\n        this.transaccion.ingreso.total = Number(this.transaccion.ingreso.cantidad * this.transaccion.ingreso.precio).toFixed(2);\n        var calculo = Number(this.transaccion.ingreso.total + this.totales.total);\n        var array = {\n          identificador: id,\n          tipo: 'ingreso',\n          fecha: this.transaccion.fecha,\n          movimiento: this.transaccion.movimiento,\n          ingreso_cantidad: this.transaccion.ingreso.cantidad,\n          ingreso_precio: this.transaccion.ingreso.precio,\n          ingreso_total: this.transaccion.ingreso.total,\n          egreso_cantidad: '',\n          egreso_precio: '',\n          egreso_total: '',\n          existencia_cantidad: this.transaccion.existencia.cantidad,\n          existencia_precio: this.transaccion.existencia.precio,\n          existencia_total: ''\n        };\n        this.modales.modal_ingreso.push(array);\n        toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.transaccion.fecha = '';\n        this.transaccion.movimiento = '';\n        this.transaccion.ingreso.cantidad = '';\n        this.transaccion.ingreso.precio = '';\n        this.transaccion.ingreso.cantidad = '';\n        this.transaccion.ingreso.precio = '';\n        this.transaccion.exis.cantidad = this.transaccion.existencia.cantidad;\n        this.transaccion.exis.precio = this.transaccion.existencia.precio;\n        this.transaccion.existencia.cantidad = '';\n        this.transaccion.existencia.precio = '';\n      }\n    },\n    borrarIngreso: function borrarIngreso(index, tipo) {\n      var id = index;\n\n      if (tipo == 'ingreso') {\n        if (this.ejercicio[index].tipo == 'ingreso') {\n          console.log('Si eliminas este ingreso se borrara el movimiento');\n        } else if (this.ejercicio[index].tipo == 'ingreso_venta') {\n          console.log('Si eliminas este ingreso se borrara el movimiento');\n        } else {\n          this.ejercicio.splice(index, 1);\n        }\n\n        return;\n      }\n\n      if (tipo == 'venta') {\n        if (this.modales.modal_devolucion_venta[id].tipo == 'ingreso_venta') {\n          this.modales.modal_devolucion_venta.splice(index, 1);\n        } else if (this.modales.modal_devolucion_venta[id].tipo == 'existencia') {\n          this.modales.modal_devolucion_venta.splice(index, 1);\n        }\n      } else {\n        if (this.modales.modal_ingreso[id].tipo == 'ingreso') {\n          this.modales.modal_ingreso.splice(index, 1);\n        } else if (this.modales.modal_ingreso[id].tipo == 'existencia') {\n          this.modales.modal_ingreso.splice(index, 1);\n        }\n      }\n    },\n    agregarTransaccion: function agregarTransaccion(tipo) {\n      if (tipo == 'ingreso') {\n        var prueba1 = this.modales.modal_ingreso.filter(function (x) {\n          return x.tipo == 'ingreso';\n        });\n\n        if (prueba1.length == 0) {\n          toastr.error(\"No puedes enviar solo existencias\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          return;\n        }\n\n        var ingreso = this.modales.modal_ingreso.filter(function (x) {\n          return x.tipo == 'ingreso';\n        });\n        var id = this.transacciones.length + 1;\n\n        var _filtro_existencias = this.modales.modal_ingreso.filter(function (x) {\n          return x.tipo == 'existencia';\n        });\n\n        var existencia = {\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: '',\n          ingreso_cantidad: '',\n          ingreso_precio: '',\n          ingreso_total: '',\n          egreso_cantidad: '',\n          egreso_precio: '',\n          egreso_total: '',\n          existencia_cantidad: ingreso[0].existencia_cantidad,\n          existencia_precio: ingreso[0].existencia_precio,\n          existencia_total: ''\n        };\n\n        _filtro_existencias.push(existencia);\n\n        this.existencias = JSON.parse(JSON.stringify(_filtro_existencias));\n        var exi_total = 0;\n\n        _filtro_existencias.forEach(function (existencia, i) {\n          var cantidad = existencia.existencia_cantidad;\n          var precio = existencia.existencia_precio;\n          var subtotal = Number(cantidad) * Number(precio);\n          exi_total += Number(subtotal);\n        });\n\n        var ultimo = this.modales.modal_ingreso.length - 1;\n        this.modales.modal_ingreso[ultimo].existencia_total = exi_total.toFixed(2);\n        this.transacciones.push(this.modales.modal_ingreso);\n        this.modales.modal_ingreso = [];\n        this.totales.total = exi_total;\n        console.log(exi_total);\n        this.suman.muestra = exi_total;\n        this.transaccion.ingreso.total = '';\n        $('#ingreso').modal('hide');\n        this.sumasTotales();\n        this.ultimaExistencia();\n      } else {\n        var _existencia3;\n\n        var prueba = this.modales.modal_devolucion_venta.filter(function (x) {\n          return x.tipo == 'ingreso_venta';\n        });\n\n        if (prueba.length == 0) {\n          toastr.error(\"No puedes enviar solo existencias\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          return;\n        }\n\n        var venta = this.modales.modal_devolucion_venta.filter(function (x) {\n          return x.tipo == 'ingreso_venta';\n        });\n\n        var _id = this.transacciones.length + 1;\n\n        var _filtro_existencias2 = this.modales.modal_devolucion_venta.filter(function (x) {\n          return x.tipo == 'existencia';\n        });\n\n        var _existencia2 = (_existencia3 = {\n          identificador: _id,\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: ''\n        }, _defineProperty(_existencia3, \"tipo\", 'existencia'), _defineProperty(_existencia3, \"ingreso_cantidad\", ''), _defineProperty(_existencia3, \"ingreso_precio\", ''), _defineProperty(_existencia3, \"ingreso_total\", ''), _defineProperty(_existencia3, \"egreso_cantidad\", ''), _defineProperty(_existencia3, \"egreso_precio\", ''), _defineProperty(_existencia3, \"egreso_total\", ''), _defineProperty(_existencia3, \"existencia_cantidad\", venta[0].existencia_cantidad), _defineProperty(_existencia3, \"existencia_precio\", venta[0].existencia_precio), _defineProperty(_existencia3, \"existencia_total\", ''), _existencia3);\n\n        _filtro_existencias2.unshift(_existencia2);\n\n        this.existencias = JSON.parse(JSON.stringify(_filtro_existencias2));\n        var _exi_total = 0;\n\n        _filtro_existencias2.forEach(function (existencia, i) {\n          var cantidad = existencia.existencia_cantidad;\n          var precio = existencia.existencia_precio;\n          var subtotal = Number(cantidad) * Number(precio);\n          _exi_total += Number(subtotal);\n        });\n\n        var _ultimo = this.modales.modal_devolucion_venta.length - 1;\n\n        this.modales.modal_devolucion_venta[_ultimo].existencia_total = _exi_total.toFixed(2);\n        this.totales.total = _exi_total;\n        console.log(_exi_total);\n        this.transacciones.push(this.modales.modal_devolucion_venta);\n        this.modales.modal_devolucion_venta = [];\n        this.transaccion.ingreso.cantidad = '';\n        this.transaccion.ingreso.precio = '';\n        this.transaccion.ingreso.total = '';\n        $('#ingreso').modal('hide');\n        this.sumasTotales();\n        this.ultimaExistencia();\n      }\n    },\n    editarTransaccion: function editarTransaccion(index, id) {\n      // let id = index;\n      if (this.transacciones[index][id].tipo == 'inicial') {\n        this.update = true;\n        this.inicial.fecha = this.transacciones[index][id].fecha;\n        this.inicial.movimiento = this.transacciones[index][id].movimiento;\n        this.inicial.cantidad = this.transacciones[index][id].existencia_cantidad;\n        this.inicial.precio = this.transacciones[index][id].existencia_precio;\n        $('#saldo_inicial').modal('show');\n      } else if (this.transacciones[index][id].tipo == 'ingreso') {\n        this.actuingreso.index = index;\n        this.actuingreso.estado = true;\n        this.actuegreso.estado = false;\n        var second = JSON.parse(JSON.stringify(this.transacciones[index]));\n        this.ejercicio = second;\n      } else if (this.transacciones[index][id].tipo == 'egreso') {\n        this.actuegreso.index = index;\n        this.actuegreso.estado = true;\n        this.actuingreso.estado = false;\n        this.actuegreso.tipo = true;\n        var egre = JSON.parse(JSON.stringify(this.transacciones[index]));\n        this.egresos = egre;\n      } else if (this.transacciones[index][id].tipo == 'ingreso_venta') {\n        this.actuingreso.index = index;\n        this.actuingreso.estado = true;\n        this.actuegreso.estado = false;\n        var venta = JSON.parse(JSON.stringify(this.transacciones[index]));\n        this.ejercicio = venta;\n      } else if (this.transacciones[index][id].tipo == 'egreso_compra') {\n        this.actuegreso.index = index;\n        this.actuegreso.estado = true;\n        this.actuingreso.estado = false;\n        var comprea = JSON.parse(JSON.stringify(this.transacciones[index]));\n        this.egresos = comprea;\n      }\n    },\n    cancelarActualizacion: function cancelarActualizacion(tipo) {\n      if (tipo == 'egresos') {\n        this.actuegreso.index = '';\n        this.actuegreso.estado = false;\n        this.actuegreso.tipo = false;\n        this.egresos = [];\n      } else if (tipo == 'ingresos') {\n        this.actuingreso.index = '';\n        this.actuingreso.estado = false;\n        this.ejercicio = [];\n      }\n    },\n    actualizarIngreso: function actualizarIngreso() {\n      var _existencia4;\n\n      var ingreso = this.ejercicio.filter(function (x) {\n        return x.tipo == 'ingreso' || x.tipo == 'ingreso_venta';\n      });\n      var id = this.transacciones.length + 1;\n      var multi = Number(ingreso[0].ingreso_cantidad * ingreso[0].ingreso_precio).toFixed(2);\n      ingreso[0].ingreso_total = multi;\n      var filtro_existencias = this.ejercicio.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n      var existencia = (_existencia4 = {\n        identificador: id,\n        tipo: 'existencia',\n        fecha: '',\n        movimiento: ''\n      }, _defineProperty(_existencia4, \"tipo\", 'existencia'), _defineProperty(_existencia4, \"ingreso_cantidad\", ''), _defineProperty(_existencia4, \"ingreso_precio\", ''), _defineProperty(_existencia4, \"ingreso_total\", ''), _defineProperty(_existencia4, \"egreso_cantidad\", ''), _defineProperty(_existencia4, \"egreso_precio\", ''), _defineProperty(_existencia4, \"egreso_total\", ''), _defineProperty(_existencia4, \"existencia_cantidad\", ingreso[0].existencia_cantidad), _defineProperty(_existencia4, \"existencia_precio\", ingreso[0].existencia_precio), _defineProperty(_existencia4, \"existencia_total\", ''), _existencia4);\n      filtro_existencias.push(existencia);\n      var exi_total = 0;\n      filtro_existencias.forEach(function (existencia, i) {\n        var cantidad = existencia.existencia_cantidad;\n        var precio = existencia.existencia_precio;\n        var subtotal = Number(cantidad) * Number(precio);\n        exi_total += Number(subtotal);\n      });\n      var ultimo = this.ejercicio.length - 1;\n      this.ejercicio[ultimo].existencia_total = exi_total.toFixed(2);\n      var index = this.actuingreso.index;\n      this.transacciones[index] = this.ejercicio;\n      this.ejercicio = [];\n      this.actuingreso.estado = false;\n      this.actuingreso.index = '';\n      this.sumasTotales();\n      this.ultimaExistencia();\n    },\n    nuevoEgreso: function nuevoEgreso(metodo) {\n      if (metodo == 'agregar') {\n        this.transaccion.egreso.add = true;\n      } else if (metodo == 'cerrar') {\n        this.transaccion.egreso.add = false;\n      } else if (metodo == 'crear') {\n        if (this.edit.egreso.cantidad.trim() === '' || this.edit.egreso.precio.trim() === '') {\n          toastr.error(\"Todos lo campos son obligatorios\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n        } else {\n          var egresos = this.modales.modal_egreso.filter(function (x) {\n            return x.tipo == 'egreso';\n          });\n          var id = this.transacciones.length + 1;\n          var ultimo = egresos.length - 1;\n          this.edit.egreso.total = Number(this.edit.egreso.cantidad * this.edit.egreso.precio);\n          var array = {\n            identificacion: id,\n            tipo: 'egreso',\n            fecha: '',\n            movimiento: '',\n            egreso_cantidad: this.edit.egreso.cantidad,\n            egreso_precio: this.edit.egreso.precio,\n            egreso_total: this.edit.egreso.total,\n            existencia_cantidad: this.transaccion.existencia.cantidad,\n            existencia_precio: this.transaccion.existencia.precio,\n            existencia_total: ''\n          };\n          this.modales.modal_egreso.splice(ultimo + 1, 0, array);\n          this.edit.egreso.cantidad = '';\n          this.edit.egreso.precio = '';\n          this.edit.egreso.total = '';\n          this.transaccion.egreso.add = false;\n        }\n      }\n    },\n    agregarEgreso: function agregarEgreso(tipo) {\n      if (this.transaccion.egreso.cantidad.trim() === '' || this.transaccion.egreso.precio.trim() === '') {\n        toastr.error(\"Todos lo campos son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        if (tipo == 'compra') {\n          var _array;\n\n          var _id2 = this.transacciones.length + 1;\n\n          this.transaccion.egreso.total = Number(this.transaccion.egreso.cantidad * this.transaccion.egreso.precio).toFixed(2);\n          var calculo = Number(this.totales.total) - Number(this.transaccion.egreso.total);\n          var array = (_array = {\n            identificacion: _id2,\n            fecha: '',\n            movimiento: '',\n            tipo: 'egreso_compra'\n          }, _defineProperty(_array, \"fecha\", this.transaccion.fecha), _defineProperty(_array, \"movimiento\", this.transaccion.movimiento), _defineProperty(_array, \"ingreso_cantidad\", ''), _defineProperty(_array, \"ingreso_precio\", ''), _defineProperty(_array, \"ingreso_total\", ''), _defineProperty(_array, \"egreso_cantidad\", this.transaccion.egreso.cantidad), _defineProperty(_array, \"egreso_precio\", this.transaccion.egreso.precio), _defineProperty(_array, \"egreso_total\", this.transaccion.egreso.total), _defineProperty(_array, \"existencia_cantidad\", this.transaccion.existencia.cantidad), _defineProperty(_array, \"existencia_precio\", this.transaccion.existencia.precio), _defineProperty(_array, \"existencia_total\", ''), _array);\n          this.modales.modal_devolucion_compra.push(array);\n          toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.exis.cantidad = '';\n          this.exis.precio = '';\n          this.transaccion.fecha = '';\n          this.transaccion.movimiento = '';\n          this.transaccion.egreso.cantidad = '';\n          this.transaccion.egreso.precio = '';\n          this.transaccion.egreso.total = '';\n          this.transaccion.existencia.cantidad = '';\n          this.transaccion.existencia.precio = '';\n          return;\n        }\n\n        var egreso = this.modales.modal_egreso.filter(function (x) {\n          return x.tipo == 'egreso';\n        });\n        var id = this.transacciones.length + 1;\n\n        if (egreso.length == 0) {\n          var _array3;\n\n          this.transaccion.egreso.total = Number(this.transaccion.egreso.cantidad * this.transaccion.egreso.precio).toFixed(2);\n\n          var _calculo = Number(this.totales.total) - Number(this.transaccion.egreso.total);\n\n          var _array2 = (_array3 = {\n            identificacion: id,\n            fecha: '',\n            movimiento: '',\n            tipo: 'egreso'\n          }, _defineProperty(_array3, \"fecha\", this.transaccion.fecha), _defineProperty(_array3, \"movimiento\", this.transaccion.movimiento), _defineProperty(_array3, \"ingreso_cantidad\", ''), _defineProperty(_array3, \"ingreso_precio\", ''), _defineProperty(_array3, \"ingreso_total\", ''), _defineProperty(_array3, \"egreso_cantidad\", this.transaccion.egreso.cantidad), _defineProperty(_array3, \"egreso_precio\", this.transaccion.egreso.precio), _defineProperty(_array3, \"egreso_total\", this.transaccion.egreso.total), _defineProperty(_array3, \"existencia_cantidad\", this.transaccion.existencia.cantidad), _defineProperty(_array3, \"existencia_precio\", this.transaccion.existencia.precio), _defineProperty(_array3, \"existencia_total\", ''), _array3);\n\n          this.modales.modal_egreso.unshift(_array2);\n          toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.exis.cantidad = '';\n          this.exis.precio = '';\n          this.transaccion.fecha = '';\n          this.transaccion.movimiento = '';\n          this.transaccion.egreso.cantidad = '';\n          this.transaccion.egreso.precio = '';\n          this.transaccion.egreso.total = '';\n          this.transaccion.existencia.cantidad = '';\n          this.transaccion.existencia.precio = '';\n          this.transaccion.egreso.active = true;\n        } else {\n          var _array5;\n\n          var egresos = this.modales.modal_egreso.filter(function (x) {\n            return x.tipo == 'egreso';\n          });\n          var ultimo = egresos.length - 1;\n          var total = Number(this.modales.modal_egreso[ultimo].existencia_total);\n          this.transaccion.egreso.total = Number(this.transaccion.egreso.cantidad * this.transaccion.egreso.precio).toFixed(2);\n\n          var _calculo2 = total - Number(this.transaccion.egreso.total);\n\n          var _array4 = (_array5 = {\n            identificacion: id,\n            fecha: '',\n            movimiento: '',\n            tipo: 'egreso'\n          }, _defineProperty(_array5, \"fecha\", this.transaccion.fecha), _defineProperty(_array5, \"movimiento\", this.transaccion.movimiento), _defineProperty(_array5, \"ingreso_cantidad\", ''), _defineProperty(_array5, \"ingreso_precio\", ''), _defineProperty(_array5, \"ingreso_total\", ''), _defineProperty(_array5, \"egreso_cantidad\", this.transaccion.egreso.cantidad), _defineProperty(_array5, \"egreso_precio\", this.transaccion.egreso.precio), _defineProperty(_array5, \"egreso_total\", this.transaccion.egreso.total), _defineProperty(_array5, \"existencia_cantidad\", this.transaccion.existencia.cantidad), _defineProperty(_array5, \"existencia_precio\", this.transaccion.existencia.precio), _defineProperty(_array5, \"existencia_total\", ''), _array5);\n\n          this.modales.modal_egreso.splice(ultimo + 1, 0, _array4);\n          toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          this.exis.cantidad = '';\n          this.exis.precio = '';\n          this.transaccion.fecha = '';\n          this.transaccion.movimiento = '';\n          this.transaccion.egreso.cantidad = '';\n          this.transaccion.egreso.precio = '';\n          this.transaccion.egreso.total = '';\n          this.transaccion.existencia.cantidad = '';\n          this.transaccion.existencia.precio = '';\n        }\n      }\n    },\n    agregarEgresoNew: function agregarEgresoNew(tipo) {\n      if (this.transaccion.egreso.cantidad.trim() === '' || this.transaccion.egreso.precio.trim() === '') {\n        toastr.error(\"Cantidad y Precio son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _array6;\n\n        var transacciones = this.transacciones;\n        var index = this.actuegreso.index;\n        var ultimo = this.egresos.length - 1;\n        this.transaccion.egreso.total = Number(this.transaccion.egreso.cantidad * this.transaccion.egreso.precio).toFixed(2);\n        var array = (_array6 = {\n          identificacion: index,\n          fecha: '',\n          movimiento: '',\n          tipo: 'egreso'\n        }, _defineProperty(_array6, \"fecha\", this.transaccion.fecha), _defineProperty(_array6, \"movimiento\", this.transaccion.movimiento), _defineProperty(_array6, \"ingreso_cantidad\", ''), _defineProperty(_array6, \"ingreso_precio\", ''), _defineProperty(_array6, \"ingreso_total\", ''), _defineProperty(_array6, \"egreso_cantidad\", this.transaccion.egreso.cantidad), _defineProperty(_array6, \"egreso_precio\", this.transaccion.egreso.precio), _defineProperty(_array6, \"egreso_total\", this.transaccion.egreso.total), _defineProperty(_array6, \"existencia_cantidad\", this.transaccion.existencia.cantidad), _defineProperty(_array6, \"existencia_precio\", this.transaccion.existencia.precio), _defineProperty(_array6, \"existencia_total\", ''), _array6);\n        this.egresos.splice(ultimo + 1, 0, array);\n        this.transaccion.egreso.edit = false;\n        toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.exis.cantidad = '';\n        this.exis.precio = '';\n        this.transaccion.fecha = '';\n        this.transaccion.movimiento = '';\n        this.transaccion.egreso.cantidad = '';\n        this.transaccion.egreso.precio = '';\n        this.transaccion.egreso.total = '';\n        this.transaccion.existencia.cantidad = '';\n        this.transaccion.existencia.precio = '';\n      }\n    },\n    existenciaEgreso: function existenciaEgreso(tipo) {\n      var id = this.transacciones.length + 1;\n      var existencia = {\n        identificador: id,\n        fecha: '',\n        movimiento: '',\n        tipo: 'existencia',\n        ingreso_cantidad: '',\n        ingreso_precio: '',\n        ingreso_total: '',\n        egreso_cantidad: '',\n        egreso_precio: '',\n        egreso_total: '',\n        existencia_cantidad: this.exis.cantidad,\n        existencia_precio: this.exis.precio,\n        existencia_total: ''\n      };\n\n      if (tipo == 'compra') {\n        this.modales.modal_devolucion_compra.unshift(existencia);\n      } else {\n        this.modales.modal_egreso.push(existencia);\n      }\n\n      toastr.success(\"Agregado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.exis.cantidad = '';\n      this.exis.precio = '';\n      this.modales.existencia_ingreso = false;\n    },\n    exisEgresoAct: function exisEgresoAct(tipo) {\n      var id = this.transacciones.length + 1;\n      var existencia = {\n        identificador: id,\n        tipo: 'existencia',\n        fecha: '',\n        movimiento: '',\n        ingreso_cantidad: '',\n        ingreso_precio: '',\n        ingreso_total: '',\n        egreso_cantidad: '',\n        egreso_precio: '',\n        egreso_total: '',\n        existencia_cantidad: this.exis.cantidad,\n        existencia_precio: this.exis.precio,\n        existencia_total: ''\n      };\n\n      if (tipo == 'compra') {\n        this.egresos.unshift(existencia);\n      } else {\n        this.egresos.push(existencia);\n      }\n\n      toastr.success(\"Agregado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.exis.cantidad = '';\n      this.exis.precio = '';\n      this.modales.existencia_ingreso = false;\n    },\n    agregarEgresos: function agregarEgresos() {\n      var egresos = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'egreso';\n      });\n      var u = egresos.length - 1;\n      var existencia_total = JSON.parse(JSON.stringify(egresos[u].existencia_total));\n      var iden = this.transacciones.length + 1;\n      var exis = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n      var conteo = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n      var existencias_egresos = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'egreso' && x.existencia_cantidad > 0 && x.existencia_cantidad !== '';\n      });\n      existencias_egresos.forEach(function (existencia, id) {\n        var _agregar2;\n\n        var agregar = (_agregar2 = {\n          identificador: iden,\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: ''\n        }, _defineProperty(_agregar2, \"tipo\", 'existencia'), _defineProperty(_agregar2, \"ingreso_cantidad\", ''), _defineProperty(_agregar2, \"ingreso_precio\", ''), _defineProperty(_agregar2, \"ingreso_total\", ''), _defineProperty(_agregar2, \"egreso_cantidad\", ''), _defineProperty(_agregar2, \"egreso_precio\", ''), _defineProperty(_agregar2, \"egreso_total\", ''), _defineProperty(_agregar2, \"existencia_cantidad\", existencia.existencia_cantidad), _defineProperty(_agregar2, \"existencia_precio\", existencia.existencia_precio), _defineProperty(_agregar2, \"existencia_total\", ''), _agregar2);\n        exis.unshift(agregar);\n      });\n      this.existencias = JSON.parse(JSON.stringify(exis));\n      var exi_total = 0;\n      exis.forEach(function (existencia, i) {\n        var cantidad = existencia.existencia_cantidad;\n        var precio = existencia.existencia_precio;\n        var subtotal = Number(cantidad) * Number(precio);\n        exi_total += Number(subtotal);\n      });\n      var ultimo = this.modales.modal_egreso.length - 1;\n      this.modales.modal_egreso[ultimo].existencia_total = exi_total.toFixed(2);\n      this.totales.total = exi_total;\n      console.log(exi_total);\n      this.transacciones.push(this.modales.modal_egreso);\n      this.modales.modal_egreso = [];\n      $('#egreso').modal('hide');\n      this.transaccion.fecha = '';\n      this.transaccion.movimiento = '';\n      this.transaccion.egreso.cantidad = '';\n      this.transaccion.egreso.precio = '';\n      this.transaccion.egreso.total = '';\n      this.sumasTotales();\n      this.ultimaExistencia();\n    },\n    agregarDevolucionCompra: function agregarDevolucionCompra() {\n      var egresos = this.modales.modal_devolucion_compra.filter(function (x) {\n        return x.tipo == 'egreso_compra';\n      });\n      var u = egresos.length - 1;\n      var existencia_total = JSON.parse(JSON.stringify(egresos[u].existencia_total));\n      var iden = this.transacciones.length + 1;\n      var exis = this.modales.modal_devolucion_compra.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n      var conteo = this.modales.modal_devolucion_compra.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n      var existencias_egresos = this.modales.modal_devolucion_compra.filter(function (x) {\n        return x.tipo == 'egreso_compra' && x.existencia_cantidad > 0;\n      });\n      existencias_egresos.forEach(function (existencia, id) {\n        var _agregar3;\n\n        var agregar = (_agregar3 = {\n          identificador: iden,\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: ''\n        }, _defineProperty(_agregar3, \"tipo\", 'existencia'), _defineProperty(_agregar3, \"ingreso_cantidad\", ''), _defineProperty(_agregar3, \"ingreso_precio\", ''), _defineProperty(_agregar3, \"ingreso_total\", ''), _defineProperty(_agregar3, \"egreso_cantidad\", ''), _defineProperty(_agregar3, \"egreso_precio\", ''), _defineProperty(_agregar3, \"egreso_total\", ''), _defineProperty(_agregar3, \"existencia_cantidad\", existencia.existencia_cantidad), _defineProperty(_agregar3, \"existencia_precio\", existencia.existencia_precio), _defineProperty(_agregar3, \"existencia_total\", ''), _agregar3);\n        exis.push(agregar);\n      });\n      var exi_total = 0;\n      exis.forEach(function (existencia, i) {\n        var cantidad = existencia.existencia_cantidad;\n        var precio = existencia.existencia_precio;\n        var subtotal = Number(cantidad) * Number(precio);\n        exi_total += Number(subtotal);\n      });\n      var ultimo = this.modales.modal_devolucion_compra.length - 1;\n      this.modales.modal_devolucion_compra[ultimo].existencia_total = exi_total.toFixed(2);\n      this.totales.total = exi_total;\n      console.log(exi_total);\n      this.existencias = JSON.parse(JSON.stringify(exis));\n      this.transacciones.push(this.modales.modal_devolucion_compra);\n      this.modales.modal_devolucion_compra = [];\n      $('#egreso').modal('hide');\n      this.transaccion.fecha = '';\n      this.transaccion.movimiento = '';\n      this.transaccion.egreso.cantidad = '';\n      this.transaccion.egreso.precio = '';\n      this.transaccion.egreso.total = '';\n      this.sumasTotales();\n      this.ultimaExistencia();\n    },\n    actualEgre: function actualEgre(id, tipo) {\n      if (tipo == 'devolucion_compra') {\n        var _i = id;\n        var _totales = this.totales.total;\n\n        var _egresos = this.modales.modal_devolucion_compra.filter(function (x) {\n          return x.tipo == 'egreso_compra';\n        });\n\n        var ul = _egresos.length - 1;\n        var exis = Number(_egresos[ul].existencia_total);\n        var cantidad = Number(this.modales.modal_devolucion_compra[_i].egreso_cantidad);\n        var precio = Number(this.modales.modal_devolucion_compra[_i].egreso_precio);\n        var total1 = this.modales.modal_devolucion_compra[_i].egreso_total;\n        var multiplicacion = cantidad * precio;\n        this.modales.modal_devolucion_compra[_i].egreso_total = multiplicacion.toFixed(2);\n\n        if (total1 > multiplicacion) {\n          var dife = total1 - multiplicacion;\n          var suma = exis + dife;\n          this.totales.subtotal = suma;\n        } else {\n          var adi = multiplicacion - total1;\n\n          var _suma = exis - adi;\n\n          this.totales.subtotal = _suma;\n        }\n\n        toastr.error(\"Datos Actualizado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        return;\n      }\n\n      var i = id;\n      var totales = this.totales.total;\n      var egresos = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'egreso';\n      });\n\n      if (egresos.length >= 1) {\n        var _cantidad = Number(this.modales.modal_egreso[i].egreso_cantidad);\n\n        var _precio = Number(this.modales.modal_egreso[i].egreso_precio);\n\n        var _total = this.modales.modal_egreso[i].egreso_total;\n\n        var _multiplicacion = _cantidad * _precio;\n\n        this.modales.modal_egreso[i].egreso_total = _multiplicacion.toFixed(2);\n      }\n    },\n    totaEgre: function totaEgre(id) {\n      var i = id;\n      var exis = this.totales.total;\n      var cantidad = Number(this.egresos[i].egreso_cantidad);\n      var precio = Number(this.egresos[i].egreso_precio);\n      var total1 = this.egresos[i].egreso_total;\n      var multiplicacion = cantidad * precio;\n      this.egresos[i].egreso_total = multiplicacion.toFixed(2);\n    },\n    ActualizarEgresos: function ActualizarEgresos() {\n      var exis = [];\n      var existencias_egresos = this.egresos.filter(function (x) {\n        return x.tipo == 'egreso' && x.existencia_cantidad > 0 & x.existencia_cantidad !== '' || x.tipo == 'egreso_compra' && x.existencia_cantidad > 0 & x.existencia_cantidad !== '';\n      });\n      existencias_egresos.forEach(function (existencia, id) {\n        var _agregar4;\n\n        var agregar = (_agregar4 = {\n          tipo: 'existencia',\n          fecha: '',\n          movimiento: ''\n        }, _defineProperty(_agregar4, \"tipo\", 'existencia'), _defineProperty(_agregar4, \"ingreso_cantidad\", ''), _defineProperty(_agregar4, \"ingreso_precio\", ''), _defineProperty(_agregar4, \"ingreso_total\", ''), _defineProperty(_agregar4, \"egreso_cantidad\", ''), _defineProperty(_agregar4, \"egreso_precio\", ''), _defineProperty(_agregar4, \"egreso_total\", ''), _defineProperty(_agregar4, \"existencia_cantidad\", existencia.existencia_cantidad), _defineProperty(_agregar4, \"existencia_precio\", existencia.existencia_precio), _defineProperty(_agregar4, \"existencia_total\", ''), _agregar4);\n        exis.push(agregar);\n      });\n      console.log(exis + 'inu');\n      existencias_egresos.forEach(function (egreso, id) {\n        var cantidad = egreso.egreso_cantidad;\n        var precio = egreso.egreso_precio;\n        var total = Number(cantidad * precio);\n        existencias_egresos[id].egreso_total = total.toFixed(2);\n      });\n      var existencias_filtro = this.egresos.filter(function (x) {\n        return x.tipo == 'existencia';\n      });\n\n      if (existencias_filtro.length >= 1) {\n        filtro_existencias = exis.concat(existencias_filtro);\n        console.log('filtros');\n      } else {\n        console.log(exis);\n        filtro_existencias = exis;\n      }\n\n      var exi_total = 0;\n      this.existencias = JSON.parse(JSON.stringify(filtro_existencias));\n      filtro_existencias.forEach(function (existencia, i) {\n        var cantidad = existencia.existencia_cantidad;\n        var precio = existencia.existencia_precio;\n        var subtotal = Number(cantidad) * Number(precio);\n        exi_total += Number(subtotal);\n      });\n      var ultimo = this.egresos.length - 1;\n      this.egresos[ultimo].existencia_total = exi_total.toFixed(2);\n      var index = this.actuegreso.index;\n      this.transacciones[index] = this.egresos;\n      this.egresos = [];\n      this.actuegreso.estado = false;\n      this.actuegreso.tipo = false;\n      this.actuegreso.index = '';\n      this.sumasTotales();\n      this.ultimaExistencia();\n    },\n    borrarEgresoAct: function borrarEgresoAct(index, tipo) {\n      var transacciones = this.transacciones;\n      var puesto = this.actuegreso.index;\n      var id = index;\n      var ultimo = this.modales.modal_devolucion_compra.length - 1;\n\n      if (tipo == 'existencia') {\n        if (this.egresos[index].tipo == 'existencia') {\n          this.egresos.splice(index, 1);\n        }\n\n        return;\n      }\n\n      if (tipo == 'egreso_compra') {\n        if (this.modales.egresos[id].tipo == 'existencia') {\n          this.modales.egresos.splice(index, 1);\n        } else if (id == ultimo && this.modales.egresos[id].tipo == 'egreso_compra') {\n          console.log('No puede eliminar todos los egresos');\n        }\n\n        return;\n      }\n\n      var egresos = this.egresos.filter(function (x) {\n        return x.tipo == 'egreso';\n      }); //ELIMINAR UN EGRESO\n\n      if (this.egresos[id].tipo == 'existencia' && this.egresos[id].existencia_total > 0) {\n        this.egresos.splice(index, 1);\n      } else if (this.egresos[id].tipo == 'existencia' && this.egresos[id].existencia_total == '') {\n        this.egresos.splice(index, 1);\n      } else if (this.egresos[id].tipo == 'egreso' && egresos.length == 1) {\n        console.log('No puede eliminar todos los egresos');\n      } else if (this.egresos[id].tipo == 'egreso' && this.egresos[id].existencia_total > 0) {\n        this.egresos.splice(index, 1);\n      } else if (this.egresos[id].tipo == 'egreso' && this.egresos[id].existencia_total == '') {\n        this.egresos.splice(index, 1);\n      }\n    },\n    borrarEgreso: function borrarEgreso(index, tipo) {\n      var id = index;\n      var ultimo = this.modales.modal_devolucion_compra.length - 1;\n\n      if (tipo == 'egreso_compra') {\n        if (this.modales.modal_devolucion_compra[id].tipo == 'existencia') {\n          this.modales.modal_devolucion_compra.splice(index, 1);\n        } else if (id == ultimo && this.modales.modal_devolucion_compra[id].tipo == 'egreso_compra') {\n          var total = this.modales.modal_devolucion_compra[id].existencia_total;\n          this.modales.modal_devolucion_compra.splice(index, 1);\n        }\n\n        return;\n      }\n\n      var egresos = this.modales.modal_egreso.filter(function (x) {\n        return x.tipo == 'egreso';\n      }); //ELIMINAR UN EGRESO\n\n      if (this.modales.modal_egreso[id].tipo == 'existencia') {\n        this.modales.modal_egreso.splice(index, 1);\n      } else if (this.modales.modal_egreso[id].tipo == 'egreso') {\n        this.modales.modal_egreso.splice(index, 1);\n      }\n    },\n    agregarDevolucion: function agregarDevolucion() {\n      if (this.transaccion.fecha.trim() === '' || this.transaccion.movimiento.trim() === '' || this.transaccion.ingreso.cantidad.trim() === '' || this.transaccion.ingreso.precio.trim() === '') {\n        toastr.error(\"Todos los campos son obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _array7;\n\n        var id = this.transacciones.length + 1;\n        this.transaccion.ingreso.total = Number(this.transaccion.ingreso.cantidad * this.transaccion.ingreso.precio).toFixed(2);\n        var calculo = Number(this.transaccion.ingreso.total) + Number(this.totales.total);\n        var array = (_array7 = {\n          identificador: id,\n          fecha: '',\n          movimiento: '',\n          tipo: 'ingreso_venta'\n        }, _defineProperty(_array7, \"fecha\", this.transaccion.fecha), _defineProperty(_array7, \"movimiento\", this.transaccion.movimiento), _defineProperty(_array7, \"ingreso_cantidad\", this.transaccion.ingreso.cantidad), _defineProperty(_array7, \"ingreso_precio\", this.transaccion.ingreso.precio), _defineProperty(_array7, \"ingreso_total\", this.transaccion.ingreso.total), _defineProperty(_array7, \"egreso_cantidad\", ''), _defineProperty(_array7, \"egreso_precio\", ''), _defineProperty(_array7, \"egreso_total\", ''), _defineProperty(_array7, \"existencia_cantidad\", this.transaccion.existencia.cantidad), _defineProperty(_array7, \"existencia_precio\", this.transaccion.existencia.precio), _defineProperty(_array7, \"existencia_total\", ''), _array7);\n        this.modales.modal_devolucion_venta.unshift(array);\n        toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.transaccion.exis.cantidad = this.transaccion.existencia.cantidad;\n        this.transaccion.exis.precio = this.transaccion.existencia.precio;\n        this.transaccion.fecha = '';\n        this.transaccion.movimiento = '';\n        this.transaccion.ingreso.cantidad = '';\n        this.transaccion.ingreso.precio = '';\n        this.transaccion.ingreso.total = '';\n        this.transaccion.existencia.precio = '';\n        this.transaccion.existencia.cantidad = '';\n      }\n    },\n    existenciaVenta: function existenciaVenta() {\n      var id = this.transacciones.length + 1;\n      var ultimo = this.modales.modal_devolucion_venta.length - 1;\n      var total = this.modales.modal_devolucion_venta[ultimo].existencia_total;\n      var existencia = {\n        identificador: id,\n        fecha: '',\n        movimiento: '',\n        tipo: 'existencia',\n        ingreso_cantidad: '',\n        ingreso_precio: '',\n        ingreso_total: '',\n        egreso_cantidad: '',\n        egreso_precio: '',\n        egreso_total: '',\n        existencia_cantidad: this.exis.cantidad,\n        existencia_precio: this.exis.precio,\n        existencia_total: ''\n      };\n      this.modales.modal_devolucion_venta.push(existencia);\n      this.modales.modal_devolucion_venta[ultimo].existencia_total = '';\n      toastr.success(\"Agregado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.exis.cantidad = '';\n      this.exis.precio = '';\n      this.transaccion.fecha = '';\n      this.transaccion.movimiento = '';\n      this.transaccion.ingreso.cantidad = '';\n      this.transaccion.ingreso.precio = '';\n      this.transaccion.ingreso.total = ''; // }\n    },\n    agregarNewEgreso: function agregarNewEgreso(tipo) {\n      if (tipo == 'agregar') {\n        this.transaccion.egreso.edit = true;\n      } else {\n        this.transaccion.egreso.edit = false;\n        this.transaccion.egreso.cantidad = '';\n        this.transaccion.egreso.precio = '';\n      }\n    },\n    guardarKardex: function guardarKardex() {\n      if (this.transacciones.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en el Kardex\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nombre.trim() === '' || this.producto.trim() === '') {\n        toastr.error(\"Nombre & Producto es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/kardex-fifo';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          producto_id: _this.producto_id,\n          producto: _this.producto,\n          kardex_fifo: _this.transacciones,\n          inv_inicial_cantidad: _this.prueba.cantidad.inventario_inicial,\n          adquisicion_cantidad: _this.prueba.cantidad.adquicisiones,\n          ventas_cantidad: _this.prueba.cantidad.ventas,\n          inv_final_cantidad: _this.prueba.cantidad.inventario_final,\n          inv_inicial_precio: _this.prueba.precio.inventario_inicial,\n          adquisicion_precio: _this.prueba.precio.adquicisiones,\n          ventas_precio: _this.prueba.precio.ventas,\n          inv_final_precio: _this.prueba.precio.inventario_final\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Kardex creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"kardex actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerKardexFifo: function obtenerKardexFifo() {\n      var _this41 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/kardex-obtener-fifo';\n      axios.post(url, {\n        id: _this.id_taller,\n        producto_id: _this.producto_id\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Kardex Fifo cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.transacciones = response.data.kardex_fifo;\n          _this.nombre = response.data.informacion.nombre;\n          _this.producto = response.data.informacion.producto;\n          _this.prueba.cantidad.inventario_inicial = response.data.informacion.inv_inicial_cantidad;\n          _this.prueba.cantidad.adquicisiones = response.data.informacion.adquisicion_cantidad;\n          _this.prueba.cantidad.ventas = response.data.informacion.ventas_cantidad;\n          _this.prueba.cantidad.inventario_final = response.data.informacion.inv_final_cantidad;\n          _this.prueba.precio.inventario_inicial = response.data.informacion.inv_inicial_precio;\n          _this.prueba.precio.adquicisiones = response.data.informacion.adquisicion_precio;\n          _this.prueba.precio.ventas = response.data.informacion.ventas_precio;\n          _this.prueba.precio.inventario_final = response.data.informacion.inv_final_precio;\n          _this.datos_transacciones = response.data.transacciones.transacciones;\n          console.log('nO SE RECIBIO NADA');\n\n          _this41.sumasTotales();\n\n          _this41.ultimaExistencia();\n        } else if (response.data.datos == false) {\n          _this.transacciones = [];\n          _this.nombre = '';\n          _this.producto = '';\n          _this.prueba.cantidad.inventario_inicial = '';\n          _this.prueba.cantidad.adquicisiones = '';\n          _this.prueba.cantidad.ventas = '';\n          _this.prueba.cantidad.inventario_final = '';\n          _this.prueba.precio.inventario_inicial = '';\n          _this.prueba.precio.adquicisiones = '';\n          _this.prueba.precio.ventas = '';\n          _this.prueba.precio.inventario_final = '';\n          _this.datos_transacciones = response.data.transacciones.transacciones;\n\n          _this41.sumasTotales();\n\n          _this41.ultimaExistencia();\n        }\n      })[\"catch\"](function (error) {});\n    },\n    borrarTransaccion: function borrarTransaccion(index, id) {\n      var _this42 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este registro??',\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro se elimino', 'success');\n          var u = _this42.transacciones.length - 1;\n\n          if (u == index) {\n            _this42.transacciones.splice(index, 1);\n\n            if (_this42.transacciones.length == 0) {\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n\n            var last = _this42.transacciones.length - 1;\n            var ultima_transaccion = JSON.parse(JSON.stringify(_this42.transacciones[last]));\n            var consulta1 = ultima_transaccion.filter(function (x) {\n              return x.tipo == 'ingreso';\n            });\n\n            if (consulta1.length >= 1) {\n              var ingreso = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'ingreso';\n              });\n\n              var _filtro_existencias3 = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'existencia';\n              });\n\n              var existencia = {\n                tipo: 'existencia',\n                existencia_cantidad: ingreso[0].existencia_cantidad,\n                existencia_precio: ingreso[0].existencia_precio\n              };\n\n              _filtro_existencias3.push(existencia);\n\n              _this42.existencias = JSON.parse(JSON.stringify(_filtro_existencias3));\n\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n\n            var consulta2 = ultima_transaccion.filter(function (x) {\n              return x.tipo == 'egreso';\n            });\n\n            if (consulta2.length >= 1) {\n              var exis = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'existencia';\n              });\n              var existencias_egresos = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'egreso' && x.existencia_cantidad > 0;\n              });\n              existencias_egresos.forEach(function (existencia, id) {\n                var agregar = {\n                  tipo: 'existencia',\n                  existencia_cantidad: existencia.existencia_cantidad,\n                  existencia_precio: existencia.existencia_precio,\n                  existencia_total: ''\n                };\n                exis.unshift(agregar);\n              });\n              _this42.existencias = JSON.parse(JSON.stringify(exis));\n\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n\n            var consulta3 = ultima_transaccion.filter(function (x) {\n              return x.tipo == 'egreso_compra';\n            });\n\n            if (consulta3.length >= 1) {\n              var egresos = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'egreso_compra';\n              });\n\n              var _exis = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'existencia';\n              });\n\n              var _existencias_egresos = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'egreso_compra' && x.existencia_cantidad > 0;\n              });\n\n              _existencias_egresos.forEach(function (existencia, id) {\n                var agregar = {\n                  tipo: 'existencia',\n                  existencia_cantidad: existencia.existencia_cantidad,\n                  existencia_precio: existencia.existencia_precio,\n                  existencia_total: ''\n                };\n\n                _exis.push(agregar);\n              });\n\n              _this42.existencias = JSON.parse(JSON.stringify(_exis));\n\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n\n            var consulta4 = ultima_transaccion.filter(function (x) {\n              return x.tipo == 'ingreso_venta';\n            });\n\n            if (consulta4.length >= 1) {\n              var venta = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'ingreso_venta';\n              });\n\n              var _filtro_existencias4 = ultima_transaccion.filter(function (x) {\n                return x.tipo == 'existencia';\n              });\n\n              var _existencia5 = {\n                tipo: 'existencia',\n                existencia_cantidad: venta[0].existencia_cantidad,\n                existencia_precio: venta[0].existencia_precio\n              };\n\n              _filtro_existencias4.unshift(_existencia5);\n\n              _this42.existencias = JSON.parse(JSON.stringify(_filtro_existencias4));\n\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n\n            var consulta5 = ultima_transaccion.filter(function (x) {\n              return x.tipo == 'inicial';\n            });\n\n            if (consulta5.length >= 1) {\n              _this42.existencias = [];\n\n              _this42.sumasTotales();\n\n              _this42.ultimaExistencia();\n\n              return;\n            }\n          } else {\n            _this42.transacciones.splice(index, 1);\n\n            _this42.sumasTotales();\n\n            _this42.ultimaExistencia();\n          }\n        }\n      });\n    }\n  }\n});\nvar kardex_promedio = new Vue({\n  el: \"#kardex_promedio\",\n  data: {\n    id_taller: taller,\n    kardex_id: '',\n    producto: '',\n    producto_id: '',\n    nombre: '',\n    transacciones: [],\n    update: false,\n    inicial: {\n      fecha: '',\n      movimiento: '',\n      cantidad: '',\n      precio: '',\n      index: ''\n    },\n    prueba: {\n      cantidad: {\n        inventario_inicial: '',\n        adquicisiones: '',\n        ventas: '',\n        inventario_final: ''\n      },\n      precio: {\n        inventario_inicial: '',\n        adquicisiones: '',\n        ventas: '',\n        inventario_final: ''\n      }\n    },\n    ultima_existencia: [],\n    suman: {\n      ingreso_cantidad: 0,\n      ingreso_total: 0,\n      egreso_cantidad: 0,\n      egreso_total: 0,\n      muestra: 0\n    },\n    datos_transacciones: '',\n    modales: {\n      modal_ingreso: [],\n      modal_egreso: []\n    },\n    ingresos: [],\n    egresos: [],\n    transaccion: {\n      fecha: '',\n      movimiento: '',\n      ingreso: {\n        fecha: '',\n        movimiento: '',\n        cantidad: '',\n        precio: '',\n        total: '',\n        edit: false,\n        index: ''\n      },\n      egreso: {\n        fecha: '',\n        movimiento: '',\n        cantidad: '',\n        precio: '',\n        total: '',\n        temp: '',\n        edit: false,\n        index: ''\n      },\n      existencia: {\n        cantidad: '',\n        precio: '',\n        total: ''\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.obtenerKardexPromedio();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    cancelarActualizacion: function cancelarActualizacion(tipo) {\n      if (tipo == 'egresos') {\n        this.transaccion.egreso.index = '';\n        this.transaccion.egreso.edit = false;\n        this.egresos = [];\n      } else if (tipo == 'ingresos') {\n        this.transaccion.ingreso.index = '';\n        this.transaccion.ingreso.edit = false;\n        this.ingresos = [];\n      }\n    },\n    exitenciaFinal: function exitenciaFinal() {\n      var u = this.transacciones.length - 1;\n      this.ultima_existencia = [JSON.parse(JSON.stringify(this.transacciones[u]))];\n    },\n    sumasTotales: function sumasTotales() {\n      var transacciones = this.transacciones;\n      var in_cantidad = 0;\n      var in_total = 0;\n      var eg_cantidad = 0;\n      var eg_total = 0;\n      var conteo = transacciones.length;\n\n      if (conteo == 0) {\n        this.suman.ingreso_cantidad = 0;\n        this.suman.ingreso_total = 0;\n        this.suman.egreso_cantidad = 0;\n        this.suman.egreso_total = 0;\n        return;\n      } //INGRESO CANTIDAD\n\n\n      transacciones.forEach(function (ingreso_cantidad, id) {\n        var temp = ingreso_cantidad.ingreso_cantidad;\n\n        if (temp != null && temp !== '') {\n          in_cantidad += parseInt(temp); // console.log(temp);\n        }\n      });\n      this.suman.ingreso_cantidad = in_cantidad; //INGRESO TOTAL\n\n      transacciones.forEach(function (ingreso_total, id) {\n        var temp1 = ingreso_total.ingreso_total;\n\n        if (temp1 != null && temp1 !== '') {\n          in_total += Number(temp1); // console.log(temp1);\n        }\n      });\n      this.suman.ingreso_total = in_total.toFixed(2);\n      console.log(in_total); //EGRESO CANTIDAD\n\n      transacciones.forEach(function (egreso_cantidad, id) {\n        var temp = egreso_cantidad.egreso_cantidad;\n\n        if (temp != null && temp !== '') {\n          eg_cantidad += parseInt(temp); // console.log(temp);\n        }\n      });\n      this.suman.egreso_cantidad = eg_cantidad; //EGRESO TOTAL\n\n      transacciones.forEach(function (egreso_total, id) {\n        var temp1 = egreso_total.egreso_total;\n\n        if (temp1 != null && temp1 !== '') {\n          eg_total += Number(temp1); // console.log(temp1);\n        }\n      });\n      this.suman.egreso_total = eg_total.toFixed(2);\n      console.log(in_total);\n    },\n    modalInicial: function modalInicial() {\n      this.cerrarInicial();\n\n      if (this.transacciones.length >= 1) {\n        var i = this.transacciones.length - 1;\n        console.log(this.transacciones[i]);\n        this.movimientos = this.transacciones[i];\n      }\n\n      $('#inicial').modal('show');\n    },\n    modalTransacciones: function modalTransacciones() {\n      $('#ingreso-kardex').modal('show');\n    },\n    calcularTotalIngreso: function calcularTotalIngreso() {\n      if (this.transaccion.ingreso.cantidad.trim() === '' || this.transaccion.ingreso.precio.trim() === '') {\n        toastr.error(\"La Cantidad & Precio es Obligatoria\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.transaccion.ingreso.total = Number(this.transaccion.ingreso.cantidad * this.transaccion.ingreso.precio).toFixed(2);\n        var array = {\n          tipo: 'ingreso',\n          fecha: this.transaccion.ingreso.fecha,\n          movimiento: this.transaccion.ingreso.movimiento,\n          ingreso_cantidad: this.transaccion.ingreso.cantidad,\n          ingreso_precio: this.transaccion.ingreso.precio,\n          ingreso_total: this.transaccion.ingreso.total,\n          egreso_cantidad: '',\n          egreso_precio: '',\n          egreso_total: '',\n          existencia_cantidad: this.transaccion.existencia.cantidad,\n          existencia_precio: this.transaccion.existencia.precio,\n          existencia_total: ''\n        };\n        this.modales.modal_ingreso.push(array);\n        this.transaccion.ingreso.fecha = '';\n        this.transaccion.ingreso.movimiento = '';\n        this.transaccion.ingreso.cantidad = '';\n        this.transaccion.ingreso.precio = '';\n        this.transaccion.ingreso.total = '';\n      }\n    },\n    actuaIng: function actuaIng(id) {\n      var i = id;\n      var cantidad = Number(this.modales.modal_ingreso[i].ingreso_cantidad);\n      var precio = Number(this.modales.modal_ingreso[i].ingreso_precio);\n      var total1 = this.modales.modal_ingreso[i].ingreso_total;\n      var multiplicacion = cantidad * precio;\n      this.modales.modal_ingreso[i].ingreso_total = multiplicacion.toFixed(2);\n      toastr.success(\"Datos Actualizado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    actuaEgre: function actuaEgre(id) {\n      var i = id;\n      var cantidad = Number(this.modales.modal_egreso[i].egreso_cantidad);\n      var precio = Number(this.modales.modal_egreso[i].egreso_precio);\n      var total1 = this.modales.modal_egreso[i].egreso_total;\n      var multiplicacion = cantidad * precio;\n      this.modales.modal_egreso[i].egreso_total = multiplicacion.toFixed(2);\n      toastr.success(\"Datos Actualizado\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    calcularTotalEgreso: function calcularTotalEgreso() {\n      if (this.transaccion.egreso.cantidad.trim() === '' || this.transaccion.egreso.precio.trim() === '') {\n        toastr.error(\"La Cantidad & Precio es Obligatoria\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.transaccion.egreso.total = Number(this.transaccion.egreso.cantidad * this.transaccion.egreso.precio).toFixed(2);\n        var array = {\n          tipo: 'egreso',\n          fecha: this.transaccion.egreso.fecha,\n          movimiento: this.transaccion.egreso.movimiento,\n          ingreso_cantidad: '',\n          ingreso_precio: '',\n          ingreso_total: '',\n          egreso_cantidad: this.transaccion.egreso.cantidad,\n          egreso_precio: this.transaccion.egreso.precio,\n          egreso_total: this.transaccion.egreso.total,\n          existencia_cantidad: this.transaccion.existencia.cantidad,\n          existencia_precio: this.transaccion.existencia.precio,\n          existencia_total: ''\n        };\n        this.modales.modal_egreso.push(array);\n        this.transaccion.egreso.fecha = '';\n        this.transaccion.egreso.movimiento = '';\n        this.transaccion.egreso.cantidad = '';\n        this.transaccion.egreso.precio = '';\n        this.transaccion.egreso.total = '';\n      }\n    },\n    agregarInicial: function agregarInicial() {\n      if (this.inicial.fecha.trim() === '' || this.inicial.movimiento.trim() === '' || this.inicial.cantidad.trim() === '' || this.inicial.precio.trim() === '') {\n        toastr.error(\"Todos los campos son Obligatorios\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var cantidad = this.inicial.cantidad;\n        var precio = this.inicial.precio;\n        this.inicial.total = Number(cantidad * precio).toFixed(2);\n        var inicial = {\n          tipo: 'inicial',\n          fecha: this.inicial.fecha,\n          movimiento: this.inicial.movimiento,\n          ingreso_cantidad: '',\n          ingreso_precio: '',\n          ingreso_total: '',\n          egreso_cantidad: '',\n          egreso_precio: '',\n          egreso_total: '',\n          existencia_cantidad: this.inicial.cantidad,\n          existencia_precio: this.inicial.precio,\n          existencia_total: this.inicial.total\n        };\n        this.transacciones.unshift(inicial);\n        toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.update = false;\n        this.inicial.fecha = '';\n        this.inicial.movimiento = '';\n        this.inicial.cantidad = '';\n        this.inicial.precio = '';\n        this.inicial.total = '';\n        $('#inicial').modal('hide');\n        var ultima = this.transacciones.length - 1;\n        this.ultima_existencia = [JSON.parse(JSON.stringify(this.transacciones[ultima]))];\n        this.sumasTotales();\n      }\n    },\n    cerrarInicial: function cerrarInicial() {\n      this.update = false;\n      this.inicial.fecha = '';\n      this.inicial.movimiento = '';\n      this.inicial.cantidad = '';\n      this.inicial.precio = '';\n      this.inicial.fecha = '';\n      this.inicial.movimiento = '';\n      this.inicial.cantidad = '';\n      this.inicial.precio = '';\n    },\n    agregarIngreso: function agregarIngreso() {\n      this.transacciones.push(this.modales.modal_ingreso[0]);\n      toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.modales.modal_ingreso = [];\n      $('#ingreso-kardex').modal('hide');\n      var ultima = this.transacciones.length - 1;\n      this.ultima_existencia = [JSON.parse(JSON.stringify(this.transacciones[ultima]))];\n      this.sumasTotales();\n    },\n    agregarEgreso: function agregarEgreso() {\n      this.transacciones.push(this.modales.modal_egreso[0]);\n      toastr.success(\"Transaccion agregada correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n      this.modales.modal_egreso = [];\n      $('#ingreso-kardex').modal('hide');\n      var ultima = this.transacciones.length - 1;\n      this.ultima_existencia = [JSON.parse(JSON.stringify(this.transacciones[ultima]))];\n      this.sumasTotales();\n    },\n    editarTransaccion: function editarTransaccion(id, tipo) {\n      if (tipo == 'ingreso') {\n        this.transaccion.ingreso.edit = true;\n        this.transaccion.egreso.edit = false;\n        this.ingresos = [JSON.parse(JSON.stringify(this.transacciones[id]))];\n        this.transaccion.ingreso.index = id;\n      } else if (tipo == 'egreso') {\n        this.transaccion.egreso.edit = true;\n        this.transaccion.ingreso.edit = false;\n        this.egresos = [JSON.parse(JSON.stringify(this.transacciones[id]))];\n        this.transaccion.egreso.index = id;\n      } else if (tipo == 'inicial') {\n        this.transaccion.ingreso.edit = false;\n        this.transaccion.egreso.edit = false;\n        this.inicial.index = id;\n        this.inicial.fecha = this.transacciones[id].fecha;\n        this.inicial.movimiento = this.transacciones[id].movimiento;\n        this.inicial.cantidad = this.transacciones[id].existencia_cantidad;\n        this.inicial.precio = this.transacciones[id].existencia_precio;\n        this.update = true;\n        $('#inicial').modal('show');\n      }\n    },\n    actualizarIngreso: function actualizarIngreso() {\n      var id = this.transaccion.ingreso.index;\n      var cantidad = this.ingresos[0].ingreso_cantidad;\n      var precio = this.ingresos[0].ingreso_precio;\n      var total = Number(cantidad * precio).toFixed(2);\n      this.ingresos[0].ingreso_total = total;\n      var ingreso = this.ingresos[0];\n      this.transacciones.splice(id, 1, ingreso);\n      this.transaccion.ingreso.index = '';\n      this.ingresos = [];\n      this.exitenciaFinal();\n      this.sumasTotales();\n      this.transaccion.ingreso.edit = false;\n    },\n    actualizarEgreso: function actualizarEgreso() {\n      var id = this.transaccion.egreso.index;\n      var cantidad = this.egresos[0].egreso_cantidad;\n      var precio = this.egresos[0].egreso_precio;\n      var total = Number(cantidad * precio).toFixed(2);\n      this.egresos[0].egreso_total = total;\n      var egreso = this.egresos[0];\n      this.transacciones.splice(id, 1, egreso);\n      this.transaccion.egreso.index = '';\n      this.egresos = [];\n      this.exitenciaFinal();\n      this.sumasTotales();\n      this.transaccion.egreso.edit = false;\n    },\n    actualizarInicial: function actualizarInicial() {\n      var id = this.inicial.index;\n      var cantidad = this.inicial.cantidad;\n      var precio = this.inicial.precio;\n      var total = Number(cantidad * precio).toFixed(2);\n      this.inicial.total = total;\n      this.transacciones[id].fecha = this.inicial.fecha;\n      this.transacciones[id].movimiento = this.inicial.movimiento;\n      this.transacciones[id].existencia_cantidad = this.inicial.cantidad;\n      this.transacciones[id].existencia_precio = this.inicial.precio;\n      this.transacciones[id].existencia_total = this.inicial.total;\n      this.update = false;\n      this.inicial.fecha = '';\n      this.inicial.movimiento = '';\n      this.inicial.cantidad = '';\n      this.inicial.precio = '';\n      this.inicial.total = '';\n      this.exitenciaFinal();\n      this.sumasTotales();\n      $('#inicial').modal('hide');\n    },\n    totalIng: function totalIng(id) {\n      var cantidad = this.ingresos[0].ingreso_cantidad;\n      var precio = this.ingresos[0].ingreso_precio;\n      var total = Number(cantidad * precio).toFixed(2);\n      this.ingresos[0].ingreso_total = total;\n    },\n    totaEgre: function totaEgre(id) {\n      var cantidad = this.egresos[0].egreso_cantidad;\n      var precio = this.egresos[0].egreso_precio;\n      var total = Number(cantidad * precio).toFixed(2);\n      this.egresos[0].egreso_total = total;\n    },\n    borrarTransaccion: function borrarTransaccion(index) {\n      var _this43 = this;\n\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este registro?? ',\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta se elimino correctamente', 'success');\n          var u = _this43.transacciones.length - 1;\n\n          if (index == u) {\n            if (u == 0) {\n              _this43.ultima_existencia = [];\n\n              _this43.transacciones.splice(index, 1);\n            } else {\n              _this43.transacciones.splice(index, 1);\n\n              _this43.ultima_existencia = [JSON.parse(JSON.stringify(_this43.transacciones[u - 1]))];\n            }\n          } else {\n            _this43.transacciones.splice(index, 1);\n          }\n\n          toastr.info(\"Transaccion eliminada correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n\n          _this43.sumasTotales();\n        }\n      });\n    },\n    guardarKardex: function guardarKardex() {\n      if (this.transacciones.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en el Kardex\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nombre.trim() === '' || this.producto.trim() === '') {\n        toastr.error(\"Nombre & Producto es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/kardex-promedio';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          producto: _this.producto,\n          producto_id: _this.producto_id,\n          kardex_promedio: _this.transacciones,\n          inv_inicial_cantidad: _this.prueba.cantidad.inventario_inicial,\n          adquisicion_cantidad: _this.prueba.cantidad.adquicisiones,\n          ventas_cantidad: _this.prueba.cantidad.ventas,\n          inv_final_cantidad: _this.prueba.cantidad.inventario_final,\n          inv_inicial_precio: _this.prueba.precio.inventario_inicial,\n          adquisicion_precio: _this.prueba.precio.adquicisiones,\n          ventas_precio: _this.prueba.precio.ventas,\n          inv_final_precio: _this.prueba.precio.inventario_final\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Kardex creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"kardex actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    obtenerKardexPromedio: function obtenerKardexPromedio() {\n      var _this44 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/kardex-obtener-promedio';\n      axios.post(url, {\n        id: _this.id_taller,\n        producto_id: _this.producto_id\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Kardex Promedio cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this.transacciones = response.data.kardex_promedio;\n          _this.nombre = response.data.informacion.nombre;\n          _this.producto = response.data.informacion.producto;\n          _this.prueba.cantidad.inventario_inicial = response.data.informacion.inv_inicial_cantidad;\n          _this.prueba.cantidad.adquicisiones = response.data.informacion.adquisicion_cantidad;\n          _this.prueba.cantidad.ventas = response.data.informacion.ventas_cantidad;\n          _this.prueba.cantidad.inventario_final = response.data.informacion.inv_final_cantidad;\n          _this.prueba.precio.inventario_inicial = response.data.informacion.inv_inicial_precio;\n          _this.prueba.precio.adquicisiones = response.data.informacion.adquisicion_precio;\n          _this.prueba.precio.ventas = response.data.informacion.ventas_precio;\n          _this.prueba.precio.inventario_final = response.data.informacion.inv_final_precio;\n          _this.datos_transacciones = response.data.transacciones.transacciones;\n\n          _this44.sumasTotales();\n\n          _this44.exitenciaFinal();\n        } else {\n          _this.transacciones = [];\n          _this.nombre = '';\n          _this.producto = '';\n          _this.prueba.cantidad.inventario_inicial = '';\n          _this.prueba.cantidad.adquicisiones = '';\n          _this.prueba.cantidad.ventas = '';\n          _this.prueba.cantidad.inventario_final = '';\n          _this.prueba.precio.inventario_inicial = '';\n          _this.prueba.precio.adquicisiones = '';\n          _this.prueba.precio.ventas = '';\n          _this.prueba.precio.inventario_final = '';\n          _this.datos_transacciones = response.data.transacciones.transacciones;\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////LIBRO CAJA ANEXO //////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar librocaja = new Vue({\n  el: \"#librocaja\",\n  data: {\n    id_taller: taller,\n    nombre: '',\n    libros_caja: [],\n    //donde se almacenara todos los datos del libro CAJA\n    caja: {\n      // variables a utilizar para el libro CAJA\n      fecha: '',\n      edit: false,\n      detalle: '',\n      debe: '',\n      haber: '',\n      saldo: ''\n    },\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    suman: {\n      //suma total del libro CAJA\n      debe: 0,\n      haber: 0\n    },\n    update: false,\n    registro_id: '',\n    dgeneral: [],\n    registros_cierres: [],\n    ajustes: [],\n    nombre_cierre: ''\n  },\n  mounted: function mounted() {\n    this.obtenerLibroCaja();\n    this.obtenerDiarioGeneral();\n  },\n  methods: {\n    obtenerDiarioGeneral: function obtenerDiarioGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diariogeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.dgeneral = response.data.registros;\n          _this.nombre_dgral = response.data.nombre;\n          var inicial = response.data.inicial;\n\n          _this.dgeneral.unshift(inicial);\n        }\n      })[\"catch\"](function (error) {});\n    },\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    totales: function totales() {\n      this.suman.debe = 0;\n      this.suman.haber = 0;\n      var regis = this.libros_caja;\n      var total1 = 0;\n      var total2 = 0;\n      regis.forEach(function (obj, index) {\n        total1 += Number(obj.debe);\n      });\n      regis.forEach(function (obj, index) {\n        total2 += Number(obj.haber);\n      });\n      this.suman.debe = total1.toFixed(2);\n      this.suman.haber = total2.toFixed(2);\n    },\n    abrirLibro: function abrirLibro() {\n      //solo para acceder al modal para agregar todo pilas \n      this.update = false;\n      $('#libro-caja').modal('show');\n    },\n    //fin de metodo abrirtransaccion\n    agregarRegistro: function agregarRegistro() {\n      if (this.caja.fecha.trim() === '') {\n        toastr.error(\"La fecha es obligatoria \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.caja.detalle.trim() === '') {\n        toastr.error(\"El campo Detalle es Obligatorio\", \"Smartmoodle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.caja.debe.trim() != '' && this.caja.haber.trim() != '') {\n        toastr.error(\"No puede llenar ambos campos de debe y haber\", \"Smartmoodle\", {\n          \"timeOut\": \"30000\"\n        });\n      } else {\n        var caja = {\n          fecha: this.caja.fecha,\n          detalle: this.caja.detalle,\n          debe: this.caja.debe,\n          haber: this.caja.haber,\n          saldo: this.caja.saldo\n        };\n        this.libros_caja.push(caja);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.caja.fecha = '';\n        this.caja.detalle = '';\n        this.caja.debe = '';\n        this.caja.haber = '';\n        this.caja.saldo = '';\n        this.totales();\n      }\n    },\n    // function agregarregistro\n    editLibroCaja: function editLibroCaja(index) {\n      this.caja.edit = true;\n      this.registro_id = index;\n      this.caja.fecha = this.libros_caja[index].fecha;\n      this.caja.detalle = this.libros_caja[index].detalle;\n      this.caja.debe = this.libros_caja[index].debe;\n      this.caja.haber = this.libros_caja[index].haber;\n      this.caja.saldo = this.libros_caja[index].saldo;\n    },\n    editlibrocajafuera: function editlibrocajafuera(index) {\n      this.caja.edit = true;\n      this.registro_id = index;\n      this.caja.fecha = this.libros_caja[index].fecha;\n      this.caja.detalle = this.libros_caja[index].detalle;\n      this.caja.debe = this.libros_caja[index].debe;\n      this.caja.haber = this.libros_caja[index].haber;\n      this.caja.saldo = this.libros_caja[index].saldo;\n      $('#libro-caja').modal('show');\n    },\n    //fin editlibrocajafuera\n    cancelarEditlibro: function cancelarEditlibro() {\n      this.caja.fecha = '';\n      this.caja.detalle = '';\n      this.caja.debe = '';\n      this.caja.haber = '';\n      this.caja.saldo = '';\n      this.caja.edit = false;\n    },\n    actualizarLibroCaja: function actualizarLibroCaja() {\n      if (this.caja.fecha.trim() === '') {\n        toastr.error(\"La fecha es obligatoria \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.caja.detalle.trim() === '') {\n        toastr.error(\"El campo Detalle es Obligatorio\", \"Smartmoodle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.libros_caja[id].fecha = this.caja.fecha;\n        this.libros_caja[id].detalle = this.caja.detalle;\n        this.libros_caja[id].debe = this.caja.debe;\n        this.libros_caja[id].haber = this.caja.haber;\n        this.libros_caja[id].saldo = this.caja.saldo;\n        this.cancelarEditlibro();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar libro de caja\n    WarningEliminarLibro: function WarningEliminarLibro(id) {\n      var _this45 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.libros_caja[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar el Registro de ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this45.eliminar.nombre, 'success');\n\n          _this45.libros_caja.splice(id, 1);\n\n          _this45.totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    guardarLibro: function guardarLibro() {\n      var _this46 = this;\n\n      if (this.nombre.length == 0) {\n        toastr.error(\"Debe Ingresar el Nombre Comercial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.libros_caja.length == 0) {\n        toastr.error(\"Debe haber al menos un registro en el Balance\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/anexo_caja';\n        axios.post(url, {\n          id: _this.id_taller,\n          libros_caja: _this.libros_caja,\n          nombre: _this.nombre,\n          debe: _this.suman.debe,\n          haber: _this.suman.haber\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Anexo creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            arqueo_caja.obtenerLibroCaja();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Anexo actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            arqueo_caja.obtenerLibroCaja();\n\n            _this46.totales();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    //fin metodo guardar\n    obtenerLibroCaja: function obtenerLibroCaja() {\n      var _this47 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/anexo-obtener-caja';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Libro Caja cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this47.libros_caja = response.data.banexocaja;\n          _this47.nombre = response.data.nombre;\n\n          _this47.totales();\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////ARQUEO CAJA ANEXO /////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar arqueo_caja = new Vue({\n  el: \"#arqueo_caja\",\n  data: {\n    id_taller: taller,\n    libros_caja: [],\n    debe_lb: '',\n    haber_lb: '',\n    nombre_lb: '',\n    t_saldo: [],\n    // array de saldos \n    saldo: {\n      edit: false,\n      detalle: '',\n      s_debe: '',\n      s_haber: ''\n    },\n    t_exis: [],\n    // array de existencias\n    exis: {\n      edit: false,\n      detalle: '',\n      e_debe: '',\n      e_haber: ''\n    },\n    sumas: {\n      // totales de Saldo debe y haber\n      td: 0,\n      th: 0\n    },\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    update: false,\n    registro_id: ''\n  },\n  mounted: function mounted() {\n    this.ObtenerArqueo();\n    this.obtenerLibroCaja();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerLibroCaja: function obtenerLibroCaja() {\n      var _this48 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/anexo-obtener-caja';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this48.libros_caja = response.data.banexocaja;\n          _this48.nombre_lb = response.data.nombre;\n          _this48.debe_lb = response.data.totaldebe;\n          _this48.haber_lb = response.data.totalhaber;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    //end function obtener libro caja\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    // fin fecha\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    totales_s: function totales_s() {\n      this.sumas.td = 0;\n      this.sumas.th = 0;\n      var rg = this.t_saldo;\n      var re = this.t_exis;\n      var t1 = 0;\n      var t2 = 0;\n      var t3 = 0;\n      var t4 = 0;\n      rg.forEach(function (obj, index) {\n        //if(obj.s_debe !== '' || obj.s_debe !== null){\n        t1 += Number(obj.s_debe); //}\n      });\n      rg.forEach(function (obj, index) {\n        //if(obj.s_haber !== '' || obj.s_haber !== null){\n        t2 += Number(obj.s_haber); //}\n      });\n      re.forEach(function (obj, index) {\n        //if(obj.e_debe !== '' || obj.e_debe !== null){\n        t3 += Number(obj.e_debe); //}\n      });\n      re.forEach(function (obj, index) {\n        //if(obj.e_haber !== '' || obj.e_haber !== null){\n        t4 += Number(obj.e_haber); //}\n      });\n      var td1 = t1 + t3;\n      var th1 = t2 + t4;\n      console.log(t1); //  this.sumas.td = t1.toFixed(2);\n      //  this.sumas.th = t2.toFixed(2);\n\n      this.sumas.td = td1.toFixed(2);\n      this.sumas.th = th1.toFixed(2);\n    },\n    abrirArqueo: function abrirArqueo() {\n      //solo para acceder al modal para agregar todo pilas \n      this.update = false;\n      $('#arqueo-caja').modal('show');\n    },\n    //fin de metodo abrirtransaccion\n    agregarsaldo: function agregarsaldo() {\n      if (this.saldo.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.saldo.s_debe.trim() != '' && this.saldo.s_haber.trim() != '') {\n        toastr.error(\"No puede llenar ambos campos de debe y haber \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var saldo = {\n          detalle: this.saldo.detalle,\n          s_debe: this.saldo.s_debe,\n          s_haber: this.saldo.s_haber\n        };\n        this.t_saldo.push(saldo);\n        toastr.success(\"Saldo agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.saldo.detalle = '';\n        this.saldo.s_debe = '';\n        this.saldo.s_haber = '';\n        this.totales_s(); // esta enobservacion la utilizacion de totales\n      }\n    },\n    //fin metodo agregar saldo\n    editSaldo: function editSaldo(index) {\n      this.registro_id = index;\n      this.saldo.edit = true;\n      this.saldo.detalle = this.t_saldo[index].detalle;\n      this.saldo.s_debe = this.t_saldo[index].s_debe;\n      this.saldo.s_haber = this.t_saldo[index].s_haber;\n      $('#ht-dato-saldo-tab').tab('show');\n    },\n    //end edit saldos\n    editSaldoFuera: function editSaldoFuera(index) {\n      this.registro_id = index;\n      this.saldo.edit = true;\n      this.saldo.detalle = this.t_saldo[index].detalle;\n      this.saldo.s_debe = this.t_saldo[index].s_debe;\n      this.saldo.s_haber = this.t_saldo[index].s_haber;\n      $('#arqueo-caja').modal('show');\n      $('#ht-dato-saldo-tab').tab('show');\n    },\n    //end edit saldos\n    cancelarEditSaldo: function cancelarEditSaldo() {\n      this.saldo.detalle = '';\n      this.saldo.s_debe = '';\n      this.saldo.s_haber = '';\n      this.saldo.edit = false;\n    },\n    //fin de cancelar edicion\n    actualizarSaldo: function actualizarSaldo() {\n      if (this.saldo.detalle == '') {\n        toastr.error(\"El campo Detalle es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_saldo[index].detalle = this.saldo.detalle;\n        this.t_saldo[index].s_debe = this.saldo.s_debe;\n        this.t_saldo[index].s_haber = this.saldo.s_haber;\n        this.cancelarEditSaldo();\n        this.totales_s();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de function  actualizar \n    WarningEliminarSaldo: function WarningEliminarSaldo(id) {\n      var _this49 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_saldo[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este Registro ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this49.eliminar.nombre, 'success');\n\n          _this49.t_saldo.splice(id, 1);\n\n          _this49.totales_s();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    agregarExistencia: function agregarExistencia() {\n      if (this.exis.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.exis.e_debe.trim() != '' && this.exis.e_haber.trim() != '') {\n        toastr.error(\"No puede llenar ambos campos de debe y haber \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var exis = {\n          detalle: this.exis.detalle,\n          e_debe: this.exis.e_debe,\n          e_haber: this.exis.e_haber\n        };\n        this.t_exis.push(exis);\n        toastr.success(\"Existencias agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.exis.detalle = '';\n        this.exis.e_debe = '';\n        this.exis.e_haber = '';\n        this.totales_s(); // esta enobservacion la utilizacion de totales\n      }\n    },\n    //fin metodo agregar existencia\n    editExis: function editExis(index) {\n      this.exis.edit = true;\n      this.registro_id = index;\n      this.exis.detalle = this.t_exis[index].detalle;\n      this.exis.e_debe = this.t_exis[index].e_debe;\n      this.exis.e_haber = this.t_exis[index].e_haber;\n      $('#ht-dato-exis-tab').tab('show');\n    },\n    //end edit EXISTENCIAS\n    editExisFuera: function editExisFuera(index) {\n      this.exis.edit = true;\n      this.registro_id = index;\n      this.exis.detalle = this.t_exis[index].detalle;\n      this.exis.e_debe = this.t_exis[index].e_debe;\n      this.exis.e_haber = this.t_exis[index].e_haber;\n      $('#arqueo-caja').modal('show');\n      $('#ht-dato-exis-tab').tab('show');\n    },\n    //end edit EXISTENCIAS\n    cancelarEditExis: function cancelarEditExis() {\n      this.exis.detalle = '';\n      this.exis.e_debe = '';\n      this.exis.e_haber = '';\n      this.exis.edit = false;\n    },\n    //fin de cancelar edicion\n    actualizarExis: function actualizarExis() {\n      if (this.exis.detalle == '') {\n        toastr.error(\"El campo Detalle es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_exis[index].detalle = this.exis.detalle;\n        this.t_exis[index].e_debe = this.exis.e_debe;\n        this.t_exis[index].e_haber = this.exis.e_haber;\n        this.cancelarEditExis();\n        this.totales_s();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de function  actualizar \n    WarningEliminarExis: function WarningEliminarExis(id) {\n      var _this50 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_exis[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este Registro ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this50.eliminar.nombre, 'success');\n\n          _this50.t_exis.splice(id, 1);\n\n          _this50.totales_s();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    guardaArqueo: function guardaArqueo() {\n      var _this51 = this;\n\n      if (this.t_saldo.length == 0) {\n        toastr.error(\"Debe haber al menos un Saldo Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.t_exis.length == 0) {\n        toastr.error(\"Debe haber al menos una Existencia Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/arqueo_caja';\n        axios.post(url, {\n          id: _this.id_taller,\n          t_saldo: _this.t_saldo,\n          t_exis: _this.t_exis,\n          td: _this.sumas.td,\n          th: _this.sumas.th\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Arqueo Caja creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this51.totales_s();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Arqueo Caja actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this51.totales_s();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    //fin metodo guardar\n    ObtenerArqueo: function ObtenerArqueo() {\n      var _this52 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/arqueo-obtener-caja';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Arqueo Caja cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this52.t_saldo = response.data.saldo;\n          _this52.t_exis = response.data.exis;\n\n          _this52.totales_s();\n        }\n      })[\"catch\"](function (error) {});\n    } //fin function obtener\n\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////LIBRO BANCO ANEXO /////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar librosbanco = new Vue({\n  el: \"#librosbanco\",\n  data: {\n    id_taller: taller,\n    nombre: '',\n    n_banco: '',\n    c_banco: '',\n    lb_banco: [],\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    banco: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      cheque: '',\n      debe: '',\n      haber: '',\n      saldo: ''\n    },\n    suman: {\n      //suma total del libro CAJA\n      debe: 0,\n      haber: 0\n    },\n    update: false,\n    registro_id: '',\n    dgeneral: [],\n    registros_cierres: [],\n    ajustes: [],\n    nombre_cierre: ''\n  },\n  mounted: function mounted() {\n    this.obtenerLibroBanco();\n    this.obtenerDiarioGeneral();\n  },\n  methods: {\n    obtenerDiarioGeneral: function obtenerDiarioGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diariogeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.dgeneral = response.data.registros;\n          _this.nombre_dgral = response.data.nombre;\n          var inicial = response.data.inicial;\n\n          _this.dgeneral.unshift(inicial);\n        }\n      })[\"catch\"](function (error) {});\n    },\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    totales: function totales() {\n      this.suman.debe = 0;\n      this.suman.haber = 0;\n      var regis = this.lb_banco;\n      var total1 = 0;\n      var total2 = 0;\n      regis.forEach(function (obj, index) {\n        total1 += Number(obj.debe);\n      });\n      regis.forEach(function (obj, index) {\n        total2 += Number(obj.haber);\n      });\n      this.suman.debe = total1.toFixed(2);\n      this.suman.haber = total2.toFixed(2);\n    },\n    abrirLibroB: function abrirLibroB() {\n      //solo para acceder al modal para agregar todo pilas \n      this.update = false;\n      $('#libro-banco').modal('show');\n    },\n    //fin de metodo abrirtransaccion\n    agregarBanco: function agregarBanco() {\n      if (this.banco.fecha.trim() === '') {\n        toastr.error(\"La fecha es obligatoria \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.banco.detalle.trim() === '') {\n        toastr.error(\"El campo Detalle es Obligatorio\", \"Smartmoodle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.banco.debe.trim() != '' && this.banco.haber.trim() != '') {\n        toastr.error(\"No puede llenar ambos campos de debe y haber\", \"Smartmoodle\", {\n          \"timeOut\": \"30000\"\n        });\n      } else {\n        var banco = {\n          fecha: this.banco.fecha,\n          detalle: this.banco.detalle,\n          cheque: this.banco.cheque,\n          debe: this.banco.debe,\n          haber: this.banco.haber,\n          saldo: this.banco.saldo\n        };\n        this.lb_banco.push(banco);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.banco.fecha = '';\n        this.banco.detalle = '';\n        this.banco.cheque = '';\n        this.banco.debe = '';\n        this.banco.haber = '';\n        this.banco.saldo = '';\n        this.totales();\n      }\n    },\n    // function agregarbanco end\n    editLibroBanco: function editLibroBanco(index) {\n      this.banco.edit = true;\n      this.registro_id = index;\n      this.banco.fecha = this.lb_banco[index].fecha;\n      this.banco.detalle = this.lb_banco[index].detalle;\n      this.banco.cheque = this.lb_banco[index].cheque;\n      this.banco.debe = this.lb_banco[index].debe;\n      this.banco.haber = this.lb_banco[index].haber;\n      this.banco.saldo = this.lb_banco[index].saldo;\n    },\n    //end edit\n    editLibroBancoFuera: function editLibroBancoFuera(index) {\n      this.banco.edit = true;\n      this.registro_id = index;\n      this.banco.fecha = this.lb_banco[index].fecha;\n      this.banco.detalle = this.lb_banco[index].detalle;\n      this.banco.cheque = this.lb_banco[index].cheque;\n      this.banco.debe = this.lb_banco[index].debe;\n      this.banco.haber = this.lb_banco[index].haber;\n      this.banco.saldo = this.lb_banco[index].saldo;\n      $('#libro-banco').modal('show');\n    },\n    //end edit\n    cancelarEditlibroBanco: function cancelarEditlibroBanco() {\n      this.banco.fecha = '';\n      this.banco.detalle = '';\n      this.banco.cheque = '';\n      this.banco.debe = '';\n      this.banco.haber = '';\n      this.banco.saldo = '';\n      this.banco.edit = false;\n    },\n    actualizarLibroBanco: function actualizarLibroBanco() {\n      if (this.banco.fecha.trim() === '') {\n        toastr.error(\"La fecha es obligatoria \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.banco.detalle.trim() === '') {\n        toastr.error(\"El campo Detalle es Obligatorio\", \"Smartmoodle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.lb_banco[id].fecha = this.banco.fecha;\n        this.lb_banco[id].detalle = this.banco.detalle;\n        this.lb_banco[id].cheque = this.banco.cheque;\n        this.lb_banco[id].debe = this.banco.debe;\n        this.lb_banco[id].haber = this.banco.haber;\n        this.lb_banco[id].saldo = this.banco.saldo;\n        this.cancelarEditlibroBanco();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar libro Banco\n    eliminarLibro: function eliminarLibro() {\n      var id = this.eliminar.index;\n      this.lb_banco.splice(id, 1);\n      this.eliminar.index = '';\n      this.eliminar.nombre = '';\n      $('#eliminar-banco').modal('hide'); // en prueba para eliminar\n    },\n    //fin metodo eliminar compra \n    deleteLibroBanco: function deleteLibroBanco(index) {\n      this.lb_banco.splice(index, 1);\n      this.totales();\n    },\n    //finde delete\n    WarningEliminarLibro: function WarningEliminarLibro(id) {\n      var _this53 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.lb_banco[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar el Registro de ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this53.eliminar.nombre, 'success');\n\n          _this53.lb_banco.splice(id, 1);\n\n          _this53.totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    guardarlbBAnco: function guardarlbBAnco() {\n      var _this54 = this;\n\n      if (this.nombre.length == 0) {\n        toastr.error(\"Debe Ingresar el Nombre del Comercial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.n_banco.length == 0) {\n        toastr.error(\"Debe Ingresar el Nombre del Banco\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_banco.length == 0) {\n        toastr.error(\"Debe Ingresar la Cuenta del Banco\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.lb_banco.length == 0) {\n        toastr.error(\"Debe haber al menos un Registro\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/libro_banco';\n        axios.post(url, {\n          id: _this.id_taller,\n          lb_banco: _this.lb_banco,\n          nombre: _this.nombre,\n          n_banco: _this.n_banco,\n          c_banco: _this.c_banco,\n          debe: _this.suman.debe,\n          haber: _this.suman.haber\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Arqueo Libro Banco creado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            conciliacionb.obtenerLibroBanco();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Arqueo Libro Banco actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            conciliacionb.obtenerLibroBanco();\n\n            _this54.totales();\n          }\n        })[\"catch\"](function (error) {});\n      }\n    },\n    // fin metodo guardar libro Banco \n    obtenerLibroBanco: function obtenerLibroBanco() {\n      var _this55 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/libro-obtener-banco';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Libro Banco cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this55.lb_banco = response.data.mb;\n          _this55.nombre = response.data.nombre;\n          _this55.n_banco = response.data.n_banco;\n          _this55.c_banco = response.data.c_banco;\n\n          _this55.totales();\n        }\n      })[\"catch\"](function (error) {});\n    } //fin obtener libro banco\n\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////CONCILIACION BANCARIA /////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar conciliacionb = new Vue({\n  el: \"#conciliacionb\",\n  data: {\n    id_taller: taller,\n    nombre: '',\n    n_banco: '',\n    fecha: '',\n    lb_nombre: '',\n    lb_n_banco: '',\n    lb_c_banco: '',\n    debe_lbanco: '',\n    haber_lbanco: '',\n    lb_banco: [],\n    c_saldos: [],\n    saldo: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      saldo: ''\n    },\n    c_debitos: [],\n    debito: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      saldo: ''\n    },\n    c_creditos: [],\n    credito: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      saldo: ''\n    },\n    c_cheques: [],\n    cheques: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      saldo: ''\n    },\n    c_depositos: [],\n    deposito: {\n      edit: false,\n      fecha: '',\n      detalle: '',\n      saldo: ''\n    },\n    suman: {\n      saldo_c: 0,\n      saldo_ch: 0,\n      saldo_d: 0,\n      saldo_depositos: 0,\n      total: 0\n    },\n    update: false,\n    registro_id: ''\n  },\n  mounted: function mounted() {\n    this.obtenerConciliacionBancaria();\n    this.obtenerLibroBanco();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerLibroBanco: function obtenerLibroBanco() {\n      var _this56 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/libro-obtener-banco';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this56.lb_banco = response.data.mb;\n          _this56.lb_nombre = response.data.nombre;\n          _this56.lb_n_banco = response.data.n_banco;\n          _this56.lb_c_banco = response.data.c_banco;\n          _this56.debe_lbanco = response.data.totaldebe;\n          _this56.haber_lbanco = response.data.totalhaber; // this.totales();\n        }\n      })[\"catch\"](function (error) {});\n    },\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    //fin metodo decimal \n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    // fin fecha\n    totales: function totales() {\n      this.suman.saldo_c = 0;\n      this.suman.saldo_ch = 0;\n      this.suman.saldo_d = 0;\n      this.suman.saldo_depositos = 0;\n      this.suman.total = 0;\n      var r1 = this.c_saldos;\n      var r2 = this.c_debitos;\n      var r3 = this.c_creditos;\n      var r4 = this.c_cheques;\n      var r5 = this.c_depositos;\n      var t1 = 0;\n      var t2 = 0;\n      var t3 = 0;\n      var t4 = 0;\n      var t5 = 0;\n      r1.forEach(function (obj, index) {\n        t1 += Number(obj.saldo);\n      });\n      r2.forEach(function (obj, index) {\n        t2 += Number(obj.saldo);\n      });\n      r3.forEach(function (obj, index) {\n        t3 += Number(obj.saldo);\n      });\n      r4.forEach(function (obj, index) {\n        t4 += Number(obj.saldo);\n      });\n      r5.forEach(function (obj, index) {\n        t5 += Number(obj.saldo);\n      });\n      var tsd = t1 + t2 + t5;\n      var tsdc = tsd - t3;\n      var tch = tsdc - t4;\n      this.suman.saldo_d = t2.toFixed(2);\n      this.suman.saldo_c = t3.toFixed(2);\n      this.suman.saldo_ch = t4.toFixed(2);\n      this.suman.saldo_depositos = t5.toFixed(2);\n      this.suman.total = tch.toFixed(2);\n    },\n    //fin function totales\n    abrirSaldos: function abrirSaldos() {\n      //solo para acceder al modal para agregar todo pilas \n      this.limpiar();\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-saldo-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    abrirDebito: function abrirDebito() {\n      //solo para acceder al modal para agregar todo pilas \n      this.limpiar();\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-debito-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    abrirCredito: function abrirCredito() {\n      //solo para acceder al modal para agregar todo pilas \n      this.limpiar();\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-credito-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    abrirCheques: function abrirCheques() {\n      //solo para acceder al modal para agregar todo pilas \n      this.limpiar();\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-cheque-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    abrirDepositos: function abrirDepositos() {\n      //solo para acceder al modal para agregar todo pilas \n      this.limpiar();\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-deposito-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    agregarDeposito: function agregarDeposito() {\n      if (this.deposito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.deposito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.deposito.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var deposito = {\n          fecha: this.deposito.fecha,\n          detalle: this.deposito.detalle,\n          saldo: this.deposito.saldo\n        };\n        this.c_depositos.push(deposito);\n        toastr.success(\"El Valor agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.deposito.fecha = '';\n        this.deposito.detalle = '';\n        this.deposito.saldo = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar deposito\n    editDepositos: function editDepositos(index) {\n      this.deposito.edit = true;\n      this.registro_id = index;\n      this.deposito.fecha = this.c_depositos[index].fecha;\n      this.deposito.detalle = this.c_depositos[index].detalle;\n      this.deposito.saldo = this.c_depositos[index].saldo;\n      $('#nav-bih-conciliacion-deposito-tab').tab('show');\n    },\n    //end edit saldos\n    editDepositoFuera: function editDepositoFuera(index) {\n      this.deposito.edit = true;\n      this.registro_id = index;\n      this.deposito.fecha = this.c_depositos[index].fecha;\n      this.deposito.detalle = this.c_depositos[index].detalle;\n      this.deposito.saldo = this.c_depositos[index].saldo;\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-deposito-tab').tab('show');\n    },\n    //fin udpate saldo\n    cancelarEditDeposito: function cancelarEditDeposito() {\n      this.deposito.fecha = '';\n      this.deposito.detalle = '';\n      this.deposito.saldo = '';\n      this.deposito.edit = false;\n    },\n    EliminarDeposito: function EliminarDeposito(index) {\n      var _this57 = this;\n\n      var nombre = this.c_depositos[index].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this57.c_depositos.splice(index, 1);\n\n          _this57.totales();\n        }\n      });\n    },\n    // fin eliminar deposito\n    actualizarDeposito: function actualizarDeposito() {\n      if (this.deposito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.deposito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.deposito.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.c_depositos[id].fecha = this.deposito.fecha;\n        this.c_depositos[id].detalle = this.deposito.detalle;\n        this.c_depositos[id].saldo = this.deposito.saldo;\n        this.cancelarEditDeposito();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar saldo\n    agregarSaldo: function agregarSaldo() {\n      if (this.saldo.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.saldo.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.saldo.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var saldo = {\n          fecha: this.saldo.fecha,\n          detalle: this.saldo.detalle,\n          saldo: this.saldo.saldo\n        };\n        this.c_saldos.push(saldo);\n        toastr.success(\"El Valor agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.saldo.fecha = '';\n        this.saldo.detalle = '';\n        this.saldo.saldo = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar saldo\n    editSaldo: function editSaldo(index) {\n      this.saldo.edit = true;\n      this.registro_id = index;\n      this.saldo.fecha = this.c_saldos[index].fecha;\n      this.saldo.detalle = this.c_saldos[index].detalle;\n      this.saldo.saldo = this.c_saldos[index].saldo;\n      $('#nav-bih-conciliacion-saldo-tab').tab('show');\n    },\n    //end edit saldos\n    editSaldoFuera: function editSaldoFuera(index) {\n      this.saldo.edit = true;\n      this.registro_id = index;\n      this.saldo.fecha = this.c_saldos[index].fecha;\n      this.saldo.detalle = this.c_saldos[index].detalle;\n      this.saldo.saldo = this.c_saldos[index].saldo;\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-saldo-tab').tab('show');\n    },\n    //fin udpate saldo\n    cancelarEditSaldo: function cancelarEditSaldo() {\n      this.saldo.fecha = '';\n      this.saldo.detalle = '';\n      this.saldo.saldo = '';\n      this.saldo.edit = false;\n    },\n    EliminarSaldo: function EliminarSaldo(index) {\n      var _this58 = this;\n\n      var nombre = this.c_saldos[index].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this58.c_saldos.splice(index, 1);\n\n          _this58.totales();\n        }\n      });\n    },\n    actualizarSaldo: function actualizarSaldo() {\n      if (this.saldo.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.saldo.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.saldo.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.c_saldos[id].fecha = this.saldo.fecha;\n        this.c_saldos[id].detalle = this.saldo.detalle;\n        this.c_saldos[id].saldo = this.saldo.saldo;\n        this.cancelarEditSaldo();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar saldo\n    agregarCreditos: function agregarCreditos() {\n      if (this.credito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.credito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.credito.saldo.trim() === '') {\n        toastr.error(\"El Valor es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var credito = {\n          fecha: this.credito.fecha,\n          detalle: this.credito.detalle,\n          saldo: this.credito.saldo\n        };\n        this.c_creditos.push(credito);\n        toastr.success(\"El Credito agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.credito.fecha = '';\n        this.credito.detalle = '';\n        this.credito.saldo = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar saldo\n    editCredito: function editCredito(index) {\n      this.credito.edit = true;\n      this.registro_id = index;\n      this.credito.fecha = this.c_creditos[index].fecha;\n      this.credito.detalle = this.c_creditos[index].detalle;\n      this.credito.saldo = this.c_creditos[index].saldo;\n      $('#nav-bih-conciliacion-credito-tab').tab('show');\n    },\n    //end edit saldos\n    editCreditoFuera: function editCreditoFuera(index) {\n      this.credito.edit = true;\n      this.registro_id = index;\n      this.credito.fecha = this.c_creditos[index].fecha;\n      this.credito.detalle = this.c_creditos[index].detalle;\n      this.credito.saldo = this.c_creditos[index].saldo;\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-credito-tab').tab('show');\n    },\n    //fin udpate saldo\n    cancelarEditCredito: function cancelarEditCredito() {\n      this.credito.fecha = '';\n      this.credito.detalle = '';\n      this.credito.saldo = '';\n      this.credito.edit = false;\n    },\n    EliminarCredito: function EliminarCredito(index) {\n      var _this59 = this;\n\n      var nombre = this.c_creditos[index].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this59.c_creditos.splice(index, 1);\n\n          _this59.totales();\n        }\n      });\n    },\n    actualizarCredito: function actualizarCredito() {\n      if (this.credito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.credito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.credito.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.c_creditos[id].fecha = this.credito.fecha;\n        this.c_creditos[id].detalle = this.credito.detalle;\n        this.c_creditos[id].saldo = this.credito.saldo;\n        this.cancelarEditCredito();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar credito\n    agregarDebitos: function agregarDebitos() {\n      if (this.debito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.debito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.debito.saldo.trim() === '') {\n        toastr.error(\"El Valor es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var debito = {\n          fecha: this.debito.fecha,\n          detalle: this.debito.detalle,\n          saldo: this.debito.saldo\n        };\n        this.c_debitos.push(debito);\n        toastr.success(\"El Debito agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.debito.fecha = '';\n        this.debito.detalle = '';\n        this.debito.saldo = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar saldo\n    editDebito: function editDebito(index) {\n      this.debito.edit = true;\n      this.registro_id = index;\n      this.debito.fecha = this.c_debitos[index].fecha;\n      this.debito.detalle = this.c_debitos[index].detalle;\n      this.debito.saldo = this.c_debitos[index].saldo;\n      $('#nav-bih-conciliacion-debito-tab').tab('show');\n    },\n    //end edit saldos\n    editDebitoFuera: function editDebitoFuera(index) {\n      this.debito.edit = true;\n      this.registro_id = index;\n      this.debito.fecha = this.c_debitos[index].fecha;\n      this.debito.detalle = this.c_debitos[index].detalle;\n      this.debito.saldo = this.c_debitos[index].saldo;\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-debito-tab').tab('show');\n    },\n    //fin udpate saldo\n    cancelarEditDebito: function cancelarEditDebito() {\n      this.debito.fecha = '';\n      this.debito.detalle = '';\n      this.debito.saldo = '';\n      this.debito.edit = false;\n    },\n    EliminarDebito: function EliminarDebito(index) {\n      var _this60 = this;\n\n      var nombre = this.c_debitos[index].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this60.c_debitos.splice(index, 1);\n\n          _this60.totales();\n        }\n      });\n    },\n    actualizarDebito: function actualizarDebito() {\n      if (this.debito.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.debito.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.debito.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.c_debitos[id].fecha = this.debito.fecha;\n        this.c_debitos[id].detalle = this.debito.detalle;\n        this.c_debitos[id].saldo = this.debito.saldo;\n        this.cancelarEditDebito();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar debito\n    agregarCheques: function agregarCheques() {\n      if (this.cheques.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.cheques.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.cheques.saldo.trim() === '') {\n        toastr.error(\"El Valor es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var cheques = {\n          fecha: this.cheques.fecha,\n          detalle: this.cheques.detalle,\n          saldo: this.cheques.saldo\n        };\n        this.c_cheques.push(cheques);\n        toastr.success(\"El Cheque agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.cheques.fecha = '';\n        this.cheques.detalle = '';\n        this.cheques.saldo = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar cheque\n    editCheque: function editCheque(index) {\n      this.cheques.edit = true;\n      this.registro_id = index;\n      this.cheques.fecha = this.c_cheques[index].fecha;\n      this.cheques.detalle = this.c_cheques[index].detalle;\n      this.cheques.saldo = this.c_cheques[index].saldo;\n      $('#nav-bih-conciliacion-cheque-tab').tab('show');\n    },\n    //end edit saldos\n    editChequeFuera: function editChequeFuera(index) {\n      this.cheques.edit = true;\n      this.registro_id = index;\n      this.cheques.fecha = this.c_cheques[index].fecha;\n      this.cheques.detalle = this.c_cheques[index].detalle;\n      this.cheques.saldo = this.c_cheques[index].saldo;\n      $('#conciliacion-bancaria').modal('show');\n      $('#nav-bih-conciliacion-cheque-tab').tab('show');\n    },\n    //fin udpate saldo\n    cancelarEditCheque: function cancelarEditCheque() {\n      this.cheques.fecha = '';\n      this.cheques.detalle = '';\n      this.cheques.saldo = '';\n      this.cheques.edit = false;\n    },\n    EliminarCheque: function EliminarCheque(index) {\n      var _this61 = this;\n\n      var nombre = this.c_cheques[index].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar la cuenta ' + nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + nombre, 'success');\n\n          _this61.c_cheques.splice(index, 1);\n\n          _this61.totales();\n        }\n      });\n    },\n    actualizarCheque: function actualizarCheque() {\n      if (this.cheques.fecha.trim() === '') {\n        toastr.error(\"La Fecha es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.cheques.detalle.trim() === '') {\n        toastr.error(\"El Detalle es Obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.cheques.saldo.trim() === '') {\n        toastr.error(\"El Saldo es Obligatorio \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var id = this.registro_id;\n        this.c_cheques[id].fecha = this.cheques.fecha;\n        this.c_cheques[id].detalle = this.cheques.detalle;\n        this.c_cheques[id].saldo = this.cheques.saldo;\n        this.cancelarEditCheque();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de actualizar debito\n    limpiar: function limpiar() {\n      this.saldo.fecha = '';\n      this.saldo.detalle = '';\n      this.saldo.saldo = '';\n      this.debito.fecha = '';\n      this.debito.detalle = '';\n      this.debito.saldo = '';\n      this.credito.fecha = '';\n      this.credito.detalle = '';\n      this.credito.saldo = '';\n      this.cheques.detalle = '';\n      this.cheques.saldo = '';\n      this.cheques.fecha = '';\n      this.deposito.detalle = '';\n      this.deposito.saldo = '';\n      this.deposito.fecha = '';\n    },\n    //fin metodo limpiar todos los campos\n    guardarConciliacionB: function guardarConciliacionB() {\n      var _this62 = this;\n\n      if (this.nombre.length == 0) {\n        toastr.error(\"Debe Registrar el Nombre del Comercial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha.length == 0) {\n        toastr.error(\"Debe Ingresar la Fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.n_banco.length == 0) {\n        toastr.error(\"Debe Ingresar el Nombre del Banco\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_saldos.length == 0) {\n        toastr.error(\"Debe haber al menos un Saldo Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_debitos.length == 0) {\n        toastr.error(\"Debe haber al menos un Débito Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_depositos.length == 0) {\n        toastr.error(\"Debe haber al menos un Depósito Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_creditos.length == 0) {\n        toastr.error(\"Debe haber al menos un Crédito Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.c_cheques.length == 0) {\n        toastr.error(\"Debe haber al menos un Cheque Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/conciliacion_bancaria';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          n_banco: _this.n_banco,\n          fecha: _this.fecha,\n          saldo_c: _this.suman.saldo_c,\n          saldo_depositos: _this.suman.saldo_depositos,\n          saldo_d: _this.suman.saldo_d,\n          saldo_ch: _this.suman.saldo_ch,\n          total: _this.suman.total,\n          c_saldos: _this.c_saldos,\n          c_debitos: _this.c_debitos,\n          c_creditos: _this.c_creditos,\n          c_cheques: _this.c_cheques,\n          c_depositos: _this.c_depositos\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Conciliación Bancaria creada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Conciliación Bancaria actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this62.totales();\n          }\n        })[\"catch\"](function (error) {});\n      } //end else\n\n    },\n    //fin guardado conciliacion\n    obtenerConciliacionBancaria: function obtenerConciliacionBancaria() {\n      var _this63 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/conciliacion-obtener-bancaria';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Conciliación Bancaria cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this63.c_saldos = response.data.saldo;\n          _this63.c_debitos = response.data.debito;\n          _this63.c_depositos = response.data.deposito;\n          _this63.c_creditos = response.data.credito;\n          _this63.c_cheques = response.data.cheque;\n          _this63.nombre = response.data.nombre;\n          _this63.n_banco = response.data.n_banco;\n          _this63.fecha = response.data.fecha;\n\n          _this63.totales();\n        }\n      })[\"catch\"](function (error) {});\n    } //fin metodo obtener conciliacion bancaria\n\n  }\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////RETENCION DEL IVA /////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar reten_iva = new Vue({\n  el: \"#retencion_iva\",\n  data: {\n    id_taller: taller,\n    nombre_c: '',\n    fecha: '',\n    contribuyente: '',\n    ruc: '',\n    dgeneral: [],\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    t_ventas: [],\n    t_compras: [],\n    compra: {\n      edit: false,\n      fecha_c: '',\n      detalle: '',\n      proveedor: '',\n      base_im: '',\n      porcentaje: '',\n      v_retenido: '',\n      iva: '',\n      ret_10: '',\n      ret_20: '',\n      ret_30: '',\n      ret_70: '',\n      ret_100: ''\n    },\n    suma_c: {\n      suma_base: 0,\n      suma_reten: 0,\n      suma_ivac: 0,\n      suma_10: 0,\n      suma_20: 0,\n      suma_30: 0,\n      suma_70: 0,\n      suma_100: 0\n    },\n    venta: {\n      edit: false,\n      fecha_v: '',\n      detalle: '',\n      cliente: '',\n      base_im: '',\n      porcentaje: '',\n      v_retenido: '',\n      iva: '',\n      ret_10: '',\n      ret_20: '',\n      ret_30: '',\n      ret_70: '',\n      ret_100: ''\n    },\n    suma_v: {\n      suma_base: 0,\n      suma_reten: 0,\n      suma_ivav: 0,\n      suma_10: 0,\n      suma_20: 0,\n      suma_30: 0,\n      suma_70: 0,\n      suma_100: 0\n    },\n    total: {\n      t_ivacompra: '',\n      t_ivaventa: '',\n      total_pagar: '',\n      result_iva: '',\n      t_reten: ''\n    },\n    update: false,\n    registro_id: ''\n  },\n  //fin del data\n  mounted: function mounted() {\n    this.obtenerDiarioGeneral();\n    this.obtenerRetencionIva();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerDiarioGeneral: function obtenerDiarioGeneral() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/diariogeneral';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.dgeneral = response.data.registros;\n          _this.ajustes = response.data.ajustes;\n          _this.nombre_dgral = response.data.nombre;\n          var inicial = response.data.inicial;\n\n          _this.dgeneral.unshift(inicial);\n        }\n      })[\"catch\"](function (error) {});\n    },\n    //fin metodo obtener diario general \n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    //fin metodo formatofecha\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    //fin metodo decimales\n    Totales: function Totales() {\n      var r1 = this.t_compras;\n      var r2 = this.t_ventas;\n      var c1 = 0;\n      var c2 = 0;\n      var c3 = 0;\n      var c4 = 0;\n      var c5 = 0;\n      var c6 = 0;\n      var c7 = 0;\n      var c8 = 0;\n      var v1 = 0;\n      var v2 = 0;\n      var v3 = 0;\n      var v4 = 0;\n      var v5 = 0;\n      var v6 = 0;\n      var v7 = 0;\n      var v8 = 0; //suma compras\n\n      r1.forEach(function (r1, i) {\n        var temp = r1.base_im;\n\n        if (temp != null && temp !== '') {\n          c1 += Number(temp);\n        }\n      });\n      this.suma_c.suma_base = c1.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.v_retenido;\n\n        if (temp != null && temp !== '') {\n          c2 += Number(temp);\n        }\n      });\n      this.suma_c.suma_reten = c2.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.iva;\n\n        if (temp != null && temp !== '') {\n          c3 += Number(temp);\n        }\n      });\n      this.suma_c.suma_ivac = c3.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ret_10;\n\n        if (temp != null && temp !== '') {\n          c4 += Number(temp);\n        }\n      });\n      this.suma_c.suma_10 = c4.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ret_20;\n\n        if (temp != null && temp !== '') {\n          c5 += Number(temp);\n        }\n      });\n      this.suma_c.suma_20 = c5.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ret_30;\n\n        if (temp != null && temp !== '') {\n          c6 += Number(temp);\n        }\n      });\n      this.suma_c.suma_30 = c6.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ret_70;\n\n        if (temp != null && temp !== '') {\n          c7 += Number(temp);\n        }\n      });\n      this.suma_c.suma_70 = c7.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ret_100;\n\n        if (temp != null && temp !== '') {\n          c8 += Number(temp);\n        }\n      });\n      this.suma_c.suma_100 = c8.toFixed(2); //\n      //sumas ventas\n      //\n\n      r2.forEach(function (r2, i) {\n        var temp = r2.base_im;\n\n        if (temp != null && temp !== '') {\n          v1 += Number(temp);\n        }\n      });\n      this.suma_v.suma_base = v1.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.v_retenido;\n\n        if (temp != null && temp !== '') {\n          v2 += Number(temp);\n        }\n      });\n      this.suma_v.suma_reten = v2.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.iva;\n\n        if (temp != null && temp !== '') {\n          v3 += Number(temp);\n        }\n      });\n      this.suma_v.suma_ivav = v3.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.ret_10;\n\n        if (temp != null && temp !== '') {\n          v4 += Number(temp);\n        }\n      });\n      this.suma_v.suma_10 = v4.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.ret_20;\n\n        if (temp != null && temp !== '') {\n          v5 += Number(temp);\n        }\n      });\n      this.suma_v.suma_20 = v5.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.ret_30;\n\n        if (temp != null && temp !== '') {\n          v6 += Number(temp);\n        }\n      });\n      this.suma_v.suma_30 = v6.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.ret_70;\n\n        if (temp != null && temp !== '') {\n          v7 += Number(temp);\n        }\n      });\n      this.suma_v.suma_70 = v7.toFixed(2);\n      r2.forEach(function (r2, i) {\n        var temp = r2.ret_100;\n\n        if (temp != null && temp !== '') {\n          v8 += Number(temp);\n        }\n      });\n      this.suma_v.suma_100 = v8.toFixed(2);\n    },\n    //fin de sumatotales\n    abrirCompra: function abrirCompra() {\n      //solo para acceder al modal para agregar todo pilas \n      $('#modal-retencion').modal('show');\n      $('#ht-retencion-compra-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    abrirVenta: function abrirVenta() {\n      //solo para acceder al modal para agregar todo pilas \n      $('#modal-retencion').modal('show');\n      $('#ht-retencion-venta-tab').tab('show');\n    },\n    //fin de metodo abrirtransaccion\n    agregarCompra: function agregarCompra() {\n      if (this.compra.fecha_c == '') {\n        toastr.error(\"El campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.compra.detalle == '') {\n        toastr.error(\"El campo de Compra de Bienes y Servicios es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var compra = {\n          fecha_c: this.compra.fecha_c,\n          detalle: this.compra.detalle,\n          proveedor: this.compra.proveedor,\n          base_im: this.compra.base_im,\n          porcentaje: this.compra.porcentaje,\n          v_retenido: this.compra.v_retenido,\n          iva: this.compra.iva,\n          ret_10: this.compra.ret_10,\n          ret_20: this.compra.ret_20,\n          ret_30: this.compra.ret_30,\n          ret_70: this.compra.ret_70,\n          ret_100: this.compra.ret_100\n        };\n        this.t_compras.push(compra);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.compra.fecha_c = '';\n        this.compra.detalle = '';\n        this.compra.proveedor = '';\n        this.compra.base_im = '';\n        this.compra.porcentaje = '';\n        this.compra.v_retenido = '';\n        this.compra.iva = '';\n        this.compra.ret_10 = '';\n        this.compra.ret_20 = '';\n        this.compra.ret_30 = '';\n        this.compra.ret_70 = '';\n        this.compra.ret_100 = '';\n        this.Totales();\n      }\n    },\n    //fin de agregarCompra\n    editCompra: function editCompra(index) {\n      this.compra.edit = true;\n      this.registro_id = index;\n      this.compra.fecha_c = this.t_compras[index].fecha_c;\n      this.compra.detalle = this.t_compras[index].detalle;\n      this.compra.proveedor = this.t_compras[index].proveedor;\n      this.compra.base_im = this.t_compras[index].base_im;\n      this.compra.porcentaje = this.t_compras[index].porcentaje;\n      this.compra.v_retenido = this.t_compras[index].v_retenido;\n      this.compra.iva = this.t_compras[index].iva;\n      this.compra.ret_10 = this.t_compras[index].ret_10;\n      this.compra.ret_20 = this.t_compras[index].ret_20;\n      this.compra.ret_30 = this.t_compras[index].ret_30;\n      this.compra.ret_70 = this.t_compras[index].ret_70;\n      this.compra.ret_100 = this.t_compras[index].ret_100;\n      $('#ht-retencion-compra-tab').tab('show');\n    },\n    //fin de edit modal\n    editCompraFuera: function editCompraFuera(index) {\n      this.compra.edit = true;\n      this.registro_id = index;\n      this.compra.fecha_c = this.t_compras[index].fecha_c;\n      this.compra.detalle = this.t_compras[index].detalle;\n      this.compra.proveedor = this.t_compras[index].proveedor;\n      this.compra.base_im = this.t_compras[index].base_im;\n      this.compra.porcentaje = this.t_compras[index].porcentaje;\n      this.compra.v_retenido = this.t_compras[index].v_retenido;\n      this.compra.iva = this.t_compras[index].iva;\n      this.compra.ret_10 = this.t_compras[index].ret_10;\n      this.compra.ret_20 = this.t_compras[index].ret_20;\n      this.compra.ret_30 = this.t_compras[index].ret_30;\n      this.compra.ret_70 = this.t_compras[index].ret_70;\n      this.compra.ret_100 = this.t_compras[index].ret_100;\n      $('#modal-retencion').modal('show');\n      $('#ht-retencion-compra-tab').tab('show');\n    },\n    //fin de edit modal\n    cancelarEditCompra: function cancelarEditCompra() {\n      this.compra.fecha_c = '';\n      this.compra.detalle = '';\n      this.compra.proveedor = '';\n      this.compra.base_im = '';\n      this.compra.porcentaje = '';\n      this.compra.v_retenido = '';\n      this.compra.iva = '';\n      this.compra.ret_10 = '';\n      this.compra.ret_20 = '';\n      this.compra.ret_30 = '';\n      this.compra.ret_70 = '';\n      this.compra.ret_100 = '';\n      this.compra.edit = false;\n    },\n    //fin de cancelar edicion\n    actualizarCompra: function actualizarCompra() {\n      if (this.compra.fecha_c == '') {\n        toastr.error(\"El campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.compra.detalle == '') {\n        toastr.error(\"El campo de Compra de Bienes y Servicios es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_compras[index].fecha_c = this.compra.fecha_c;\n        this.t_compras[index].detalle = this.compra.detalle;\n        this.t_compras[index].proveedor = this.compra.proveedor;\n        this.t_compras[index].base_im = this.compra.base_im;\n        this.t_compras[index].porcentaje = this.compra.porcentaje;\n        this.t_compras[index].v_retenido = this.compra.v_retenido;\n        this.t_compras[index].iva = this.compra.iva;\n        this.t_compras[index].ret_10 = this.compra.ret_10;\n        this.t_compras[index].ret_20 = this.compra.ret_20;\n        this.t_compras[index].ret_30 = this.compra.ret_30;\n        this.t_compras[index].ret_70 = this.compra.ret_70;\n        this.t_compras[index].ret_100 = this.compra.ret_100;\n        this.cancelarEditCompra();\n        this.Totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de function  actualizar \n    WarningEliminarCompra: function WarningEliminarCompra(id) {\n      var _this64 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_compras[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este Registro ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this64.eliminar.nombre, 'success');\n\n          _this64.t_compras.splice(id, 1);\n\n          _this64.Totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    agregarVenta: function agregarVenta() {\n      if (this.venta.fecha_v == '') {\n        toastr.error(\"El campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.venta.detalle == '') {\n        toastr.error(\"El campo de Venta de Bienes y Servicios es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var venta = {\n          fecha_v: this.venta.fecha_v,\n          detalle: this.venta.detalle,\n          cliente: this.venta.cliente,\n          base_im: this.venta.base_im,\n          porcentaje: this.venta.porcentaje,\n          v_retenido: this.venta.v_retenido,\n          iva: this.venta.iva,\n          ret_10: this.venta.ret_10,\n          ret_20: this.venta.ret_20,\n          ret_30: this.venta.ret_30,\n          ret_70: this.venta.ret_70,\n          ret_100: this.venta.ret_100\n        };\n        this.t_ventas.push(venta);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.venta.fecha_v = '';\n        this.venta.detalle = '';\n        this.venta.cliente = '';\n        this.venta.base_im = '';\n        this.venta.porcentaje = '';\n        this.venta.v_retenido = '';\n        this.venta.iva = '';\n        this.venta.ret_10 = '';\n        this.venta.ret_20 = '';\n        this.venta.ret_30 = '';\n        this.venta.ret_70 = '';\n        this.venta.ret_100 = '';\n        this.Totales();\n      }\n    },\n    //fin de agregarVenta\n    editVenta: function editVenta(index) {\n      this.venta.edit = true;\n      this.registro_id = index;\n      this.venta.fecha_v = this.t_ventas[index].fecha_v;\n      this.venta.detalle = this.t_ventas[index].detalle;\n      this.venta.cliente = this.t_ventas[index].cliente;\n      this.venta.base_im = this.t_ventas[index].base_im;\n      this.venta.porcentaje = this.t_ventas[index].porcentaje;\n      this.venta.v_retenido = this.t_ventas[index].v_retenido;\n      this.venta.iva = this.t_ventas[index].iva;\n      this.venta.ret_10 = this.t_ventas[index].ret_10;\n      this.venta.ret_20 = this.t_ventas[index].ret_20;\n      this.venta.ret_30 = this.t_ventas[index].ret_30;\n      this.venta.ret_70 = this.t_ventas[index].ret_70;\n      this.venta.ret_100 = this.t_ventas[index].ret_100;\n      $('#ht-retencion-venta-tab').tab('show');\n    },\n    //fin de edit modal\n    editVentaFuera: function editVentaFuera(index) {\n      this.venta.edit = true;\n      this.registro_id = index;\n      this.venta.fecha_v = this.t_ventas[index].fecha_v;\n      this.venta.detalle = this.t_ventas[index].detalle;\n      this.venta.cliente = this.t_ventas[index].cliente;\n      this.venta.base_im = this.t_ventas[index].base_im;\n      this.venta.porcentaje = this.t_ventas[index].porcentaje;\n      this.venta.v_retenido = this.t_ventas[index].v_retenido;\n      this.venta.iva = this.t_ventas[index].iva;\n      this.venta.ret_10 = this.t_ventas[index].ret_10;\n      this.venta.ret_20 = this.t_ventas[index].ret_20;\n      this.venta.ret_30 = this.t_ventas[index].ret_30;\n      this.venta.ret_70 = this.t_ventas[index].ret_70;\n      this.venta.ret_100 = this.t_ventas[index].ret_100;\n      $('#modal-retencion').modal('show');\n      $('#ht-retencion-venta-tab').tab('show');\n    },\n    //fin de edit modal venta\n    cancelarEditVenta: function cancelarEditVenta() {\n      this.venta.fecha_v = '';\n      this.venta.detalle = '';\n      this.venta.cliente = '';\n      this.venta.base_im = '';\n      this.venta.porcentaje = '';\n      this.venta.v_retenido = '';\n      this.venta.iva = '';\n      this.venta.ret_10 = '';\n      this.venta.ret_20 = '';\n      this.venta.ret_30 = '';\n      this.venta.ret_70 = '';\n      this.venta.ret_100 = '';\n      this.venta.edit = false;\n    },\n    //fin de cancelar edicion venta\n    actualizarVenta: function actualizarVenta() {\n      if (this.venta.fecha_v == '') {\n        toastr.error(\"El campo Fecha es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.venta.detalle == '') {\n        toastr.error(\"El campo de Venta de Bienes y Servicios es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_ventas[index].fecha_v = this.venta.fecha_v;\n        this.t_ventas[index].detalle = this.venta.detalle;\n        this.t_ventas[index].cliente = this.venta.cliente;\n        this.t_ventas[index].base_im = this.venta.base_im;\n        this.t_ventas[index].porcentaje = this.venta.porcentaje;\n        this.t_ventas[index].v_retenido = this.venta.v_retenido;\n        this.t_ventas[index].iva = this.venta.iva;\n        this.t_ventas[index].ret_10 = this.venta.ret_10;\n        this.t_ventas[index].ret_20 = this.venta.ret_20;\n        this.t_ventas[index].ret_30 = this.venta.ret_30;\n        this.t_ventas[index].ret_70 = this.venta.ret_70;\n        this.t_ventas[index].ret_100 = this.venta.ret_100;\n        this.cancelarEditVenta();\n        this.Totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin de function  actualizar \n    WarningEliminarVenta: function WarningEliminarVenta(id) {\n      var _this65 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_ventas[id].detalle;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar este Registro ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la cuenta ' + _this65.eliminar.nombre, 'success');\n\n          _this65.t_ventas.splice(id, 1);\n\n          _this65.Totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarcompra\n    guardaretencioniva: function guardaretencioniva() {\n      var _this66 = this;\n\n      if (this.nombre_c.length == 0) {\n        toastr.error(\"Debe Registrar el Nombre del Comercial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha.length == 0) {\n        toastr.error(\"Debe Ingresar la Fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.contribuyente.length == 0) {\n        toastr.error(\"Debe Ingresar El Contribuyente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.ruc.length == 0) {\n        toastr.error(\"Debe Ingresar el Ruc \", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/retencion_iva';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre_c: _this.nombre_c,\n          contribuyente: _this.contribuyente,\n          fecha: _this.fecha,\n          ruc: _this.ruc,\n          sumac_base: _this.suma_c.suma_base,\n          sumac_reten: _this.suma_c.suma_reten,\n          sumac_ivac: _this.suma_c.suma_ivac,\n          sumac_10: _this.suma_c.suma_10,\n          sumac_20: _this.suma_c.suma_20,\n          sumac_30: _this.suma_c.suma_30,\n          sumac_70: _this.suma_c.suma_70,\n          sumac_100: _this.suma_c.suma_100,\n          sumav_base: _this.suma_v.suma_base,\n          sumav_reten: _this.suma_v.suma_reten,\n          sumav_ivav: _this.suma_v.suma_ivav,\n          sumav_10: _this.suma_v.suma_10,\n          sumav_20: _this.suma_v.suma_20,\n          sumav_30: _this.suma_v.suma_30,\n          sumav_70: _this.suma_v.suma_70,\n          sumav_100: _this.suma_v.suma_100,\n          t_ivacompra: _this.total.t_ivacompra,\n          t_ivaventa: _this.total.t_ivaventa,\n          total: _this.total.total_pagar,\n          t_reten: _this.total.t_reten,\n          result_iva: _this.total.result_iva,\n          t_compras: _this.t_compras,\n          t_ventas: _this.t_ventas\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Retención del Iva creada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Retención del Iva actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n\n            _this66.Totales();\n          }\n        })[\"catch\"](function (error) {});\n      } //else fin\n\n    },\n    //fin metodo guardar\n    obtenerRetencionIva: function obtenerRetencionIva() {\n      var _this67 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/retencion-obtener-iva';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Retencion del Iva cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this67.t_compras = response.data.compra;\n          _this67.t_ventas = response.data.venta;\n          _this67.nombre_c = response.data.nombre;\n          _this67.ruc = response.data.ruc;\n          _this67.contribuyente = response.data.contribuyente;\n          _this67.fecha = response.data.fecha;\n          _this67.total.t_ivacompra = response.data.t_ivacompra;\n          _this67.total.t_ivaventa = response.data.t_ivaventa;\n          _this67.total.t_reten = response.data.t_reten;\n          _this67.total.result_iva = response.data.result_iva;\n          _this67.total.total_pagar = response.data.total;\n\n          _this67.Totales();\n        }\n      })[\"catch\"](function (error) {});\n    } //fin metodo obtener retencion del iva\n\n  } //fin de methods\n\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////NOMINA DE EMPLEADOS ///////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar nomina_em = new Vue({\n  el: '#nomina_empleado',\n  data: {\n    id_taller: taller,\n    fecha: '',\n    nombre: '',\n    t_nomina: [],\n    nomina: {\n      edit: false,\n      nombre_e: '',\n      cargo: '',\n      sueldo: '',\n      s_tiempo: '',\n      ingresos: '',\n      iees: '',\n      pres_iees: '',\n      pres_cia: '',\n      anticipo: '',\n      imp_renta: '',\n      egresos: '',\n      neto_pagar: ''\n    },\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    sobretiempo: {\n      sueldo: '',\n      hora_trabajo: '',\n      total_suple: '',\n      total_extra: '',\n      suma_suple: '',\n      suma_extra: '',\n      total: ''\n    },\n    calculo: {\n      valor: '',\n      tiempo: '',\n      interes: '',\n      total: ''\n    },\n    calculo1: {\n      valor: '',\n      mes: '',\n      interes: '',\n      total: ''\n    },\n    suma: {\n      s_sueldo: 0,\n      s_sobretiempo: 0,\n      s_tingreso: 0,\n      s_iess: 0,\n      s_piess: 0,\n      s_pcias: 0,\n      s_anticipo: 0,\n      s_impr: 0,\n      s_tegresos: 0,\n      s_netopagar: 0\n    },\n    deduccion: {\n      valor: '',\n      descripcion: ''\n    },\n    deducciones: [],\n    impuesto: {\n      iva: '',\n      fraccion_excedente_iva: '',\n      ingreso_gravable: '',\n      iies: '',\n      ingreso_liquido: '',\n      sueldo: '',\n      comisiones: '',\n      fraccion: '',\n      fraccion_excedente: '',\n      impuesto_fraccion: '',\n      ingreso_mensual: '',\n      base_imponible: '',\n      ingreso_anual: '',\n      interes: '',\n      total: '',\n      total_impuesto: ''\n    },\n    update: false,\n    registro_id: ''\n  },\n  //end data\n  mounted: function mounted() {\n    this.obtenerNomina();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    calculoHora: function calculoHora() {\n      if (this.sobretiempo.sueldo == '') {\n        toastr.error(\"No ha agregado el sueldo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var hora_trabajo = Number(this.sobretiempo.sueldo) / 30 / 8;\n        this.sobretiempo.hora_trabajo = Number(hora_trabajo).toFixed(2);\n      }\n    },\n    calculoSobre: function calculoSobre() {\n      var suplementaria = Number(this.sobretiempo.total_suple) * Number(this.sobretiempo.hora_trabajo) * 1.5;\n      var extraordinaria = Number(this.sobretiempo.total_extra) * Number(this.sobretiempo.hora_trabajo) * 2;\n      this.sobretiempo.suma_suple = Number(suplementaria).toFixed(2);\n      this.sobretiempo.suma_extra = Number(extraordinaria).toFixed(2);\n      this.sobretiempo.total = Number(suplementaria + extraordinaria).toFixed(2);\n    },\n    limpiarSobre: function limpiarSobre() {\n      this.sobretiempo.sueldo = '';\n      this.sobretiempo.hora_trabajo = '';\n      this.sobretiempo.total_suple = '';\n      this.sobretiempo.total_extra = '';\n      this.sobretiempo.suma_suple = '';\n      this.sobretiempo.suma_extra = '';\n      this.sobretiempo.total = '';\n    },\n    impuestoAgregado: function impuestoAgregado(tipo) {\n      if (tipo == 'ingresos') {\n        var sueldo = Number(this.impuesto.sueldo);\n        var comision = Number(this.impuesto.comisiones);\n        var ingreso_gravable = sueldo - comision;\n        this.impuesto.ingreso_gravable = Number(ingreso_gravable).toFixed(2);\n        var iies = ingreso_gravable * 9.45 / 100;\n        this.impuesto.iies = Number(iies).toFixed(2);\n        ;\n        var ingreso_liquido = ingreso_gravable - iies;\n        this.impuesto.ingreso_liquido = Number(ingreso_liquido).toFixed(2);\n        this.impuestoAgregado('deduccion');\n      } else if (tipo == 'deduccion') {\n        var deduccion = 0;\n        var deducciones = this.deducciones;\n        deducciones.forEach(function (d) {\n          deduccion += Number(d.valor);\n        });\n\n        var _ingreso_liquido = Number(this.impuesto.ingreso_liquido);\n\n        var ingreso_mensual = _ingreso_liquido - deduccion;\n        var ingreso_anual = ingreso_mensual * 12;\n        this.impuesto.ingreso_mensual = Number(ingreso_mensual).toFixed(2);\n        this.impuesto.ingreso_anual = Number(ingreso_anual).toFixed(2);\n        this.impuesto.base_imponible = Number(ingreso_anual).toFixed(2);\n      } else if (tipo == 'final') {\n        var iva = Number(this.impuesto.interes);\n        var base_imponible = Number(this.impuesto.base_imponible);\n        var fraccion = Number(this.impuesto.fraccion);\n        var impuesto_fraccion = Number(this.impuesto.impuesto_fraccion);\n        var fraccion_excedente = base_imponible - Number(fraccion);\n        var fraccion_excedenteiva = fraccion_excedente * Number(iva) / 100;\n        var total_impuesto = Number(impuesto_fraccion) + fraccion_excedenteiva;\n        this.impuesto.fraccion_excedente = Number(fraccion_excedente).toFixed(2);\n        this.impuesto.fraccion_excedente_iva = Number(fraccion_excedenteiva).toFixed(2);\n        this.impuesto.total_impuesto = Number(total_impuesto).toFixed(2);\n        var total = total_impuesto / 12;\n        this.impuesto.total = Number(total).toFixed(2);\n        this.impuesto.iva = iva;\n      }\n    },\n    agregardeduccion: function agregardeduccion() {\n      if (this.deduccion.valor == '') {\n        toastr.error(\"No puede dejar el campo vacio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var valor = Number(this.deduccion.valor);\n        var deduccio = {\n          valor: valor,\n          descripcion: this.deduccion.descripcion\n        };\n        this.deducciones.push(deduccio);\n        this.deduccion.descripcion = '';\n        this.deduccion.valor = '';\n        this.impuestoAgregado('deduccion');\n      }\n    },\n    limpiar: function limpiar() {\n      this.impuesto.total = '';\n      this.impuesto.sueldo = '';\n      this.impuesto.fraccion = '';\n      this.impuesto.impuesto_fraccion = '';\n      this.impuesto.interes = '';\n      this.deducciones = [];\n      this.impuesto.comisiones = '';\n      this.impuesto.ingreso_gravable = '';\n      this.impuesto.iies = '';\n      this.impuesto.ingreso_liquido = '';\n      this.impuesto.ingreso_mensual = '';\n      this.impuesto.ingreso_anual = '';\n      this.impuesto.base_imponible = '';\n      this.impuesto.fraccion_excedente = '';\n      this.impuesto.fraccion_excedente_iva = '';\n      this.impuesto.total_impuesto = '';\n      this.impuesto.iva = '';\n      toastr.error(\"Limpiado Correctamente\", \"Smarmoddle\", {\n        \"timeOut\": \"3000\"\n      });\n    },\n    borrarDeduccion: function borrarDeduccion(index) {\n      this.deducciones.splice(index, 1);\n      this.impuestoAgregado('deduccion');\n    },\n    impuestoRenta: function impuestoRenta() {\n      if (this.impuesto.fraccion == '') {\n        toastr.error(\"No has agregado la fraccion basica\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.impuesto.impuesto_fraccion == '') {\n        toastr.error(\"No has agregado el impuesto a fraccion basica\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.impuesto.interes == '') {\n        toastr.error(\"No has agregado el porcentaje\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        this.impuestoAgregado('final');\n      }\n    },\n    //impuesto agregado\n    prestamoHipotecario: function prestamoHipotecario(valor, tiempo, interes) {\n      var total = 0;\n      var division = Number(valor) / Number(tiempo);\n      var porcentaje = division * Number(interes) / 100;\n      var subtotal = division + porcentaje;\n      total = subtotal / 12;\n      return Number(total).toFixed(2);\n    },\n    //end prestamo hipotecario\n    calculoHipo: function calculoHipo() {\n      if (this.calculo.valor == '') {\n        toastr.error(\"No has agregado el valor\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.calculo.tiempo == '') {\n        toastr.error(\"No has agregado el tiempo\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.calculo.interes == '') {\n        toastr.error(\"Debe agregar el Interes\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var calculo = this.calculo.valor;\n        var tiempo = this.calculo.tiempo;\n        var interes = this.calculo.interes;\n        var hipo = this.prestamoHipotecario(calculo, tiempo, interes);\n        this.calculo.total = hipo;\n        this.calculo.valor = '';\n        this.calculo.tiempo = '';\n        this.calculo.interes = '';\n      }\n    },\n    //fin calculo \n    prestamoQuirografario: function prestamoQuirografario(valor, meses, interes) {\n      var total = 0;\n      var division = Number(valor) / Number(meses);\n      var porcentaje = division * Number(interes) / 100;\n      total = division + porcentaje;\n      return Number(total).toFixed(2);\n    },\n    //end prestamo\n    calculoquiro: function calculoquiro() {\n      if (this.calculo1.valor == '') {\n        toastr.error(\"No has agregado el valor\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.calculo1.mes == '') {\n        toastr.error(\"No has agregado el Mes\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.calculo1.interes == '') {\n        toastr.error(\"Debe agregar el Interes\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var valor = this.calculo1.valor;\n        var mes = this.calculo1.mes;\n        var interes = this.calculo1.interes;\n        var hipo = this.prestamoQuirografario(valor, mes, interes);\n        this.calculo1.total = hipo;\n        this.calculo1.valor = '';\n        this.calculo1.mes = '';\n        this.calculo1.interes = '';\n      }\n    },\n    //fin calculo \n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    //fin metodo decimal \n    formatoFecha: function formatoFecha(fecha) {\n      if (fecha !== null) {\n        var date = fecha.split('-').reverse().join('-');\n        return date;\n      } else {\n        return;\n      }\n    },\n    // fin fecha\n    abrirNomina: function abrirNomina() {\n      //solo para acceder al modal para agregar todo pilas \n      this.update = false;\n      $('#modal_nomina').modal('show');\n    },\n    //fin de metodo abrirtransaccion\n    totales: function totales() {\n      var r1 = this.t_nomina;\n      var c1 = 0;\n      var c2 = 0;\n      var c3 = 0;\n      var c4 = 0;\n      var c5 = 0;\n      var c6 = 0;\n      var c7 = 0;\n      var c8 = 0;\n      var c9 = 0;\n      var c10 = 0;\n      r1.forEach(function (r1, i) {\n        var temp = r1.sueldo;\n\n        if (temp != null && temp !== '') {\n          c1 += Number(temp);\n        }\n      });\n      this.suma.s_sueldo = c1.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.s_tiempo;\n\n        if (temp != null && temp !== '') {\n          c2 += Number(temp);\n        }\n      });\n      this.suma.s_sobretiempo = c2.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.ingresos;\n\n        if (temp != null && temp !== '') {\n          c3 += Number(temp);\n        }\n      });\n      this.suma.s_tingreso = c3.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.iees;\n\n        if (temp != null && temp !== '') {\n          c4 += Number(temp);\n        }\n      });\n      this.suma.s_iess = c4.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.pres_iees;\n\n        if (temp != null && temp !== '') {\n          c5 += Number(temp);\n        }\n      });\n      this.suma.s_piess = c5.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.pres_cia;\n\n        if (temp != null && temp !== '') {\n          c6 += Number(temp);\n        }\n      });\n      this.suma.s_pcias = c6.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.anticipo;\n\n        if (temp != null && temp !== '') {\n          c7 += Number(temp);\n        }\n      });\n      this.suma.s_anticipo = c7.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.imp_renta;\n\n        if (temp != null && temp !== '') {\n          c8 += Number(temp);\n        }\n      });\n      this.suma.s_impr = c8.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.egresos;\n\n        if (temp != null && temp !== '') {\n          c9 += Number(temp);\n        }\n      });\n      this.suma.s_tegresos = c9.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.neto_pagar;\n\n        if (temp != null && temp !== '') {\n          c10 += Number(temp);\n        }\n      });\n      this.suma.s_netopagar = c10.toFixed(2);\n    },\n    agregarNomina: function agregarNomina() {\n      if (this.nomina.nombre_e == '') {\n        toastr.error(\"El Nombre del Empleado es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nomina.cargo == '') {\n        toastr.error(\"El Cargo del Empleado es Obligatorio es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var nomina = {\n          nombre_e: this.nomina.nombre_e,\n          cargo: this.nomina.cargo,\n          sueldo: this.nomina.sueldo,\n          s_tiempo: this.nomina.s_tiempo,\n          ingresos: this.nomina.ingresos,\n          iees: this.nomina.iees,\n          pres_iees: this.nomina.pres_iees,\n          pres_cia: this.nomina.pres_cia,\n          anticipo: this.nomina.anticipo,\n          imp_renta: this.nomina.imp_renta,\n          egresos: this.nomina.egresos,\n          neto_pagar: this.nomina.neto_pagar\n        };\n        this.t_nomina.push(nomina);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.nomina.nombre_e = '';\n        this.nomina.cargo = '';\n        this.nomina.sueldo = '';\n        this.nomina.s_tiempo = '';\n        this.nomina.ingresos = '';\n        this.nomina.iees = '';\n        this.nomina.pres_iees = '';\n        this.nomina.pres_cia = '';\n        this.nomina.anticipo = '';\n        this.nomina.imp_renta = '';\n        this.nomina.egresos = '';\n        this.nomina.neto_pagar = '';\n        this.totales();\n      }\n    },\n    //fin metodo agregar\n    editNomina: function editNomina(index) {\n      this.nomina.edit = true;\n      this.registro_id = index;\n      this.nomina.nombre_e = this.t_nomina[index].nombre_e;\n      this.nomina.cargo = this.t_nomina[index].cargo;\n      this.nomina.sueldo = this.t_nomina[index].sueldo;\n      this.nomina.s_tiempo = this.t_nomina[index].s_tiempo;\n      this.nomina.ingresos = this.t_nomina[index].ingresos;\n      this.nomina.iees = this.t_nomina[index].iees;\n      this.nomina.pres_iees = this.t_nomina[index].pres_iees;\n      this.nomina.pres_cia = this.t_nomina[index].pres_cia;\n      this.nomina.anticipo = this.t_nomina[index].anticipo;\n      this.nomina.imp_renta = this.t_nomina[index].imp_renta;\n      this.nomina.egresos = this.t_nomina[index].egresos;\n      this.nomina.neto_pagar = this.t_nomina[index].neto_pagar;\n    },\n    //fin edit modal\n    editNominaFuera: function editNominaFuera(index) {\n      this.nomina.edit = true;\n      this.registro_id = index;\n      this.nomina.nombre_e = this.t_nomina[index].nombre_e;\n      this.nomina.cargo = this.t_nomina[index].cargo;\n      this.nomina.sueldo = this.t_nomina[index].sueldo;\n      this.nomina.s_tiempo = this.t_nomina[index].s_tiempo;\n      this.nomina.ingresos = this.t_nomina[index].ingresos;\n      this.nomina.iees = this.t_nomina[index].iees;\n      this.nomina.pres_iees = this.t_nomina[index].pres_iees;\n      this.nomina.pres_cia = this.t_nomina[index].pres_cia;\n      this.nomina.anticipo = this.t_nomina[index].anticipo;\n      this.nomina.imp_renta = this.t_nomina[index].imp_renta;\n      this.nomina.egresos = this.t_nomina[index].egresos;\n      this.nomina.neto_pagar = this.t_nomina[index].neto_pagar;\n      $('#modal_nomina').modal('show');\n    },\n    //fin edit fuera\n    cancelarEditNomina: function cancelarEditNomina() {\n      this.nomina.nombre_e = '';\n      this.nomina.cargo = '';\n      this.nomina.sueldo = '';\n      this.nomina.s_tiempo = '';\n      this.nomina.ingresos = '';\n      this.nomina.iees = '';\n      this.nomina.pres_iees = '';\n      this.nomina.pres_cia = '';\n      this.nomina.anticipo = '';\n      this.nomina.imp_renta = '';\n      this.nomina.egresos = '';\n      this.nomina.neto_pagar = '';\n      this.nomina.edit = false;\n    },\n    //fin cancelar edit de nomina\n    actualizarNomina: function actualizarNomina() {\n      if (this.nomina.nombre_e == '') {\n        toastr.error(\"El Nombre del Empleado es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.nomina.cargo == '') {\n        toastr.error(\"El Cargo del Empleado es Obligatorio es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_nomina[index].nombre_e = this.nomina.nombre_e;\n        this.t_nomina[index].cargo = this.nomina.cargo;\n        this.t_nomina[index].sueldo = this.nomina.sueldo;\n        this.t_nomina[index].s_tiempo = this.nomina.s_tiempo;\n        this.t_nomina[index].ingresos = this.nomina.ingresos;\n        this.t_nomina[index].iees = this.nomina.iees;\n        this.t_nomina[index].pres_iees = this.nomina.pres_iees;\n        this.t_nomina[index].pres_cia = this.nomina.pres_cia;\n        this.t_nomina[index].anticipo = this.nomina.anticipo;\n        this.t_nomina[index].imp_renta = this.nomina.imp_renta;\n        this.t_nomina[index].egresos = this.nomina.egresos;\n        this.t_nomina[index].neto_pagar = this.nomina.neto_pagar;\n        this.cancelarEditNomina();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      }\n    },\n    //fin actualizar nomina\n    eliminarNomina: function eliminarNomina() {\n      var id = this.eliminar.index;\n      this.t_nomina.splice(id, 1);\n      this.eliminar.index = '', this.eliminar.nombre = '', $('#eliminar_nomina').modal('hide'); // en prueba para eliminar\n    },\n    //fin eliminar nomina\n    deleteNomina: function deleteNomina(index) {\n      this.t_nomina.splice(index, 1);\n      this.Totales();\n    },\n    //fin metodo delete\n    WarningEliminarNomina: function WarningEliminarNomina(id) {\n      var _this68 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_nomina[id].nombre_e;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar el Registro de  ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la Nomina ' + _this68.eliminar.nombre, 'success');\n\n          _this68.t_nomina.splice(id, 1);\n\n          _this68.totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarnomina\n    guardarNomina: function guardarNomina() {\n      var _this69 = this;\n\n      if (this.nombre.length == 0) {\n        toastr.error(\"Debe Registrar el Nombre del Comercial\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.fecha.length == 0) {\n        toastr.error(\"Debe Ingresar la Fecha\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/nomina_empleado';\n        axios.post(url, {\n          id: _this.id_taller,\n          nombre: _this.nombre,\n          fecha: _this.fecha,\n          t_nomina: _this.t_nomina,\n          s_sueldo: _this.suma.s_sueldo,\n          s_sobretiempo: _this.suma.s_sobretiempo,\n          s_tingreso: _this.suma.s_tingreso,\n          s_iess: _this.suma.s_iess,\n          s_piess: _this.suma.s_piess,\n          s_pcias: _this.suma.s_pcias,\n          s_anticipo: _this.suma.s_anticipo,\n          s_impr: _this.suma.s_impr,\n          s_tegresos: _this.suma.s_tegresos,\n          s_netopagar: _this.suma.s_netopagar\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Nómina de Empleados creada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            provision_b.obtenerNomina();\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Nómina de Empleados actualizado\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n            provision_b.obtenerNomina();\n\n            _this69.totales();\n          }\n        })[\"catch\"](function (error) {});\n      } //end else\n\n    },\n    //fin metodo guardar nomina\n    obtenerNomina: function obtenerNomina() {\n      var _this70 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/nomina-obtener-empleado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.info(\"Anexo Nómina de Empleado cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this70.nombre = response.data.nombre;\n          _this70.fecha = response.data.fecha;\n          _this70.t_nomina = response.data.nomina;\n\n          _this70.totales();\n        }\n      })[\"catch\"](function (error) {});\n    } //fin metodo obtener nomina\n\n  } //fin methods\n\n}); /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////PROVISIONDE BENEFICIOS SOCIALES////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nvar provision_b = new Vue({\n  el: '#provision_beneficio',\n  data: {\n    id_taller: taller,\n    t_nomina: [],\n    // de la nomina\n    nombre: '',\n    //de la nomina\n    fecha: '',\n    //de la nomina\n    t_pro: [],\n    pro: {\n      edit: false,\n      nombre_em: '',\n      dias: '',\n      v_recibido: '',\n      d_tercero: '',\n      d_cuarto: '',\n      vacaciones: '',\n      f_reserva: ''\n    },\n    eliminar: {\n      index: '',\n      nombre: ''\n    },\n    suma: {\n      s_valor: '',\n      s_tercero: '',\n      s_cuarto: '',\n      s_vacaciones: '',\n      s_res: ''\n    },\n    update: false,\n    registro_id: ''\n  },\n  // end data\n  mounted: function mounted() {\n    this.obtenerProvision();\n    this.obtenerNomina();\n  },\n  methods: {\n    calculadora: function calculadora() {\n      var propsData = {\n        title: 'Called from basic js',\n        noteProp: ['Note number 1', 'Note number 2']\n      };\n      var component = 'example-component';\n      funciones.VueSweetAlert2(component, propsData);\n    },\n    obtenerNomina: function obtenerNomina() {\n      var _this = this;\n\n      var url = '/sistema/admin/taller/nomina-obtener-empleado';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          _this.nombre = response.data.nombre;\n          _this.fecha = response.data.fecha;\n          _this.t_nomina = response.data.nomina;\n        }\n      })[\"catch\"](function (error) {});\n    },\n    //fin metodo obtener nomina\n    decimales: function decimales(saldo) {\n      if (saldo !== null && saldo !== '' && saldo !== 0) {\n        var total = Number(saldo).toFixed(2);\n        return total;\n      } else {\n        return;\n      }\n    },\n    //fin metodo decimal \n    abrirProvision: function abrirProvision() {\n      //solo para acceder al modal para agregar todo pilas \n      this.update = false;\n      $('#modal_provision').modal('show');\n    },\n    //fin de metodo abrirtransaccion\n    totales: function totales() {\n      var r1 = this.t_pro;\n      var c1 = 0;\n      var c2 = 0;\n      var c3 = 0;\n      var c4 = 0;\n      var c5 = 0;\n      r1.forEach(function (r1, i) {\n        var temp = r1.v_recibido;\n\n        if (temp != null && temp !== '') {\n          c1 += Number(temp);\n        }\n      });\n      this.suma.s_valor = c1.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.d_tercero;\n\n        if (temp != null && temp !== '') {\n          c2 += Number(temp);\n        }\n      });\n      this.suma.s_tercero = c2.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.d_cuarto;\n\n        if (temp != null && temp !== '') {\n          c3 += Number(temp);\n        }\n      });\n      this.suma.s_cuarto = c3.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.vacaciones;\n\n        if (temp != null && temp !== '') {\n          c4 += Number(temp);\n        }\n      });\n      this.suma.s_vacaciones = c4.toFixed(2);\n      r1.forEach(function (r1, i) {\n        var temp = r1.f_reserva;\n\n        if (temp != null && temp !== '') {\n          c5 += Number(temp);\n        }\n      });\n      this.suma.s_res = c5.toFixed(2);\n    },\n    //end totales\n    agregarProvision: function agregarProvision() {\n      if (this.pro.nombre_em == '') {\n        toastr.error(\"El Nombre del Empleado es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.pro.dias == '') {\n        toastr.error(\"Este campo es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.pro.v_recibido == '') {\n        toastr.error(\"El Valor recibido es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var pro = {\n          nombre_em: this.pro.nombre_em,\n          dias: this.pro.dias,\n          v_recibido: this.pro.v_recibido,\n          d_tercero: this.pro.d_tercero,\n          d_cuarto: this.pro.d_cuarto,\n          vacaciones: this.pro.vacaciones,\n          f_reserva: this.pro.f_reserva\n        };\n        this.t_pro.push(pro);\n        toastr.success(\"Registro agregado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n        this.pro.nombre_em = '';\n        this.pro.dias = '';\n        this.pro.v_recibido = '';\n        this.pro.d_tercero = '';\n        this.pro.d_cuarto = '';\n        this.pro.vacaciones = '';\n        this.pro.f_reserva = '';\n        this.totales();\n      } //end else  \n\n    },\n    //end agregar\n    editProvision: function editProvision(index) {\n      this.pro.edit = true;\n      this.registro_id = index;\n      this.pro.nombre_em = this.t_pro[index].nombre_em;\n      this.pro.dias = this.t_pro[index].dias;\n      this.pro.v_recibido = this.t_pro[index].v_recibido;\n      this.pro.d_tercero = this.t_pro[index].d_tercero;\n      this.pro.d_cuarto = this.t_pro[index].d_cuarto;\n      this.pro.vacaciones = this.t_pro[index].vacaciones;\n      this.pro.f_reserva = this.t_pro[index].f_reserva;\n    },\n    //end editprovision\n    editProvisionFuera: function editProvisionFuera(index) {\n      this.pro.edit = true;\n      this.registro_id = index;\n      this.pro.nombre_em = this.t_pro[index].nombre_em;\n      this.pro.dias = this.t_pro[index].dias;\n      this.pro.v_recibido = this.t_pro[index].v_recibido;\n      this.pro.d_tercero = this.t_pro[index].d_tercero;\n      this.pro.d_cuarto = this.t_pro[index].d_cuarto;\n      this.pro.vacaciones = this.t_pro[index].vacaciones;\n      this.pro.f_reserva = this.t_pro[index].f_reserva;\n      $('#modal_provision').modal('show');\n    },\n    //end editprovision\n    cancelarEditProvision: function cancelarEditProvision() {\n      this.pro.nombre_em = '';\n      this.pro.dias = '';\n      this.pro.v_recibido = '';\n      this.pro.d_tercero = '';\n      this.pro.d_cuarto = '';\n      this.pro.vacaciones = '';\n      this.pro.f_reserva = '';\n      this.pro.edit = false;\n    },\n    //end cancelaredit\n    actualizarProvision: function actualizarProvision() {\n      if (this.pro.nombre_em == '') {\n        toastr.error(\"El Nombre del Empleado es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.pro.dias == '') {\n        toastr.error(\"Este campo es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else if (this.pro.v_recibido == '') {\n        toastr.error(\"El Valor recibido es obligatorio\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var index = this.registro_id;\n        this.t_pro[index].nombre_em = this.pro.nombre_em;\n        this.t_pro[index].dias = this.pro.dias;\n        this.t_pro[index].v_recibido = this.pro.v_recibido;\n        this.t_pro[index].d_tercero = this.pro.d_tercero;\n        this.t_pro[index].d_cuarto = this.pro.d_cuarto;\n        this.t_pro[index].vacaciones = this.pro.vacaciones;\n        this.t_pro[index].f_reserva = this.pro.f_reserva;\n        this.cancelarEditProvision();\n        this.totales();\n        toastr.error(\"Registro actualizado correctamente\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } //end else\n\n    },\n    //end provision actualizar\n    eliminarProvision: function eliminarProvision() {\n      var id = this.eliminar.index;\n      this.t_pro.splice(id, 1);\n      this.eliminar.index = '', this.eliminar.nombre = '', $('#eliminar_p').modal('hide'); // en prueba para eliminar\n    },\n    //fin eliminar provision\n    deleteProvision: function deleteProvision(index) {\n      this.t_pro.splice(index, 1);\n      this.totales();\n    },\n    //fin metodo delete\n    WarningEliminarProvision: function WarningEliminarProvision(id) {\n      var _this71 = this;\n\n      this.eliminar.index = id;\n      this.eliminar.nombre = this.t_pro[id].nombre_em;\n      Swal.fire({\n        title: 'Seguro que deseas eliminar el Registro de  ' + this.eliminar.nombre,\n        text: \"Esta accion no se puede revertir\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Si, eliminar!'\n      }).then(function (result) {\n        if (result.isConfirmed) {\n          Swal.fire('Eliminado!', 'El Registro de la Provision ' + _this71.eliminar.nombre, 'success');\n\n          _this71.t_pro.splice(id, 1);\n\n          _this71.totales();\n        }\n      });\n    },\n    //fin metodo warningeliminarnomina\n    guardarProvision: function guardarProvision() {\n      if (this.t_pro.length == 0) {\n        toastr.error(\"Debe haber al menos un  Registrado\", \"Smarmoddle\", {\n          \"timeOut\": \"3000\"\n        });\n      } else {\n        var _this = this;\n\n        var url = '/sistema/admin/taller/provision_social';\n        axios.post(url, {\n          id: _this.id_taller,\n          s_valor: _this.suma.s_valor,\n          s_tercero: _this.suma.s_tercero,\n          s_cuarto: _this.suma.s_cuarto,\n          s_vacaciones: _this.suma.s_vacaciones,\n          s_res: _this.suma.s_res,\n          t_pro: _this.t_pro\n        }).then(function (response) {\n          if (response.data.estado == 'guardado') {\n            toastr.success(\"Provisión de Beneficio creada correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          } else if (response.data.estado == 'actualizado') {\n            toastr.warning(\"Provisión de Beneficio actualizado correctamente\", \"Smarmoddle\", {\n              \"timeOut\": \"3000\"\n            });\n          }\n        })[\"catch\"](function (error) {});\n      } //end else\n\n    },\n    //end guardarprovision\n    obtenerProvision: function obtenerProvision() {\n      var _this72 = this;\n\n      var _this = this;\n\n      var url = '/sistema/admin/taller/provision-obtener-beneficio';\n      axios.post(url, {\n        id: _this.id_taller\n      }).then(function (response) {\n        if (response.data.datos == true) {\n          toastr.success(\"Anexo Provisión Beneficio Social cargado correctamente\", \"Smarmoddle\", {\n            \"timeOut\": \"3000\"\n          });\n          _this72.t_pro = response.data.pro;\n\n          _this72.totales();\n        }\n      })[\"catch\"](function (error) {});\n    } // end obtener   \n\n  } // end methods\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/tallercontabilidad.js\n");

/***/ }),

/***/ 1:
/*!**************************************************!*\
  !*** multi ./resources/js/tallercontabilidad.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\laragon\www\smartmoodle\resources\js\tallercontabilidad.js */"./resources/js/tallercontabilidad.js");


/***/ })

/******/ });